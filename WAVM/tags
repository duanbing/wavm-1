!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ACQUIRE_DTOA_LOCK	ThirdParty/dtoa/dtoa.c	/^#define ACQUIRE_DTOA_LOCK(/;"	d	file:
ALIGNED_STRUCT	Include/WAVM/Platform/Defines.h	/^#define ALIGNED_STRUCT(/;"	d
ALLOCATE_SIGALTSTACK_ON_MAIN_STACK	Lib/Platform/POSIX/Thread.cpp	/^#define ALLOCATE_SIGALTSTACK_ON_MAIN_STACK /;"	d	file:
ARCHITECTURE_ID	output/CMakeFiles/3.13.2/CompilerIdC/CMakeCCompilerId.c	/^#   define ARCHITECTURE_ID /;"	d	file:
ARCHITECTURE_ID	output/CMakeFiles/3.13.2/CompilerIdC/CMakeCCompilerId.c	/^#  define ARCHITECTURE_ID /;"	d	file:
ARCHITECTURE_ID	output/CMakeFiles/3.13.2/CompilerIdC/CMakeCCompilerId.c	/^#  define ARCHITECTURE_ID$/;"	d	file:
ARCHITECTURE_ID	output/CMakeFiles/3.13.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#   define ARCHITECTURE_ID /;"	d	file:
ARCHITECTURE_ID	output/CMakeFiles/3.13.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define ARCHITECTURE_ID /;"	d	file:
ARCHITECTURE_ID	output/CMakeFiles/3.13.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define ARCHITECTURE_ID$/;"	d	file:
ARM_HAS_BX	ThirdParty/libunwind/src/assembly.h	/^#define ARM_HAS_BX$/;"	d
ATOMICRMW	Include/WAVM/IR/OperatorTable.h	/^#define ATOMICRMW(/;"	d
AbstractUnwindCursor	ThirdParty/libunwind/src/UnwindCursor.hpp	/^class _LIBUNWIND_HIDDEN AbstractUnwindCursor {$/;"	c	namespace:libunwind
Action	Include/WAVM/WASTParse/TestScript.h	/^		Action(ActionType inType, TextFileLocus&& inLocus) : type(inType), locus(inLocus) {}$/;"	f	struct:WAVM::WAST::Action
Action	Include/WAVM/WASTParse/TestScript.h	/^	struct Action$/;"	s	namespace:WAVM::WAST
ActionCommand	Include/WAVM/WASTParse/TestScript.h	/^		ActionCommand(TextFileLocus&& inLocus, Action* inAction)$/;"	f	struct:WAVM::WAST::ActionCommand
ActionCommand	Include/WAVM/WASTParse/TestScript.h	/^	struct ActionCommand : Command$/;"	s	namespace:WAVM::WAST
ActionType	Include/WAVM/WASTParse/TestScript.h	/^	enum class ActionType$/;"	c	namespace:WAVM::WAST
AddGas	Include/WAVM/Emscripten/gas-visit-context.h	/^void GasVisitor::AddGas()$/;"	f	class:GasVisitor
AddImportedFunc	Include/WAVM/Emscripten/insert-imported-context.h	/^void ImportFunctionInsertVisitor::AddImportedFunc()$/;"	f	class:ImportFunctionInsertVisitor
Alt	Lib/RegExp/RegExp.cpp	/^typedef Binary<NodeType::alt> Alt;$/;"	t	file:
ArrayOutputStream	Include/WAVM/Inline/Serialization.h	/^	struct ArrayOutputStream : public OutputStream$/;"	s	namespace:WAVM::Serialization
AssertInvalidOrMalformedCommand	Include/WAVM/WASTParse/TestScript.h	/^		AssertInvalidOrMalformedCommand(Command::Type inType,$/;"	f	struct:WAVM::WAST::AssertInvalidOrMalformedCommand
AssertInvalidOrMalformedCommand	Include/WAVM/WASTParse/TestScript.h	/^	struct AssertInvalidOrMalformedCommand : Command$/;"	s	namespace:WAVM::WAST
AssertReturnCommand	Include/WAVM/WASTParse/TestScript.h	/^		AssertReturnCommand(TextFileLocus&& inLocus,$/;"	f	struct:WAVM::WAST::AssertReturnCommand
AssertReturnCommand	Include/WAVM/WASTParse/TestScript.h	/^	struct AssertReturnCommand : Command$/;"	s	namespace:WAVM::WAST
AssertReturnFuncCommand	Include/WAVM/WASTParse/TestScript.h	/^		AssertReturnFuncCommand(TextFileLocus&& inLocus, Action* inAction)$/;"	f	struct:WAVM::WAST::AssertReturnFuncCommand
AssertReturnFuncCommand	Include/WAVM/WASTParse/TestScript.h	/^	struct AssertReturnFuncCommand : Command$/;"	s	namespace:WAVM::WAST
AssertReturnNaNCommand	Include/WAVM/WASTParse/TestScript.h	/^		AssertReturnNaNCommand(Command::Type inType, TextFileLocus&& inLocus, Action* inAction)$/;"	f	struct:WAVM::WAST::AssertReturnNaNCommand
AssertReturnNaNCommand	Include/WAVM/WASTParse/TestScript.h	/^	struct AssertReturnNaNCommand : Command$/;"	s	namespace:WAVM::WAST
AssertThrowsCommand	Include/WAVM/WASTParse/TestScript.h	/^		AssertThrowsCommand(TextFileLocus&& inLocus,$/;"	f	struct:WAVM::WAST::AssertThrowsCommand
AssertThrowsCommand	Include/WAVM/WASTParse/TestScript.h	/^	struct AssertThrowsCommand : Command$/;"	s	namespace:WAVM::WAST
AssertTrapCommand	Include/WAVM/WASTParse/TestScript.h	/^		AssertTrapCommand(TextFileLocus&& inLocus,$/;"	f	struct:WAVM::WAST::AssertTrapCommand
AssertTrapCommand	Include/WAVM/WASTParse/TestScript.h	/^	struct AssertTrapCommand : Command$/;"	s	namespace:WAVM::WAST
AssertUnlinkableCommand	Include/WAVM/WASTParse/TestScript.h	/^		AssertUnlinkableCommand(TextFileLocus&& inLocus, ModuleAction* inModuleAction)$/;"	f	struct:WAVM::WAST::AssertUnlinkableCommand
AssertUnlinkableCommand	Include/WAVM/WASTParse/TestScript.h	/^	struct AssertUnlinkableCommand : Command$/;"	s	namespace:WAVM::WAST
AtomicLoadOrStoreImm	Include/WAVM/IR/Operators.h	/^	template<Uptr naturalAlignmentLog2> struct AtomicLoadOrStoreImm$/;"	s	namespace:WAVM::IR
Avoid_Underflow	ThirdParty/dtoa/dtoa.c	/^#define Avoid_Underflow$/;"	d	file:
Avoid_Underflow	ThirdParty/dtoa/dtoa.c	/^#undef Avoid_Underflow$/;"	d	file:
BCinfo	ThirdParty/dtoa/dtoa.c	/^BCinfo { int dp0, dp1, dplen, dsign, e0, inexact, nd, nd0, rounding, scale, uflchk; };$/;"	s	file:
BCinfo	ThirdParty/dtoa/dtoa.c	/^typedef struct BCinfo BCinfo;$/;"	t	typeref:struct:BCinfo	file:
BEGIN_FUNC	Lib/Platform/POSIX/POSIX.S	/^#define BEGIN_FUNC(name,...) \\$/;"	d
BINARY	Include/WAVM/IR/OperatorTable.h	/^#define BINARY(/;"	d
BULKCOPY	Include/WAVM/IR/OperatorTable.h	/^#define BULKCOPY /;"	d
BYTE	Include/WAVM/Inline/xxhash/xxhash.c	/^    typedef uint8_t  BYTE;$/;"	t	file:
BYTE	Include/WAVM/Inline/xxhash/xxhash.c	/^    typedef unsigned char      BYTE;$/;"	t	file:
Balloc	ThirdParty/dtoa/dtoa.c	/^Balloc$/;"	f	file:
Bcopy	ThirdParty/dtoa/dtoa.c	/^#define Bcopy(/;"	d	file:
Bfree	ThirdParty/dtoa/dtoa.c	/^Bfree$/;"	f	file:
Bias	ThirdParty/dtoa/dtoa.c	/^#define Bias /;"	d	file:
Big0	ThirdParty/dtoa/dtoa.c	/^#define Big0 /;"	d	file:
Big1	ThirdParty/dtoa/dtoa.c	/^#define Big1 /;"	d	file:
Bigint	ThirdParty/dtoa/dtoa.c	/^ typedef struct Bigint Bigint;$/;"	t	typeref:struct:Bigint	file:
Bigint	ThirdParty/dtoa/dtoa.c	/^Bigint {$/;"	s	file:
Binary	Lib/RegExp/RegExp.cpp	/^	Binary(Node* inFirstChild, Node* inSecondChild)$/;"	f	struct:Binary
Binary	Lib/RegExp/RegExp.cpp	/^template<NodeType inType> struct Binary : Node$/;"	s	file:
Bits	Include/WAVM/Inline/FloatComponents.h	/^		typedef U32 Bits;$/;"	t	struct:FloatComponents
Bits	Include/WAVM/Inline/FloatComponents.h	/^		typedef U64 Bits;$/;"	t	struct:WAVM::FloatComponents
Bletch	ThirdParty/dtoa/dtoa.c	/^#define Bletch /;"	d	file:
Bndry_mask	ThirdParty/dtoa/dtoa.c	/^#define Bndry_mask /;"	d	file:
Bndry_mask1	ThirdParty/dtoa/dtoa.c	/^#define Bndry_mask1 /;"	d	file:
BranchImm	Include/WAVM/IR/Operators.h	/^	struct BranchImm$/;"	s	namespace:WAVM::IR
BranchTableImm	Include/WAVM/IR/Operators.h	/^	struct BranchTableImm$/;"	s	namespace:WAVM::IR
BranchTarget	Lib/LLVMJIT/EmitFunctionContext.h	/^		struct BranchTarget$/;"	s	struct:WAVM::LLVMJIT::EmitFunctionContext
Bucket	Include/WAVM/Inline/HashTable.h	/^		typedef HashTableBucket<Element> Bucket;$/;"	t	struct:WAVM::HashTable
Bug	ThirdParty/dtoa/dtoa.c	/^#define Bug(/;"	d	file:
Builder	Lib/NFA/NFA.cpp	/^	struct Builder$/;"	s	namespace:WAVM::NFA	file:
CATCH	ThirdParty/libunwind/src/Unwind-EHABI.cpp	/^    CATCH   = 0x2,$/;"	e	enum:__anon79::Descriptor::__anon81	file:
CFI_Parser	ThirdParty/libunwind/src/DwarfParser.hpp	/^class CFI_Parser {$/;"	c	namespace:libunwind
CFI_REG_R12	Lib/Platform/POSIX/POSIX.S	/^#define CFI_REG_R12   12$/;"	d
CFI_REG_R13	Lib/Platform/POSIX/POSIX.S	/^#define CFI_REG_R13   13$/;"	d
CFI_REG_R14	Lib/Platform/POSIX/POSIX.S	/^#define CFI_REG_R14   14$/;"	d
CFI_REG_R15	Lib/Platform/POSIX/POSIX.S	/^#define CFI_REG_R15   15$/;"	d
CFI_REG_RBP	Lib/Platform/POSIX/POSIX.S	/^#define CFI_REG_RBP    6$/;"	d
CFI_REG_RBX	Lib/Platform/POSIX/POSIX.S	/^#define CFI_REG_RBX    3$/;"	d
CFI_REG_RDI	Lib/Platform/POSIX/POSIX.S	/^#define CFI_REG_RDI    5$/;"	d
CFI_REG_RIP	Lib/Platform/POSIX/POSIX.S	/^#define CFI_REG_RIP   16$/;"	d
CFI_REG_RSP	Lib/Platform/POSIX/POSIX.S	/^#define CFI_REG_RSP    7$/;"	d
CFI_cfa_val_expression	Lib/Platform/POSIX/POSIX.S	/^#define CFI_cfa_val_expression(reg,length) .cfi_escape 0x16, reg, length;$/;"	d
CFI_def_cfa_expression	Lib/Platform/POSIX/POSIX.S	/^#define CFI_def_cfa_expression(length)     .cfi_escape 0x0f, length;$/;"	d
CFI_save_reg_at_reg_offset	Lib/Platform/POSIX/POSIX.S	/^#define CFI_save_reg_at_reg_offset(savedReg,baseReg,offset) \\$/;"	d
CIE_Info	ThirdParty/libunwind/src/DwarfInstructions.hpp	/^  typedef typename CFI_Parser<A>::CIE_Info          CIE_Info;$/;"	t	class:libunwind::DwarfInstructions
CIE_Info	ThirdParty/libunwind/src/DwarfParser.hpp	/^  struct CIE_Info {$/;"	s	class:libunwind::CFI_Parser
CLEANUP	ThirdParty/libunwind/src/Unwind-EHABI.cpp	/^    CLEANUP = 0x0,$/;"	e	enum:__anon79::Descriptor::__anon81	file:
CMAKE_BINARY_DIR	output/Examples/Makefile	/^CMAKE_BINARY_DIR = \/Users\/duanbing\/Project\/github-xuper\/wavm\/WAVM\/output$/;"	m
CMAKE_BINARY_DIR	output/Include/WAVM/Inline/Makefile	/^CMAKE_BINARY_DIR = \/Users\/duanbing\/Project\/github-xuper\/wavm\/WAVM\/output$/;"	m
CMAKE_BINARY_DIR	output/Include/WAVM/Inline/xxhash/Makefile	/^CMAKE_BINARY_DIR = \/Users\/duanbing\/Project\/github-xuper\/wavm\/WAVM\/output$/;"	m
CMAKE_BINARY_DIR	output/Lib/Emscripten/Makefile	/^CMAKE_BINARY_DIR = \/Users\/duanbing\/Project\/github-xuper\/wavm\/WAVM\/output$/;"	m
CMAKE_BINARY_DIR	output/Lib/IR/Makefile	/^CMAKE_BINARY_DIR = \/Users\/duanbing\/Project\/github-xuper\/wavm\/WAVM\/output$/;"	m
CMAKE_BINARY_DIR	output/Lib/LLVMJIT/Makefile	/^CMAKE_BINARY_DIR = \/Users\/duanbing\/Project\/github-xuper\/wavm\/WAVM\/output$/;"	m
CMAKE_BINARY_DIR	output/Lib/Logging/Makefile	/^CMAKE_BINARY_DIR = \/Users\/duanbing\/Project\/github-xuper\/wavm\/WAVM\/output$/;"	m
CMAKE_BINARY_DIR	output/Lib/NFA/Makefile	/^CMAKE_BINARY_DIR = \/Users\/duanbing\/Project\/github-xuper\/wavm\/WAVM\/output$/;"	m
CMAKE_BINARY_DIR	output/Lib/Platform/Makefile	/^CMAKE_BINARY_DIR = \/Users\/duanbing\/Project\/github-xuper\/wavm\/WAVM\/output$/;"	m
CMAKE_BINARY_DIR	output/Lib/RegExp/Makefile	/^CMAKE_BINARY_DIR = \/Users\/duanbing\/Project\/github-xuper\/wavm\/WAVM\/output$/;"	m
CMAKE_BINARY_DIR	output/Lib/Runtime/Makefile	/^CMAKE_BINARY_DIR = \/Users\/duanbing\/Project\/github-xuper\/wavm\/WAVM\/output$/;"	m
CMAKE_BINARY_DIR	output/Lib/ThreadTest/Makefile	/^CMAKE_BINARY_DIR = \/Users\/duanbing\/Project\/github-xuper\/wavm\/WAVM\/output$/;"	m
CMAKE_BINARY_DIR	output/Lib/WASI/Makefile	/^CMAKE_BINARY_DIR = \/Users\/duanbing\/Project\/github-xuper\/wavm\/WAVM\/output$/;"	m
CMAKE_BINARY_DIR	output/Lib/WASM/Makefile	/^CMAKE_BINARY_DIR = \/Users\/duanbing\/Project\/github-xuper\/wavm\/WAVM\/output$/;"	m
CMAKE_BINARY_DIR	output/Lib/WASTParse/Makefile	/^CMAKE_BINARY_DIR = \/Users\/duanbing\/Project\/github-xuper\/wavm\/WAVM\/output$/;"	m
CMAKE_BINARY_DIR	output/Lib/WASTPrint/Makefile	/^CMAKE_BINARY_DIR = \/Users\/duanbing\/Project\/github-xuper\/wavm\/WAVM\/output$/;"	m
CMAKE_BINARY_DIR	output/Lib/wavm-c/Makefile	/^CMAKE_BINARY_DIR = \/Users\/duanbing\/Project\/github-xuper\/wavm\/WAVM\/output$/;"	m
CMAKE_BINARY_DIR	output/Makefile	/^CMAKE_BINARY_DIR = \/Users\/duanbing\/Project\/github-xuper\/wavm\/WAVM\/output$/;"	m
CMAKE_BINARY_DIR	output/Programs/wavm-as/Makefile	/^CMAKE_BINARY_DIR = \/Users\/duanbing\/Project\/github-xuper\/wavm\/WAVM\/output$/;"	m
CMAKE_BINARY_DIR	output/Programs/wavm-compile/Makefile	/^CMAKE_BINARY_DIR = \/Users\/duanbing\/Project\/github-xuper\/wavm\/WAVM\/output$/;"	m
CMAKE_BINARY_DIR	output/Programs/wavm-disas/Makefile	/^CMAKE_BINARY_DIR = \/Users\/duanbing\/Project\/github-xuper\/wavm\/WAVM\/output$/;"	m
CMAKE_BINARY_DIR	output/Programs/wavm-run-wasi/Makefile	/^CMAKE_BINARY_DIR = \/Users\/duanbing\/Project\/github-xuper\/wavm\/WAVM\/output$/;"	m
CMAKE_BINARY_DIR	output/Programs/wavm-run/Makefile	/^CMAKE_BINARY_DIR = \/Users\/duanbing\/Project\/github-xuper\/wavm\/WAVM\/output$/;"	m
CMAKE_BINARY_DIR	output/Test/Benchmarks/Makefile	/^CMAKE_BINARY_DIR = \/Users\/duanbing\/Project\/github-xuper\/wavm\/WAVM\/output$/;"	m
CMAKE_BINARY_DIR	output/Test/Containers/Makefile	/^CMAKE_BINARY_DIR = \/Users\/duanbing\/Project\/github-xuper\/wavm\/WAVM\/output$/;"	m
CMAKE_BINARY_DIR	output/Test/DumpTestModules/Makefile	/^CMAKE_BINARY_DIR = \/Users\/duanbing\/Project\/github-xuper\/wavm\/WAVM\/output$/;"	m
CMAKE_BINARY_DIR	output/Test/Makefile	/^CMAKE_BINARY_DIR = \/Users\/duanbing\/Project\/github-xuper\/wavm\/WAVM\/output$/;"	m
CMAKE_BINARY_DIR	output/Test/RunTestScript/Makefile	/^CMAKE_BINARY_DIR = \/Users\/duanbing\/Project\/github-xuper\/wavm\/WAVM\/output$/;"	m
CMAKE_BINARY_DIR	output/Test/fuzz/Makefile	/^CMAKE_BINARY_DIR = \/Users\/duanbing\/Project\/github-xuper\/wavm\/WAVM\/output$/;"	m
CMAKE_BINARY_DIR	output/Test/spec/Makefile	/^CMAKE_BINARY_DIR = \/Users\/duanbing\/Project\/github-xuper\/wavm\/WAVM\/output$/;"	m
CMAKE_BINARY_DIR	output/Test/wavm-c/Makefile	/^CMAKE_BINARY_DIR = \/Users\/duanbing\/Project\/github-xuper\/wavm\/WAVM\/output$/;"	m
CMAKE_BINARY_DIR	output/ThirdParty/bridge/Makefile	/^CMAKE_BINARY_DIR = \/Users\/duanbing\/Project\/github-xuper\/wavm\/WAVM\/output$/;"	m
CMAKE_BINARY_DIR	output/ThirdParty/dtoa/Makefile	/^CMAKE_BINARY_DIR = \/Users\/duanbing\/Project\/github-xuper\/wavm\/WAVM\/output$/;"	m
CMAKE_BINARY_DIR	output/ThirdParty/libunwind/Makefile	/^CMAKE_BINARY_DIR = \/Users\/duanbing\/Project\/github-xuper\/wavm\/WAVM\/output$/;"	m
CMAKE_COMMAND	output/Examples/Makefile	/^CMAKE_COMMAND = \/usr\/local\/Cellar\/cmake\/3.13.2\/bin\/cmake$/;"	m
CMAKE_COMMAND	output/Include/WAVM/Inline/Makefile	/^CMAKE_COMMAND = \/usr\/local\/Cellar\/cmake\/3.13.2\/bin\/cmake$/;"	m
CMAKE_COMMAND	output/Include/WAVM/Inline/xxhash/Makefile	/^CMAKE_COMMAND = \/usr\/local\/Cellar\/cmake\/3.13.2\/bin\/cmake$/;"	m
CMAKE_COMMAND	output/Lib/Emscripten/Makefile	/^CMAKE_COMMAND = \/usr\/local\/Cellar\/cmake\/3.13.2\/bin\/cmake$/;"	m
CMAKE_COMMAND	output/Lib/IR/Makefile	/^CMAKE_COMMAND = \/usr\/local\/Cellar\/cmake\/3.13.2\/bin\/cmake$/;"	m
CMAKE_COMMAND	output/Lib/LLVMJIT/Makefile	/^CMAKE_COMMAND = \/usr\/local\/Cellar\/cmake\/3.13.2\/bin\/cmake$/;"	m
CMAKE_COMMAND	output/Lib/Logging/Makefile	/^CMAKE_COMMAND = \/usr\/local\/Cellar\/cmake\/3.13.2\/bin\/cmake$/;"	m
CMAKE_COMMAND	output/Lib/NFA/Makefile	/^CMAKE_COMMAND = \/usr\/local\/Cellar\/cmake\/3.13.2\/bin\/cmake$/;"	m
CMAKE_COMMAND	output/Lib/Platform/Makefile	/^CMAKE_COMMAND = \/usr\/local\/Cellar\/cmake\/3.13.2\/bin\/cmake$/;"	m
CMAKE_COMMAND	output/Lib/RegExp/Makefile	/^CMAKE_COMMAND = \/usr\/local\/Cellar\/cmake\/3.13.2\/bin\/cmake$/;"	m
CMAKE_COMMAND	output/Lib/Runtime/Makefile	/^CMAKE_COMMAND = \/usr\/local\/Cellar\/cmake\/3.13.2\/bin\/cmake$/;"	m
CMAKE_COMMAND	output/Lib/ThreadTest/Makefile	/^CMAKE_COMMAND = \/usr\/local\/Cellar\/cmake\/3.13.2\/bin\/cmake$/;"	m
CMAKE_COMMAND	output/Lib/WASI/Makefile	/^CMAKE_COMMAND = \/usr\/local\/Cellar\/cmake\/3.13.2\/bin\/cmake$/;"	m
CMAKE_COMMAND	output/Lib/WASM/Makefile	/^CMAKE_COMMAND = \/usr\/local\/Cellar\/cmake\/3.13.2\/bin\/cmake$/;"	m
CMAKE_COMMAND	output/Lib/WASTParse/Makefile	/^CMAKE_COMMAND = \/usr\/local\/Cellar\/cmake\/3.13.2\/bin\/cmake$/;"	m
CMAKE_COMMAND	output/Lib/WASTPrint/Makefile	/^CMAKE_COMMAND = \/usr\/local\/Cellar\/cmake\/3.13.2\/bin\/cmake$/;"	m
CMAKE_COMMAND	output/Lib/wavm-c/Makefile	/^CMAKE_COMMAND = \/usr\/local\/Cellar\/cmake\/3.13.2\/bin\/cmake$/;"	m
CMAKE_COMMAND	output/Makefile	/^CMAKE_COMMAND = \/usr\/local\/Cellar\/cmake\/3.13.2\/bin\/cmake$/;"	m
CMAKE_COMMAND	output/Programs/wavm-as/Makefile	/^CMAKE_COMMAND = \/usr\/local\/Cellar\/cmake\/3.13.2\/bin\/cmake$/;"	m
CMAKE_COMMAND	output/Programs/wavm-compile/Makefile	/^CMAKE_COMMAND = \/usr\/local\/Cellar\/cmake\/3.13.2\/bin\/cmake$/;"	m
CMAKE_COMMAND	output/Programs/wavm-disas/Makefile	/^CMAKE_COMMAND = \/usr\/local\/Cellar\/cmake\/3.13.2\/bin\/cmake$/;"	m
CMAKE_COMMAND	output/Programs/wavm-run-wasi/Makefile	/^CMAKE_COMMAND = \/usr\/local\/Cellar\/cmake\/3.13.2\/bin\/cmake$/;"	m
CMAKE_COMMAND	output/Programs/wavm-run/Makefile	/^CMAKE_COMMAND = \/usr\/local\/Cellar\/cmake\/3.13.2\/bin\/cmake$/;"	m
CMAKE_COMMAND	output/Test/Benchmarks/Makefile	/^CMAKE_COMMAND = \/usr\/local\/Cellar\/cmake\/3.13.2\/bin\/cmake$/;"	m
CMAKE_COMMAND	output/Test/Containers/Makefile	/^CMAKE_COMMAND = \/usr\/local\/Cellar\/cmake\/3.13.2\/bin\/cmake$/;"	m
CMAKE_COMMAND	output/Test/DumpTestModules/Makefile	/^CMAKE_COMMAND = \/usr\/local\/Cellar\/cmake\/3.13.2\/bin\/cmake$/;"	m
CMAKE_COMMAND	output/Test/Makefile	/^CMAKE_COMMAND = \/usr\/local\/Cellar\/cmake\/3.13.2\/bin\/cmake$/;"	m
CMAKE_COMMAND	output/Test/RunTestScript/Makefile	/^CMAKE_COMMAND = \/usr\/local\/Cellar\/cmake\/3.13.2\/bin\/cmake$/;"	m
CMAKE_COMMAND	output/Test/fuzz/Makefile	/^CMAKE_COMMAND = \/usr\/local\/Cellar\/cmake\/3.13.2\/bin\/cmake$/;"	m
CMAKE_COMMAND	output/Test/spec/Makefile	/^CMAKE_COMMAND = \/usr\/local\/Cellar\/cmake\/3.13.2\/bin\/cmake$/;"	m
CMAKE_COMMAND	output/Test/wavm-c/Makefile	/^CMAKE_COMMAND = \/usr\/local\/Cellar\/cmake\/3.13.2\/bin\/cmake$/;"	m
CMAKE_COMMAND	output/ThirdParty/bridge/Makefile	/^CMAKE_COMMAND = \/usr\/local\/Cellar\/cmake\/3.13.2\/bin\/cmake$/;"	m
CMAKE_COMMAND	output/ThirdParty/dtoa/Makefile	/^CMAKE_COMMAND = \/usr\/local\/Cellar\/cmake\/3.13.2\/bin\/cmake$/;"	m
CMAKE_COMMAND	output/ThirdParty/libunwind/Makefile	/^CMAKE_COMMAND = \/usr\/local\/Cellar\/cmake\/3.13.2\/bin\/cmake$/;"	m
CMAKE_SOURCE_DIR	output/Examples/Makefile	/^CMAKE_SOURCE_DIR = \/Users\/duanbing\/Project\/github-xuper\/wavm\/WAVM$/;"	m
CMAKE_SOURCE_DIR	output/Include/WAVM/Inline/Makefile	/^CMAKE_SOURCE_DIR = \/Users\/duanbing\/Project\/github-xuper\/wavm\/WAVM$/;"	m
CMAKE_SOURCE_DIR	output/Include/WAVM/Inline/xxhash/Makefile	/^CMAKE_SOURCE_DIR = \/Users\/duanbing\/Project\/github-xuper\/wavm\/WAVM$/;"	m
CMAKE_SOURCE_DIR	output/Lib/Emscripten/Makefile	/^CMAKE_SOURCE_DIR = \/Users\/duanbing\/Project\/github-xuper\/wavm\/WAVM$/;"	m
CMAKE_SOURCE_DIR	output/Lib/IR/Makefile	/^CMAKE_SOURCE_DIR = \/Users\/duanbing\/Project\/github-xuper\/wavm\/WAVM$/;"	m
CMAKE_SOURCE_DIR	output/Lib/LLVMJIT/Makefile	/^CMAKE_SOURCE_DIR = \/Users\/duanbing\/Project\/github-xuper\/wavm\/WAVM$/;"	m
CMAKE_SOURCE_DIR	output/Lib/Logging/Makefile	/^CMAKE_SOURCE_DIR = \/Users\/duanbing\/Project\/github-xuper\/wavm\/WAVM$/;"	m
CMAKE_SOURCE_DIR	output/Lib/NFA/Makefile	/^CMAKE_SOURCE_DIR = \/Users\/duanbing\/Project\/github-xuper\/wavm\/WAVM$/;"	m
CMAKE_SOURCE_DIR	output/Lib/Platform/Makefile	/^CMAKE_SOURCE_DIR = \/Users\/duanbing\/Project\/github-xuper\/wavm\/WAVM$/;"	m
CMAKE_SOURCE_DIR	output/Lib/RegExp/Makefile	/^CMAKE_SOURCE_DIR = \/Users\/duanbing\/Project\/github-xuper\/wavm\/WAVM$/;"	m
CMAKE_SOURCE_DIR	output/Lib/Runtime/Makefile	/^CMAKE_SOURCE_DIR = \/Users\/duanbing\/Project\/github-xuper\/wavm\/WAVM$/;"	m
CMAKE_SOURCE_DIR	output/Lib/ThreadTest/Makefile	/^CMAKE_SOURCE_DIR = \/Users\/duanbing\/Project\/github-xuper\/wavm\/WAVM$/;"	m
CMAKE_SOURCE_DIR	output/Lib/WASI/Makefile	/^CMAKE_SOURCE_DIR = \/Users\/duanbing\/Project\/github-xuper\/wavm\/WAVM$/;"	m
CMAKE_SOURCE_DIR	output/Lib/WASM/Makefile	/^CMAKE_SOURCE_DIR = \/Users\/duanbing\/Project\/github-xuper\/wavm\/WAVM$/;"	m
CMAKE_SOURCE_DIR	output/Lib/WASTParse/Makefile	/^CMAKE_SOURCE_DIR = \/Users\/duanbing\/Project\/github-xuper\/wavm\/WAVM$/;"	m
CMAKE_SOURCE_DIR	output/Lib/WASTPrint/Makefile	/^CMAKE_SOURCE_DIR = \/Users\/duanbing\/Project\/github-xuper\/wavm\/WAVM$/;"	m
CMAKE_SOURCE_DIR	output/Lib/wavm-c/Makefile	/^CMAKE_SOURCE_DIR = \/Users\/duanbing\/Project\/github-xuper\/wavm\/WAVM$/;"	m
CMAKE_SOURCE_DIR	output/Makefile	/^CMAKE_SOURCE_DIR = \/Users\/duanbing\/Project\/github-xuper\/wavm\/WAVM$/;"	m
CMAKE_SOURCE_DIR	output/Programs/wavm-as/Makefile	/^CMAKE_SOURCE_DIR = \/Users\/duanbing\/Project\/github-xuper\/wavm\/WAVM$/;"	m
CMAKE_SOURCE_DIR	output/Programs/wavm-compile/Makefile	/^CMAKE_SOURCE_DIR = \/Users\/duanbing\/Project\/github-xuper\/wavm\/WAVM$/;"	m
CMAKE_SOURCE_DIR	output/Programs/wavm-disas/Makefile	/^CMAKE_SOURCE_DIR = \/Users\/duanbing\/Project\/github-xuper\/wavm\/WAVM$/;"	m
CMAKE_SOURCE_DIR	output/Programs/wavm-run-wasi/Makefile	/^CMAKE_SOURCE_DIR = \/Users\/duanbing\/Project\/github-xuper\/wavm\/WAVM$/;"	m
CMAKE_SOURCE_DIR	output/Programs/wavm-run/Makefile	/^CMAKE_SOURCE_DIR = \/Users\/duanbing\/Project\/github-xuper\/wavm\/WAVM$/;"	m
CMAKE_SOURCE_DIR	output/Test/Benchmarks/Makefile	/^CMAKE_SOURCE_DIR = \/Users\/duanbing\/Project\/github-xuper\/wavm\/WAVM$/;"	m
CMAKE_SOURCE_DIR	output/Test/Containers/Makefile	/^CMAKE_SOURCE_DIR = \/Users\/duanbing\/Project\/github-xuper\/wavm\/WAVM$/;"	m
CMAKE_SOURCE_DIR	output/Test/DumpTestModules/Makefile	/^CMAKE_SOURCE_DIR = \/Users\/duanbing\/Project\/github-xuper\/wavm\/WAVM$/;"	m
CMAKE_SOURCE_DIR	output/Test/Makefile	/^CMAKE_SOURCE_DIR = \/Users\/duanbing\/Project\/github-xuper\/wavm\/WAVM$/;"	m
CMAKE_SOURCE_DIR	output/Test/RunTestScript/Makefile	/^CMAKE_SOURCE_DIR = \/Users\/duanbing\/Project\/github-xuper\/wavm\/WAVM$/;"	m
CMAKE_SOURCE_DIR	output/Test/fuzz/Makefile	/^CMAKE_SOURCE_DIR = \/Users\/duanbing\/Project\/github-xuper\/wavm\/WAVM$/;"	m
CMAKE_SOURCE_DIR	output/Test/spec/Makefile	/^CMAKE_SOURCE_DIR = \/Users\/duanbing\/Project\/github-xuper\/wavm\/WAVM$/;"	m
CMAKE_SOURCE_DIR	output/Test/wavm-c/Makefile	/^CMAKE_SOURCE_DIR = \/Users\/duanbing\/Project\/github-xuper\/wavm\/WAVM$/;"	m
CMAKE_SOURCE_DIR	output/ThirdParty/bridge/Makefile	/^CMAKE_SOURCE_DIR = \/Users\/duanbing\/Project\/github-xuper\/wavm\/WAVM$/;"	m
CMAKE_SOURCE_DIR	output/ThirdParty/dtoa/Makefile	/^CMAKE_SOURCE_DIR = \/Users\/duanbing\/Project\/github-xuper\/wavm\/WAVM$/;"	m
CMAKE_SOURCE_DIR	output/ThirdParty/libunwind/Makefile	/^CMAKE_SOURCE_DIR = \/Users\/duanbing\/Project\/github-xuper\/wavm\/WAVM$/;"	m
COMPAREEXCHANGE	Include/WAVM/IR/OperatorTable.h	/^#define COMPAREEXCHANGE(/;"	d
COMPILER_ID	output/CMakeFiles/3.13.2/CompilerIdC/CMakeCCompilerId.c	/^# define COMPILER_ID /;"	d	file:
COMPILER_ID	output/CMakeFiles/3.13.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define COMPILER_ID /;"	d	file:
COMPILER_VERSION_INTERNAL	output/CMakeFiles/3.13.2/CompilerIdC/CMakeCCompilerId.c	/^#  define COMPILER_VERSION_INTERNAL /;"	d	file:
COMPILER_VERSION_INTERNAL	output/CMakeFiles/3.13.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define COMPILER_VERSION_INTERNAL /;"	d	file:
COMPILER_VERSION_MAJOR	output/CMakeFiles/3.13.2/CompilerIdC/CMakeCCompilerId.c	/^  # define COMPILER_VERSION_MAJOR /;"	d	file:
COMPILER_VERSION_MAJOR	output/CMakeFiles/3.13.2/CompilerIdC/CMakeCCompilerId.c	/^#  define COMPILER_VERSION_MAJOR /;"	d	file:
COMPILER_VERSION_MAJOR	output/CMakeFiles/3.13.2/CompilerIdC/CMakeCCompilerId.c	/^# define COMPILER_VERSION_MAJOR /;"	d	file:
COMPILER_VERSION_MAJOR	output/CMakeFiles/3.13.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^  # define COMPILER_VERSION_MAJOR /;"	d	file:
COMPILER_VERSION_MAJOR	output/CMakeFiles/3.13.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define COMPILER_VERSION_MAJOR /;"	d	file:
COMPILER_VERSION_MAJOR	output/CMakeFiles/3.13.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define COMPILER_VERSION_MAJOR /;"	d	file:
COMPILER_VERSION_MINOR	output/CMakeFiles/3.13.2/CompilerIdC/CMakeCCompilerId.c	/^  # define COMPILER_VERSION_MINOR /;"	d	file:
COMPILER_VERSION_MINOR	output/CMakeFiles/3.13.2/CompilerIdC/CMakeCCompilerId.c	/^#  define COMPILER_VERSION_MINOR /;"	d	file:
COMPILER_VERSION_MINOR	output/CMakeFiles/3.13.2/CompilerIdC/CMakeCCompilerId.c	/^# define COMPILER_VERSION_MINOR /;"	d	file:
COMPILER_VERSION_MINOR	output/CMakeFiles/3.13.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^  # define COMPILER_VERSION_MINOR /;"	d	file:
COMPILER_VERSION_MINOR	output/CMakeFiles/3.13.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define COMPILER_VERSION_MINOR /;"	d	file:
COMPILER_VERSION_MINOR	output/CMakeFiles/3.13.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define COMPILER_VERSION_MINOR /;"	d	file:
COMPILER_VERSION_PATCH	output/CMakeFiles/3.13.2/CompilerIdC/CMakeCCompilerId.c	/^  # define COMPILER_VERSION_PATCH /;"	d	file:
COMPILER_VERSION_PATCH	output/CMakeFiles/3.13.2/CompilerIdC/CMakeCCompilerId.c	/^#   define COMPILER_VERSION_PATCH /;"	d	file:
COMPILER_VERSION_PATCH	output/CMakeFiles/3.13.2/CompilerIdC/CMakeCCompilerId.c	/^#  define COMPILER_VERSION_PATCH /;"	d	file:
COMPILER_VERSION_PATCH	output/CMakeFiles/3.13.2/CompilerIdC/CMakeCCompilerId.c	/^# define COMPILER_VERSION_PATCH /;"	d	file:
COMPILER_VERSION_PATCH	output/CMakeFiles/3.13.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^  # define COMPILER_VERSION_PATCH /;"	d	file:
COMPILER_VERSION_PATCH	output/CMakeFiles/3.13.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#   define COMPILER_VERSION_PATCH /;"	d	file:
COMPILER_VERSION_PATCH	output/CMakeFiles/3.13.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define COMPILER_VERSION_PATCH /;"	d	file:
COMPILER_VERSION_PATCH	output/CMakeFiles/3.13.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define COMPILER_VERSION_PATCH /;"	d	file:
COMPILER_VERSION_TWEAK	output/CMakeFiles/3.13.2/CompilerIdC/CMakeCCompilerId.c	/^#  define COMPILER_VERSION_TWEAK /;"	d	file:
COMPILER_VERSION_TWEAK	output/CMakeFiles/3.13.2/CompilerIdC/CMakeCCompilerId.c	/^# define COMPILER_VERSION_TWEAK /;"	d	file:
COMPILER_VERSION_TWEAK	output/CMakeFiles/3.13.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define COMPILER_VERSION_TWEAK /;"	d	file:
COMPILER_VERSION_TWEAK	output/CMakeFiles/3.13.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define COMPILER_VERSION_TWEAK /;"	d	file:
COMP_OP	ThirdParty/libunwind/src/config.h	/^# define COMP_OP /;"	d
COMP_OP	ThirdParty/libunwind/src/config.h	/^#undef COMP_OP$/;"	d
CONST	ThirdParty/dtoa/dtoa.c	/^#define CONST /;"	d	file:
CXX_STD	output/CMakeFiles/3.13.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#define CXX_STD /;"	d	file:
C_DIALECT	output/CMakeFiles/3.13.2/CompilerIdC/CMakeCCompilerId.c	/^#  define C_DIALECT /;"	d	file:
C_DIALECT	output/CMakeFiles/3.13.2/CompilerIdC/CMakeCCompilerId.c	/^#  define C_DIALECT$/;"	d	file:
C_DIALECT	output/CMakeFiles/3.13.2/CompilerIdC/CMakeCCompilerId.c	/^# define C_DIALECT /;"	d	file:
CallIndirectImm	Include/WAVM/IR/Operators.h	/^	struct CallIndirectImm$/;"	s	namespace:WAVM::IR
CallStack	Include/WAVM/Platform/Diagnostics.h	/^		CallStack() {}$/;"	f	struct:WAVM::Platform::CallStack
CallStack	Include/WAVM/Platform/Diagnostics.h	/^		CallStack(CallStack&& movee) : stackFrames(std::move(movee.stackFrames)) {}$/;"	f	struct:WAVM::Platform::CallStack
CallStack	Include/WAVM/Platform/Diagnostics.h	/^		CallStack(const CallStack& copy) : stackFrames(copy.stackFrames) {}$/;"	f	struct:WAVM::Platform::CallStack
CallStack	Include/WAVM/Platform/Diagnostics.h	/^	struct CallStack$/;"	s	namespace:WAVM::Platform
CallingConvention	Include/WAVM/IR/Types.h	/^	enum class CallingConvention$/;"	c	class:WAVM::IR::ValueType
CatchContext	Lib/LLVMJIT/EmitFunctionContext.h	/^		struct CatchContext$/;"	s	struct:WAVM::LLVMJIT::EmitFunctionContext
Category	Include/WAVM/Logging/Logging.h	/^	enum Category$/;"	g	namespace:WAVM::Log
CharSet	Include/WAVM/NFA/NFA.h	/^	typedef DenseStaticIntSet<U8, 256> CharSet;$/;"	t	namespace:WAVM::NFA
Check_FLT_ROUNDS	ThirdParty/dtoa/dtoa.c	/^#define Check_FLT_ROUNDS$/;"	d	file:
Check_FLT_ROUNDS	ThirdParty/dtoa/dtoa.c	/^#undef Check_FLT_ROUNDS$/;"	d	file:
CodeStream	Include/WAVM/Emscripten/gas-visit-context.h	/^typedef CodeValidationProxyStream<OperatorEncoderStream> CodeStream;$/;"	t
CodeStream	Include/WAVM/Emscripten/insert-imported-context.h	/^typedef CodeValidationProxyStream<OperatorEncoderStream> CodeStream;$/;"	t
CodeStream	Test/fuzz/fuzz-compile-model.cpp	/^typedef CodeValidationProxyStream<OperatorEncoderStream> CodeStream;$/;"	t	file:
CodeValidationProxyStream	Include/WAVM/IR/Validate.h	/^		CodeValidationProxyStream(const Module& module,$/;"	f	struct:WAVM::IR::CodeValidationProxyStream
CodeValidationProxyStream	Include/WAVM/IR/Validate.h	/^	template<typename InnerStream> struct CodeValidationProxyStream$/;"	s	namespace:WAVM::IR
CodeValidationStream	Include/WAVM/IR/Validate.h	/^	struct CodeValidationStream$/;"	s	namespace:WAVM::IR
CodeValidationStream	Lib/IR/Validate.cpp	/^IR::CodeValidationStream::CodeValidationStream(const Module& module, const FunctionDef& functionDef)$/;"	f	class:IR::CodeValidationStream
CodeValidationStreamImpl	Lib/IR/Validate.cpp	/^		CodeValidationStreamImpl(const Module& module, const FunctionDef& functionDef)$/;"	f	struct:WAVM::IR::CodeValidationStreamImpl
CodeValidationStreamImpl	Lib/IR/Validate.cpp	/^	struct CodeValidationStreamImpl$/;"	s	namespace:WAVM::IR	file:
Command	Include/WAVM/WASTParse/TestScript.h	/^		Command(Type inType, TextFileLocus&& inLocus) : type(inType), locus(inLocus) {}$/;"	f	struct:WAVM::WAST::Command
Command	Include/WAVM/WASTParse/TestScript.h	/^	struct Command$/;"	s	namespace:WAVM::WAST
CommandLineOptions	Programs/wavm-run-wasi/wavm-run-wasi.cpp	/^struct CommandLineOptions$/;"	s	file:
CommandLineOptions	Programs/wavm-run/wavm-run.cpp	/^struct CommandLineOptions$/;"	s	file:
CompactUnwinder_arm64	ThirdParty/libunwind/src/CompactUnwinder.hpp	/^class CompactUnwinder_arm64 {$/;"	c	namespace:libunwind
CompactUnwinder_x86	ThirdParty/libunwind/src/CompactUnwinder.hpp	/^class CompactUnwinder_x86 {$/;"	c	namespace:libunwind
CompactUnwinder_x86_64	ThirdParty/libunwind/src/CompactUnwinder.hpp	/^class CompactUnwinder_x86_64 {$/;"	c	namespace:libunwind
Compartment	Lib/Runtime/Compartment.cpp	/^Runtime::Compartment::Compartment()$/;"	f	class:Runtime::Compartment
Compartment	Lib/Runtime/RuntimePrivate.h	/^	struct Compartment : GCObject$/;"	s	namespace:WAVM::Runtime
CompartmentRuntimeData	Include/WAVM/Runtime/RuntimeData.h	/^	struct CompartmentRuntimeData$/;"	s	namespace:WAVM::Runtime
ConcurrentHashMap	Include/WAVM/Inline/ConcurrentHashMap.h	/^	struct ConcurrentHashMap$/;"	s	namespace:WAVM
Configuration	ThirdParty/libunwind/test/libunwind/test/config.py	/^class Configuration(LibcxxConfiguration):$/;"	c
Context	Lib/Runtime/RuntimePrivate.h	/^		Context(Compartment* inCompartment) : GCObject(ObjectKind::context, inCompartment) {}$/;"	f	struct:WAVM::Runtime::Context
Context	Lib/Runtime/RuntimePrivate.h	/^	struct Context : GCObject$/;"	s	namespace:WAVM::Runtime
ContextAndResult	Test/Benchmarks/invoke-bench.cpp	/^template<typename Result> struct ContextAndResult$/;"	s	file:
ContextRuntimeData	Include/WAVM/Runtime/RuntimeData.h	/^	struct ContextRuntimeData$/;"	s	namespace:WAVM::Runtime
ControlContext	Include/WAVM/Emscripten/gas-visit-context.h	/^    struct ControlContext$/;"	s	struct:GasVisitor
ControlContext	Include/WAVM/Emscripten/insert-imported-context.h	/^    struct ControlContext$/;"	s	struct:ImportFunctionInsertVisitor
ControlContext	Lib/IR/Validate.cpp	/^	struct ControlContext$/;"	s	struct:FunctionValidationContext	file:
ControlContext	Lib/LLVMJIT/EmitFunctionContext.h	/^		struct ControlContext$/;"	s	struct:WAVM::LLVMJIT::EmitFunctionContext
ControlContext	Lib/WASTPrint/Print.cpp	/^	struct ControlContext$/;"	s	struct:FunctionPrintContext	file:
ControlStructureImm	Include/WAVM/IR/Operators.h	/^	struct ControlStructureImm$/;"	s	namespace:WAVM::IR
CreateThreadArgs	Lib/Platform/POSIX/Thread.cpp	/^struct CreateThreadArgs$/;"	s	file:
CreateThreadArgs	Lib/Platform/Windows/Thread.cpp	/^struct CreateThreadArgs : ThreadArgs$/;"	s	file:
CriticalSection	Include/WAVM/Platform/Mutex.h	/^		struct CriticalSection$/;"	s	struct:WAVM::Platform::Mutex
CursorState	Lib/WASTParse/Parse.h	/^		CursorState(const Token* inNextToken,$/;"	f	struct:WAVM::WAST::CursorState
CursorState	Lib/WASTParse/Parse.h	/^	struct CursorState$/;"	s	namespace:WAVM::WAST
DBL_DIG	ThirdParty/dtoa/dtoa.c	/^#define DBL_DIG /;"	d	file:
DBL_MAX	ThirdParty/dtoa/dtoa.c	/^#define DBL_MAX /;"	d	file:
DBL_MAX_10_EXP	ThirdParty/dtoa/dtoa.c	/^#define DBL_MAX_10_EXP /;"	d	file:
DBL_MAX_EXP	ThirdParty/dtoa/dtoa.c	/^#define DBL_MAX_EXP /;"	d	file:
DEBUG_TRAP	Include/WAVM/Platform/Defines.h	/^#define DEBUG_TRAP(/;"	d
DEC	output/CMakeFiles/3.13.2/CompilerIdC/CMakeCCompilerId.c	/^#define DEC(/;"	d	file:
DEC	output/CMakeFiles/3.13.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#define DEC(/;"	d	file:
DECLARE_INTRINSIC_EXCEPTION_TYPE	Include/WAVM/Runtime/Runtime.h	/^#define DECLARE_INTRINSIC_EXCEPTION_TYPE(/;"	d
DECLARE_INTRINSIC_EXCEPTION_TYPE	Include/WAVM/Runtime/Runtime.h	/^#undef DECLARE_INTRINSIC_EXCEPTION_TYPE$/;"	d
DECLARE_INTRINSIC_MODULE	Include/WAVM/Runtime/Intrinsics.h	/^#define DECLARE_INTRINSIC_MODULE(/;"	d
DECLARE_OBJECT_TYPE	Include/WAVM/Runtime/Runtime.h	/^#define DECLARE_OBJECT_TYPE(/;"	d
DEDENT_STRING	Lib/WASTPrint/Print.cpp	/^#define DEDENT_STRING /;"	d	file:
DEFINE_GCOBJECT_TYPE	Lib/Runtime/Runtime.cpp	/^#define DEFINE_GCOBJECT_TYPE(/;"	d	file:
DEFINE_INTRINSIC_EXCEPTION_TYPE	Lib/Runtime/Exception.cpp	/^#define DEFINE_INTRINSIC_EXCEPTION_TYPE(/;"	d	file:
DEFINE_INTRINSIC_EXCEPTION_TYPE	Lib/Runtime/Exception.cpp	/^#undef DEFINE_INTRINSIC_EXCEPTION_TYPE$/;"	d	file:
DEFINE_INTRINSIC_FUNCTION	Include/WAVM/Runtime/Intrinsics.h	/^#define DEFINE_INTRINSIC_FUNCTION(/;"	d
DEFINE_INTRINSIC_FUNCTION	Lib/Emscripten/Emscripten.cpp	/^DEFINE_INTRINSIC_FUNCTION(asm2wasm, "f64-rem", F64, F64_rems, F64 left, F64 right)$/;"	f	class:ioStreamVMHandle	file:
DEFINE_INTRINSIC_FUNCTION	Lib/Emscripten/Emscripten.cpp	/^DEFINE_INTRINSIC_FUNCTION(asm2wasm, "f64-to-int", I32, f64_to_int, F64 f) { return (I32)f; }$/;"	f	class:ioStreamVMHandle	file:
DEFINE_INTRINSIC_FUNCTION	Lib/Emscripten/Emscripten.cpp	/^DEFINE_INTRINSIC_FUNCTION(asm2wasm, "i32s-div", I32, I32_divs, I32 left, I32 right)$/;"	f	class:ioStreamVMHandle	file:
DEFINE_INTRINSIC_FUNCTION	Lib/Emscripten/Emscripten.cpp	/^DEFINE_INTRINSIC_FUNCTION(asm2wasm, "i32s-rem", I32, I32_rems, I32 left, I32 right)$/;"	f	class:ioStreamVMHandle	file:
DEFINE_INTRINSIC_FUNCTION	Lib/Emscripten/Emscripten.cpp	/^DEFINE_INTRINSIC_FUNCTION(asm2wasm, "i32u-div", U32, I32_divu, U32 left, U32 right)$/;"	f	class:ioStreamVMHandle	file:
DEFINE_INTRINSIC_FUNCTION	Lib/Emscripten/Emscripten.cpp	/^DEFINE_INTRINSIC_FUNCTION(asm2wasm, "i32u-rem", U32, I32_remu, U32 left, U32 right)$/;"	f	class:ioStreamVMHandle	file:
DEFINE_INTRINSIC_FUNCTION	Lib/Emscripten/Emscripten.cpp	/^DEFINE_INTRINSIC_FUNCTION(env, "__ZSt18uncaught_exceptionv", I32, __ZSt18uncaught_exceptionv)$/;"	f
DEFINE_INTRINSIC_FUNCTION	Lib/Emscripten/Emscripten.cpp	/^DEFINE_INTRINSIC_FUNCTION(env, "___ctype_b_loc", U32, ___ctype_b_loc)$/;"	f
DEFINE_INTRINSIC_FUNCTION	Lib/Emscripten/Emscripten.cpp	/^DEFINE_INTRINSIC_FUNCTION(env, "___ctype_tolower_loc", U32, ___ctype_tolower_loc)$/;"	f
DEFINE_INTRINSIC_FUNCTION	Lib/Emscripten/Emscripten.cpp	/^DEFINE_INTRINSIC_FUNCTION(env, "___ctype_toupper_loc", U32, ___ctype_toupper_loc)$/;"	f
DEFINE_INTRINSIC_FUNCTION	Lib/Emscripten/Emscripten.cpp	/^DEFINE_INTRINSIC_FUNCTION(env, "___cxa_atexit", I32, ___cxa_atexit, I32 a, I32 b, I32 c)$/;"	f
DEFINE_INTRINSIC_FUNCTION	Lib/Emscripten/Emscripten.cpp	/^DEFINE_INTRINSIC_FUNCTION(env, "___cxa_begin_catch", I32, ___cxa_begin_catch, I32 a)$/;"	f
DEFINE_INTRINSIC_FUNCTION	Lib/Emscripten/Emscripten.cpp	/^DEFINE_INTRINSIC_FUNCTION(env, "___cxa_guard_acquire", I32, ___cxa_guard_acquire, U32 address)$/;"	f
DEFINE_INTRINSIC_FUNCTION	Lib/Emscripten/Emscripten.cpp	/^DEFINE_INTRINSIC_FUNCTION(env, "___cxa_guard_release", void, ___cxa_guard_release, I32 a) {}$/;"	f
DEFINE_INTRINSIC_FUNCTION	Lib/Emscripten/Emscripten.cpp	/^DEFINE_INTRINSIC_FUNCTION(env, "___cxa_throw", void, ___cxa_throw, I32 a, I32 b, I32 c)$/;"	f
DEFINE_INTRINSIC_FUNCTION	Lib/Emscripten/Emscripten.cpp	/^DEFINE_INTRINSIC_FUNCTION(env, "___errno_location", I32, ___errno_location) { return 0; }$/;"	f
DEFINE_INTRINSIC_FUNCTION	Lib/Emscripten/Emscripten.cpp	/^DEFINE_INTRINSIC_FUNCTION(env, "___lock", void, ___lock, I32 a) {}$/;"	f	class:ioStreamVMHandle	file:
DEFINE_INTRINSIC_FUNCTION	Lib/Emscripten/Emscripten.cpp	/^DEFINE_INTRINSIC_FUNCTION(env, "___lockfile", I32, ___lockfile, I32 a) { return 1; }$/;"	f	class:ioStreamVMHandle	file:
DEFINE_INTRINSIC_FUNCTION	Lib/Emscripten/Emscripten.cpp	/^DEFINE_INTRINSIC_FUNCTION(env, "___setErrNo", void, ___seterrno, I32 value)$/;"	f
DEFINE_INTRINSIC_FUNCTION	Lib/Emscripten/Emscripten.cpp	/^DEFINE_INTRINSIC_FUNCTION(env, "___syscall140", I32, ___syscall140, I32 a, I32 b)$/;"	f	class:ioStreamVMHandle	file:
DEFINE_INTRINSIC_FUNCTION	Lib/Emscripten/Emscripten.cpp	/^DEFINE_INTRINSIC_FUNCTION(env, "___syscall145", I32, ___syscall145, I32 file, I32 argsPtr)$/;"	f	class:ioStreamVMHandle	file:
DEFINE_INTRINSIC_FUNCTION	Lib/Emscripten/Emscripten.cpp	/^DEFINE_INTRINSIC_FUNCTION(env, "___syscall146", I32, ___syscall146, I32 file, U32 argsPtr)$/;"	f	class:ioStreamVMHandle	file:
DEFINE_INTRINSIC_FUNCTION	Lib/Emscripten/Emscripten.cpp	/^DEFINE_INTRINSIC_FUNCTION(env, "___syscall54", I32, ___syscall54, I32 a, I32 b)$/;"	f	class:ioStreamVMHandle	file:
DEFINE_INTRINSIC_FUNCTION	Lib/Emscripten/Emscripten.cpp	/^DEFINE_INTRINSIC_FUNCTION(env, "___syscall6", I32, ___syscall6, I32 a, I32 b)$/;"	f	class:ioStreamVMHandle	file:
DEFINE_INTRINSIC_FUNCTION	Lib/Emscripten/Emscripten.cpp	/^DEFINE_INTRINSIC_FUNCTION(env, "___unlock", void, ___unlock, I32 a) {}$/;"	f	class:ioStreamVMHandle	file:
DEFINE_INTRINSIC_FUNCTION	Lib/Emscripten/Emscripten.cpp	/^DEFINE_INTRINSIC_FUNCTION(env, "___unlockfile", void, ___unlockfile, I32 a) {}$/;"	f	class:ioStreamVMHandle	file:
DEFINE_INTRINSIC_FUNCTION	Lib/Emscripten/Emscripten.cpp	/^DEFINE_INTRINSIC_FUNCTION(env, "__builtin_add_gas", void, add_gas, I64 gas)$/;"	f	class:ioStreamVMHandle	file:
DEFINE_INTRINSIC_FUNCTION	Lib/Emscripten/Emscripten.cpp	/^DEFINE_INTRINSIC_FUNCTION(env, "_abort", void, emscripten__abort)$/;"	f
DEFINE_INTRINSIC_FUNCTION	Lib/Emscripten/Emscripten.cpp	/^DEFINE_INTRINSIC_FUNCTION(env, "_call_method", U32, call_method, U32 method_start,$/;"	f	class:ioStreamVMHandle	file:
DEFINE_INTRINSIC_FUNCTION	Lib/Emscripten/Emscripten.cpp	/^DEFINE_INTRINSIC_FUNCTION(env, "_catclose", I32, emscripten__catclose, I32 a) { return 0; }$/;"	f
DEFINE_INTRINSIC_FUNCTION	Lib/Emscripten/Emscripten.cpp	/^DEFINE_INTRINSIC_FUNCTION(env, "_catopen", I32, emscripten__catopen, I32 a, I32 b) { return -1; }$/;"	f
DEFINE_INTRINSIC_FUNCTION	Lib/Emscripten/Emscripten.cpp	/^DEFINE_INTRINSIC_FUNCTION(env, "_emscripten_get_heap_size", U32, _emscripten_get_heap_size)$/;"	f
DEFINE_INTRINSIC_FUNCTION	Lib/Emscripten/Emscripten.cpp	/^DEFINE_INTRINSIC_FUNCTION(env, "_exit", void, emscripten__exit, I32 code)$/;"	f
DEFINE_INTRINSIC_FUNCTION	Lib/Emscripten/Emscripten.cpp	/^DEFINE_INTRINSIC_FUNCTION(env, "_fflush", I32, _fflush, I32 file) { return fflush(vmFile(file)); }$/;"	f	class:ioStreamVMHandle	file:
DEFINE_INTRINSIC_FUNCTION	Lib/Emscripten/Emscripten.cpp	/^DEFINE_INTRINSIC_FUNCTION(env, "_fputc", I32, _fputc, I32 character, I32 file)$/;"	f	class:ioStreamVMHandle	file:
DEFINE_INTRINSIC_FUNCTION	Lib/Emscripten/Emscripten.cpp	/^DEFINE_INTRINSIC_FUNCTION(env, "_freelocale", void, emscripten__freelocale, I32 a) {}$/;"	f
DEFINE_INTRINSIC_FUNCTION	Lib/Emscripten/Emscripten.cpp	/^DEFINE_INTRINSIC_FUNCTION(env, "_getc", I32, _getc, I32 file) { return getc(vmFile(file)); }$/;"	f	class:ioStreamVMHandle	file:
DEFINE_INTRINSIC_FUNCTION	Lib/Emscripten/Emscripten.cpp	/^DEFINE_INTRINSIC_FUNCTION(env, "_newlocale", U32, _newlocale, I32 mask, I32 locale, I32 base)$/;"	f
DEFINE_INTRINSIC_FUNCTION	Lib/Emscripten/Emscripten.cpp	/^DEFINE_INTRINSIC_FUNCTION(env, "_pthread_cleanup_pop", void, _pthread_cleanup_pop, I32 a) {}$/;"	f
DEFINE_INTRINSIC_FUNCTION	Lib/Emscripten/Emscripten.cpp	/^DEFINE_INTRINSIC_FUNCTION(env, "_pthread_cleanup_push", void, _pthread_cleanup_push, I32 a, I32 b)$/;"	f
DEFINE_INTRINSIC_FUNCTION	Lib/Emscripten/Emscripten.cpp	/^DEFINE_INTRINSIC_FUNCTION(env, "_pthread_cond_broadcast", I32, _pthread_cond_broadcast, I32 a)$/;"	f
DEFINE_INTRINSIC_FUNCTION	Lib/Emscripten/Emscripten.cpp	/^DEFINE_INTRINSIC_FUNCTION(env, "_pthread_cond_wait", I32, _pthread_cond_wait, I32 a, I32 b)$/;"	f
DEFINE_INTRINSIC_FUNCTION	Lib/Emscripten/Emscripten.cpp	/^DEFINE_INTRINSIC_FUNCTION(env, "_pthread_equal", I32, _pthread_equal, I32 a, I32 b)$/;"	f
DEFINE_INTRINSIC_FUNCTION	Lib/Emscripten/Emscripten.cpp	/^DEFINE_INTRINSIC_FUNCTION(env, "_pthread_getspecific", I32, _pthread_getspecific, U32 key)$/;"	f
DEFINE_INTRINSIC_FUNCTION	Lib/Emscripten/Emscripten.cpp	/^DEFINE_INTRINSIC_FUNCTION(env, "_pthread_mutex_lock", I32, _pthread_mutex_lock, I32 a) { return 0; }$/;"	f
DEFINE_INTRINSIC_FUNCTION	Lib/Emscripten/Emscripten.cpp	/^DEFINE_INTRINSIC_FUNCTION(env, "_pthread_mutex_unlock", I32, _pthread_mutex_unlock, I32 a)$/;"	f
DEFINE_INTRINSIC_FUNCTION	Lib/Emscripten/Emscripten.cpp	/^DEFINE_INTRINSIC_FUNCTION(env, "_pthread_once", I32, _pthread_once, I32 a, I32 b)$/;"	f
DEFINE_INTRINSIC_FUNCTION	Lib/Emscripten/Emscripten.cpp	/^DEFINE_INTRINSIC_FUNCTION(env, "_pthread_self", I32, _pthread_self) { return 0; }$/;"	f
DEFINE_INTRINSIC_FUNCTION	Lib/Emscripten/Emscripten.cpp	/^DEFINE_INTRINSIC_FUNCTION(env, "_strerror", I32, emscripten__strerror, I32 a)$/;"	f
DEFINE_INTRINSIC_FUNCTION	Lib/Emscripten/Emscripten.cpp	/^DEFINE_INTRINSIC_FUNCTION(env, "_sysconf", I32, _sysconf, I32 a)$/;"	f
DEFINE_INTRINSIC_FUNCTION	Lib/Emscripten/Emscripten.cpp	/^DEFINE_INTRINSIC_FUNCTION(env, "_time", I32, _time, U32 address)$/;"	f
DEFINE_INTRINSIC_FUNCTION	Lib/Emscripten/Emscripten.cpp	/^DEFINE_INTRINSIC_FUNCTION(env, "_ungetc", I32, _ungetc, I32 character, I32 file)$/;"	f	class:ioStreamVMHandle	file:
DEFINE_INTRINSIC_FUNCTION	Lib/Emscripten/Emscripten.cpp	/^DEFINE_INTRINSIC_FUNCTION(env, "_uselocale", I32, _uselocale, I32 locale)$/;"	f
DEFINE_INTRINSIC_FUNCTION	Lib/Emscripten/Emscripten.cpp	/^DEFINE_INTRINSIC_FUNCTION(env, "abort", void, emscripten_abort, I32 code)$/;"	f
DEFINE_INTRINSIC_FUNCTION	Lib/Emscripten/Emscripten.cpp	/^DEFINE_INTRINSIC_FUNCTION(env, "abortStackOverflow", void, abortStackOverflow, I32 size)$/;"	f
DEFINE_INTRINSIC_FUNCTION	Lib/Emscripten/Emscripten.cpp	/^DEFINE_INTRINSIC_FUNCTION(env, "getTotalMemory", U32, getTotalMemory)$/;"	f
DEFINE_INTRINSIC_FUNCTION	Lib/Emscripten/Emscripten.cpp	/^DEFINE_INTRINSIC_FUNCTION(env, "nullFunc_i", void, emscripten_nullFunc_i, I32 code)$/;"	f
DEFINE_INTRINSIC_FUNCTION	Lib/Emscripten/Emscripten.cpp	/^DEFINE_INTRINSIC_FUNCTION(env, "nullFunc_ii", void, emscripten_nullFunc_ii, I32 code)$/;"	f
DEFINE_INTRINSIC_FUNCTION	Lib/Emscripten/Emscripten.cpp	/^DEFINE_INTRINSIC_FUNCTION(env, "nullFunc_iii", void, emscripten_nullFunc_iii, I32 code)$/;"	f
DEFINE_INTRINSIC_FUNCTION	Lib/Emscripten/Emscripten.cpp	/^DEFINE_INTRINSIC_FUNCTION(env, "nullFunc_iiii", void, emscripten_nullFunc_iiii, I32 code)$/;"	f
DEFINE_INTRINSIC_FUNCTION	Lib/Emscripten/Emscripten.cpp	/^DEFINE_INTRINSIC_FUNCTION(env, "nullFunc_iiiii", void, emscripten_nullFunc_iiiii, I32 code)$/;"	f
DEFINE_INTRINSIC_FUNCTION	Lib/Emscripten/Emscripten.cpp	/^DEFINE_INTRINSIC_FUNCTION(env, "nullFunc_iiiiii", void, emscripten_nullFunc_iiiiii, I32 code)$/;"	f
DEFINE_INTRINSIC_FUNCTION	Lib/Emscripten/Emscripten.cpp	/^DEFINE_INTRINSIC_FUNCTION(env, "nullFunc_iiiiiii", void, emscripten_nullFunc_iiiiiii, I32 code)$/;"	f
DEFINE_INTRINSIC_FUNCTION	Lib/Emscripten/Emscripten.cpp	/^DEFINE_INTRINSIC_FUNCTION(env, "nullFunc_v", void, emscripten_nullFunc_v, I32 code)$/;"	f
DEFINE_INTRINSIC_FUNCTION	Lib/Emscripten/Emscripten.cpp	/^DEFINE_INTRINSIC_FUNCTION(env, "nullFunc_vi", void, emscripten_nullFunc_vi, I32 code)$/;"	f
DEFINE_INTRINSIC_FUNCTION	Lib/Emscripten/Emscripten.cpp	/^DEFINE_INTRINSIC_FUNCTION(env, "nullFunc_vii", void, emscripten_nullFunc_vii, I32 code)$/;"	f
DEFINE_INTRINSIC_FUNCTION	Lib/Emscripten/Emscripten.cpp	/^DEFINE_INTRINSIC_FUNCTION(env, "nullFunc_viii", void, emscripten_nullFunc_viii, I32 code)$/;"	f
DEFINE_INTRINSIC_FUNCTION	Lib/Emscripten/Emscripten.cpp	/^DEFINE_INTRINSIC_FUNCTION(env, "nullFunc_viiii", void, emscripten_nullFunc_viiii, I32 code)$/;"	f
DEFINE_INTRINSIC_FUNCTION	Lib/Emscripten/Emscripten.cpp	/^DEFINE_INTRINSIC_FUNCTION(env, "nullFunc_viiiii", void, emscripten_nullFunc_viiiii, I32 code)$/;"	f
DEFINE_INTRINSIC_FUNCTION	Lib/Emscripten/Emscripten.cpp	/^DEFINE_INTRINSIC_FUNCTION(env, "nullFunc_viiiiii", void, emscripten_nullFunc_viiiiii, I32 code)$/;"	f
DEFINE_INTRINSIC_FUNCTION	Lib/Emscripten/Emscripten.cpp	/^DEFINE_INTRINSIC_FUNCTION(env,"_fetch_response", U32, fetch_response, U32 start, U32 size) {$/;"	f	class:ioStreamVMHandle	file:
DEFINE_INTRINSIC_FUNCTION	Lib/Emscripten/Emscripten.cpp	/^DEFINE_INTRINSIC_FUNCTION(env,$/;"	f
DEFINE_INTRINSIC_FUNCTION	Lib/Emscripten/Emscripten.cpp	/^DEFINE_INTRINSIC_FUNCTION(env,$/;"	f	class:ioStreamVMHandle	file:
DEFINE_INTRINSIC_FUNCTION	Lib/Runtime/Atomics.cpp	/^DEFINE_INTRINSIC_FUNCTION(wavmIntrinsics,$/;"	f
DEFINE_INTRINSIC_FUNCTION	Lib/Runtime/Exception.cpp	/^DEFINE_INTRINSIC_FUNCTION(wavmIntrinsics,$/;"	f
DEFINE_INTRINSIC_FUNCTION	Lib/Runtime/Memory.cpp	/^DEFINE_INTRINSIC_FUNCTION(wavmIntrinsics, "memory.size", U32, memory_size, I64 memoryId)$/;"	f
DEFINE_INTRINSIC_FUNCTION	Lib/Runtime/Memory.cpp	/^DEFINE_INTRINSIC_FUNCTION(wavmIntrinsics,$/;"	f
DEFINE_INTRINSIC_FUNCTION	Lib/Runtime/Table.cpp	/^DEFINE_INTRINSIC_FUNCTION(wavmIntrinsics, "table.get", Object*, table_get, U32 index, Uptr tableId)$/;"	f
DEFINE_INTRINSIC_FUNCTION	Lib/Runtime/Table.cpp	/^DEFINE_INTRINSIC_FUNCTION(wavmIntrinsics, "table.size", U32, table_size, Uptr tableId)$/;"	f
DEFINE_INTRINSIC_FUNCTION	Lib/Runtime/Table.cpp	/^DEFINE_INTRINSIC_FUNCTION(wavmIntrinsics,$/;"	f
DEFINE_INTRINSIC_FUNCTION	Lib/Runtime/WAVMIntrinsics.cpp	/^DEFINE_INTRINSIC_FUNCTION(wavmIntrinsics, "debugBreak", void, debugBreak)$/;"	f
DEFINE_INTRINSIC_FUNCTION	Lib/Runtime/WAVMIntrinsics.cpp	/^DEFINE_INTRINSIC_FUNCTION(wavmIntrinsics, "f32.ceil", F32, f32Ceil, F32 value)$/;"	f
DEFINE_INTRINSIC_FUNCTION	Lib/Runtime/WAVMIntrinsics.cpp	/^DEFINE_INTRINSIC_FUNCTION(wavmIntrinsics, "f32.floor", F32, f32Floor, F32 value)$/;"	f
DEFINE_INTRINSIC_FUNCTION	Lib/Runtime/WAVMIntrinsics.cpp	/^DEFINE_INTRINSIC_FUNCTION(wavmIntrinsics, "f32.nearest", F32, f32Nearest, F32 value)$/;"	f
DEFINE_INTRINSIC_FUNCTION	Lib/Runtime/WAVMIntrinsics.cpp	/^DEFINE_INTRINSIC_FUNCTION(wavmIntrinsics, "f32.trunc", F32, f32Trunc, F32 value)$/;"	f
DEFINE_INTRINSIC_FUNCTION	Lib/Runtime/WAVMIntrinsics.cpp	/^DEFINE_INTRINSIC_FUNCTION(wavmIntrinsics, "f64.ceil", F64, f64Ceil, F64 value)$/;"	f
DEFINE_INTRINSIC_FUNCTION	Lib/Runtime/WAVMIntrinsics.cpp	/^DEFINE_INTRINSIC_FUNCTION(wavmIntrinsics, "f64.floor", F64, f64Floor, F64 value)$/;"	f
DEFINE_INTRINSIC_FUNCTION	Lib/Runtime/WAVMIntrinsics.cpp	/^DEFINE_INTRINSIC_FUNCTION(wavmIntrinsics, "f64.nearest", F64, f64Nearest, F64 value)$/;"	f
DEFINE_INTRINSIC_FUNCTION	Lib/Runtime/WAVMIntrinsics.cpp	/^DEFINE_INTRINSIC_FUNCTION(wavmIntrinsics, "f64.trunc", F64, f64Trunc, F64 value)$/;"	f
DEFINE_INTRINSIC_FUNCTION	Lib/Runtime/WAVMIntrinsics.cpp	/^DEFINE_INTRINSIC_FUNCTION(wavmIntrinsics, "unreachableTrap", void, unreachableTrap)$/;"	f
DEFINE_INTRINSIC_FUNCTION	Lib/Runtime/WAVMIntrinsics.cpp	/^DEFINE_INTRINSIC_FUNCTION(wavmIntrinsics,$/;"	f
DEFINE_INTRINSIC_FUNCTION	Lib/ThreadTest/ThreadTest.cpp	/^DEFINE_INTRINSIC_FUNCTION(threadTest, "detachThread", void, detachThread, U64 threadId)$/;"	f
DEFINE_INTRINSIC_FUNCTION	Lib/ThreadTest/ThreadTest.cpp	/^DEFINE_INTRINSIC_FUNCTION(threadTest, "exitThread", void, exitThread, I64 code)$/;"	f
DEFINE_INTRINSIC_FUNCTION	Lib/ThreadTest/ThreadTest.cpp	/^DEFINE_INTRINSIC_FUNCTION(threadTest, "joinThread", I64, joinThread, U64 threadId)$/;"	f
DEFINE_INTRINSIC_FUNCTION	Lib/ThreadTest/ThreadTest.cpp	/^DEFINE_INTRINSIC_FUNCTION(threadTest,$/;"	f
DEFINE_INTRINSIC_FUNCTION	Lib/WASI/WASI.cpp	/^DEFINE_INTRINSIC_FUNCTION(wasi, "fd_close", __wasi_errno_t, wasi_fd_close, __wasi_fd_t fd)$/;"	f
DEFINE_INTRINSIC_FUNCTION	Lib/WASI/WASI.cpp	/^DEFINE_INTRINSIC_FUNCTION(wasi, "fd_datasync", __wasi_errno_t, wasi_fd_datasync, __wasi_fd_t fd)$/;"	f
DEFINE_INTRINSIC_FUNCTION	Lib/WASI/WASI.cpp	/^DEFINE_INTRINSIC_FUNCTION(wasi, "fd_sync", __wasi_errno_t, wasi_fd_sync, __wasi_fd_t fd)$/;"	f
DEFINE_INTRINSIC_FUNCTION	Lib/WASI/WASI.cpp	/^DEFINE_INTRINSIC_FUNCTION(wasi, "proc_exit", void, wasi_proc_exit, __wasi_exitcode_t exitCode)$/;"	f
DEFINE_INTRINSIC_FUNCTION	Lib/WASI/WASI.cpp	/^DEFINE_INTRINSIC_FUNCTION(wasi, "proc_raise", __wasi_errno_t, wasi_proc_raise, __wasi_signal_t sig)$/;"	f
DEFINE_INTRINSIC_FUNCTION	Lib/WASI/WASI.cpp	/^DEFINE_INTRINSIC_FUNCTION(wasi, "sched_yield", __wasi_errno_t, wasi_sched_yield)$/;"	f
DEFINE_INTRINSIC_FUNCTION	Lib/WASI/WASI.cpp	/^DEFINE_INTRINSIC_FUNCTION(wasi,$/;"	f
DEFINE_INTRINSIC_FUNCTION	Test/RunTestScript/RunTestScript.cpp	/^DEFINE_INTRINSIC_FUNCTION(spectest, "print", void, spectest_print) {}$/;"	f
DEFINE_INTRINSIC_FUNCTION	Test/RunTestScript/RunTestScript.cpp	/^DEFINE_INTRINSIC_FUNCTION(spectest, "print_f32", void, spectest_print_f32, F32 a)$/;"	f
DEFINE_INTRINSIC_FUNCTION	Test/RunTestScript/RunTestScript.cpp	/^DEFINE_INTRINSIC_FUNCTION(spectest, "print_f64", void, spectest_print_f64, F64 a)$/;"	f
DEFINE_INTRINSIC_FUNCTION	Test/RunTestScript/RunTestScript.cpp	/^DEFINE_INTRINSIC_FUNCTION(spectest, "print_f64_f64", void, spectest_print_f64_f64, F64 a, F64 b)$/;"	f
DEFINE_INTRINSIC_FUNCTION	Test/RunTestScript/RunTestScript.cpp	/^DEFINE_INTRINSIC_FUNCTION(spectest, "print_i32", void, spectest_print_i32, I32 a)$/;"	f
DEFINE_INTRINSIC_FUNCTION	Test/RunTestScript/RunTestScript.cpp	/^DEFINE_INTRINSIC_FUNCTION(spectest, "print_i32_f32", void, spectest_print_i32_f32, I32 a, F32 b)$/;"	f
DEFINE_INTRINSIC_FUNCTION	Test/RunTestScript/RunTestScript.cpp	/^DEFINE_INTRINSIC_FUNCTION(spectest, "print_i64", void, spectest_print_i64, I64 a)$/;"	f
DEFINE_INTRINSIC_FUNCTION	Test/RunTestScript/RunTestScript.cpp	/^DEFINE_INTRINSIC_FUNCTION(spectest, "print_i64_f64", void, spectest_print_i64_f64, I64 a, F64 b)$/;"	f
DEFINE_INTRINSIC_FUNCTION_WITH_CONTEXT_SWITCH	Include/WAVM/Runtime/Intrinsics.h	/^#define DEFINE_INTRINSIC_FUNCTION_WITH_CONTEXT_SWITCH(/;"	d
DEFINE_INTRINSIC_FUNCTION_WITH_CONTEXT_SWITCH	Lib/ThreadTest/ThreadTest.cpp	/^DEFINE_INTRINSIC_FUNCTION_WITH_CONTEXT_SWITCH(threadTest, "forkThread", I64, forkThread)$/;"	f
DEFINE_INTRINSIC_GLOBAL	Include/WAVM/Runtime/Intrinsics.h	/^#define DEFINE_INTRINSIC_GLOBAL(/;"	d
DEFINE_INTRINSIC_MEMORY	Include/WAVM/Runtime/Intrinsics.h	/^#define DEFINE_INTRINSIC_MEMORY(/;"	d
DEFINE_INTRINSIC_MODULE	Include/WAVM/Runtime/Intrinsics.h	/^#define DEFINE_INTRINSIC_MODULE(/;"	d
DEFINE_INTRINSIC_TABLE	Include/WAVM/Runtime/Intrinsics.h	/^#define DEFINE_INTRINSIC_TABLE(/;"	d
DEFINE_LIBUNWIND_FUNCTION	ThirdParty/libunwind/src/assembly.h	/^#define DEFINE_LIBUNWIND_FUNCTION(/;"	d
DEFINE_LIBUNWIND_PRIVATE_FUNCTION	ThirdParty/libunwind/src/assembly.h	/^#define DEFINE_LIBUNWIND_PRIVATE_FUNCTION(/;"	d
DEFINE_OBJECT_TYPE	Lib/Runtime/Runtime.cpp	/^#define DEFINE_OBJECT_TYPE(/;"	d	file:
DFAState	Lib/NFA/NFA.cpp	/^	DFAState()$/;"	f	struct:DFAState
DFAState	Lib/NFA/NFA.cpp	/^struct DFAState$/;"	s	file:
DUMP_DFA_GRAPH	Lib/WASTParse/Lexer.cpp	/^#define DUMP_DFA_GRAPH /;"	d	file:
DUMP_NFA_GRAPH	Lib/WASTParse/Lexer.cpp	/^#define DUMP_NFA_GRAPH /;"	d	file:
DUMP_OBJECT	Lib/LLVMJIT/LLVMCompile.cpp	/^#define DUMP_OBJECT /;"	d	file:
DUMP_OPTIMIZED_MODULE	Lib/LLVMJIT/LLVMCompile.cpp	/^#define DUMP_OPTIMIZED_MODULE /;"	d	file:
DUMP_UNOPTIMIZED_MODULE	Lib/LLVMJIT/LLVMCompile.cpp	/^#define DUMP_UNOPTIMIZED_MODULE /;"	d	file:
DW_CFA_GNU_args_size	ThirdParty/libunwind/src/dwarf2.h	/^  DW_CFA_GNU_args_size                = 0x2E,$/;"	e	enum:__anon83
DW_CFA_GNU_negative_offset_extended	ThirdParty/libunwind/src/dwarf2.h	/^  DW_CFA_GNU_negative_offset_extended = 0x2F$/;"	e	enum:__anon83
DW_CFA_GNU_window_save	ThirdParty/libunwind/src/dwarf2.h	/^  DW_CFA_GNU_window_save              = 0x2D,$/;"	e	enum:__anon83
DW_CFA_advance_loc	ThirdParty/libunwind/src/dwarf2.h	/^  DW_CFA_advance_loc        = 0x40, \/\/ high 2 bits are 0x1, lower 6 bits are delta$/;"	e	enum:__anon83
DW_CFA_advance_loc1	ThirdParty/libunwind/src/dwarf2.h	/^  DW_CFA_advance_loc1        = 0x2,$/;"	e	enum:__anon83
DW_CFA_advance_loc2	ThirdParty/libunwind/src/dwarf2.h	/^  DW_CFA_advance_loc2        = 0x3,$/;"	e	enum:__anon83
DW_CFA_advance_loc4	ThirdParty/libunwind/src/dwarf2.h	/^  DW_CFA_advance_loc4        = 0x4,$/;"	e	enum:__anon83
DW_CFA_def_cfa	ThirdParty/libunwind/src/dwarf2.h	/^  DW_CFA_def_cfa             = 0xC,$/;"	e	enum:__anon83
DW_CFA_def_cfa_expression	ThirdParty/libunwind/src/dwarf2.h	/^  DW_CFA_def_cfa_expression  = 0xF,$/;"	e	enum:__anon83
DW_CFA_def_cfa_offset	ThirdParty/libunwind/src/dwarf2.h	/^  DW_CFA_def_cfa_offset      = 0xE,$/;"	e	enum:__anon83
DW_CFA_def_cfa_offset_sf	ThirdParty/libunwind/src/dwarf2.h	/^  DW_CFA_def_cfa_offset_sf  = 0x13,$/;"	e	enum:__anon83
DW_CFA_def_cfa_register	ThirdParty/libunwind/src/dwarf2.h	/^  DW_CFA_def_cfa_register    = 0xD,$/;"	e	enum:__anon83
DW_CFA_def_cfa_sf	ThirdParty/libunwind/src/dwarf2.h	/^  DW_CFA_def_cfa_sf         = 0x12,$/;"	e	enum:__anon83
DW_CFA_expression	ThirdParty/libunwind/src/dwarf2.h	/^  DW_CFA_expression         = 0x10,$/;"	e	enum:__anon83
DW_CFA_nop	ThirdParty/libunwind/src/dwarf2.h	/^  DW_CFA_nop                 = 0x0,$/;"	e	enum:__anon83
DW_CFA_offset	ThirdParty/libunwind/src/dwarf2.h	/^  DW_CFA_offset             = 0x80, \/\/ high 2 bits are 0x2, lower 6 bits are register$/;"	e	enum:__anon83
DW_CFA_offset_extended	ThirdParty/libunwind/src/dwarf2.h	/^  DW_CFA_offset_extended     = 0x5,$/;"	e	enum:__anon83
DW_CFA_offset_extended_sf	ThirdParty/libunwind/src/dwarf2.h	/^  DW_CFA_offset_extended_sf = 0x11,$/;"	e	enum:__anon83
DW_CFA_register	ThirdParty/libunwind/src/dwarf2.h	/^  DW_CFA_register            = 0x9,$/;"	e	enum:__anon83
DW_CFA_remember_state	ThirdParty/libunwind/src/dwarf2.h	/^  DW_CFA_remember_state      = 0xA,$/;"	e	enum:__anon83
DW_CFA_restore	ThirdParty/libunwind/src/dwarf2.h	/^  DW_CFA_restore            = 0xC0, \/\/ high 2 bits are 0x3, lower 6 bits are register$/;"	e	enum:__anon83
DW_CFA_restore_extended	ThirdParty/libunwind/src/dwarf2.h	/^  DW_CFA_restore_extended    = 0x6,$/;"	e	enum:__anon83
DW_CFA_restore_state	ThirdParty/libunwind/src/dwarf2.h	/^  DW_CFA_restore_state       = 0xB,$/;"	e	enum:__anon83
DW_CFA_same_value	ThirdParty/libunwind/src/dwarf2.h	/^  DW_CFA_same_value          = 0x8,$/;"	e	enum:__anon83
DW_CFA_set_loc	ThirdParty/libunwind/src/dwarf2.h	/^  DW_CFA_set_loc             = 0x1,$/;"	e	enum:__anon83
DW_CFA_undefined	ThirdParty/libunwind/src/dwarf2.h	/^  DW_CFA_undefined           = 0x7,$/;"	e	enum:__anon83
DW_CFA_val_expression	ThirdParty/libunwind/src/dwarf2.h	/^  DW_CFA_val_expression     = 0x16,$/;"	e	enum:__anon83
DW_CFA_val_offset	ThirdParty/libunwind/src/dwarf2.h	/^  DW_CFA_val_offset         = 0x14,$/;"	e	enum:__anon83
DW_CFA_val_offset_sf	ThirdParty/libunwind/src/dwarf2.h	/^  DW_CFA_val_offset_sf      = 0x15,$/;"	e	enum:__anon83
DW_EH_PE_absptr	ThirdParty/libunwind/src/dwarf2.h	/^  DW_EH_PE_absptr    = 0x00,$/;"	e	enum:__anon84
DW_EH_PE_aligned	ThirdParty/libunwind/src/dwarf2.h	/^  DW_EH_PE_aligned   = 0x50,$/;"	e	enum:__anon84
DW_EH_PE_datarel	ThirdParty/libunwind/src/dwarf2.h	/^  DW_EH_PE_datarel   = 0x30,$/;"	e	enum:__anon84
DW_EH_PE_funcrel	ThirdParty/libunwind/src/dwarf2.h	/^  DW_EH_PE_funcrel   = 0x40,$/;"	e	enum:__anon84
DW_EH_PE_indirect	ThirdParty/libunwind/src/dwarf2.h	/^  DW_EH_PE_indirect  = 0x80,$/;"	e	enum:__anon84
DW_EH_PE_omit	ThirdParty/libunwind/src/dwarf2.h	/^  DW_EH_PE_omit      = 0xFF$/;"	e	enum:__anon84
DW_EH_PE_pcrel	ThirdParty/libunwind/src/dwarf2.h	/^  DW_EH_PE_pcrel     = 0x10,$/;"	e	enum:__anon84
DW_EH_PE_ptr	ThirdParty/libunwind/src/dwarf2.h	/^  DW_EH_PE_ptr       = 0x00,$/;"	e	enum:__anon84
DW_EH_PE_sdata2	ThirdParty/libunwind/src/dwarf2.h	/^  DW_EH_PE_sdata2    = 0x0A,$/;"	e	enum:__anon84
DW_EH_PE_sdata4	ThirdParty/libunwind/src/dwarf2.h	/^  DW_EH_PE_sdata4    = 0x0B,$/;"	e	enum:__anon84
DW_EH_PE_sdata8	ThirdParty/libunwind/src/dwarf2.h	/^  DW_EH_PE_sdata8    = 0x0C,$/;"	e	enum:__anon84
DW_EH_PE_signed	ThirdParty/libunwind/src/dwarf2.h	/^  DW_EH_PE_signed    = 0x08,$/;"	e	enum:__anon84
DW_EH_PE_sleb128	ThirdParty/libunwind/src/dwarf2.h	/^  DW_EH_PE_sleb128   = 0x09,$/;"	e	enum:__anon84
DW_EH_PE_textrel	ThirdParty/libunwind/src/dwarf2.h	/^  DW_EH_PE_textrel   = 0x20,$/;"	e	enum:__anon84
DW_EH_PE_udata2	ThirdParty/libunwind/src/dwarf2.h	/^  DW_EH_PE_udata2    = 0x02,$/;"	e	enum:__anon84
DW_EH_PE_udata4	ThirdParty/libunwind/src/dwarf2.h	/^  DW_EH_PE_udata4    = 0x03,$/;"	e	enum:__anon84
DW_EH_PE_udata8	ThirdParty/libunwind/src/dwarf2.h	/^  DW_EH_PE_udata8    = 0x04,$/;"	e	enum:__anon84
DW_EH_PE_uleb128	ThirdParty/libunwind/src/dwarf2.h	/^  DW_EH_PE_uleb128   = 0x01,$/;"	e	enum:__anon84
DW_OP_APPLE_uninit	ThirdParty/libunwind/src/dwarf2.h	/^  DW_OP_APPLE_uninit       = 0xF0,$/;"	e	enum:__anon85
DW_OP_abs	ThirdParty/libunwind/src/dwarf2.h	/^  DW_OP_abs                = 0x19,$/;"	e	enum:__anon85
DW_OP_addr	ThirdParty/libunwind/src/dwarf2.h	/^  DW_OP_addr               = 0x03, \/\/ constant address (size target specific)$/;"	e	enum:__anon85
DW_OP_and	ThirdParty/libunwind/src/dwarf2.h	/^  DW_OP_and                = 0x1A,$/;"	e	enum:__anon85
DW_OP_bra	ThirdParty/libunwind/src/dwarf2.h	/^  DW_OP_bra                = 0x28, \/\/ signed 2-byte constant$/;"	e	enum:__anon85
DW_OP_breg0	ThirdParty/libunwind/src/dwarf2.h	/^  DW_OP_breg0              = 0x70, \/\/ base register 0 + SLEB128 offset$/;"	e	enum:__anon85
DW_OP_breg1	ThirdParty/libunwind/src/dwarf2.h	/^  DW_OP_breg1              = 0x71, \/\/ base register 1 + SLEB128 offset$/;"	e	enum:__anon85
DW_OP_breg10	ThirdParty/libunwind/src/dwarf2.h	/^  DW_OP_breg10             = 0x7A, \/\/ base register 10 + SLEB128 offset$/;"	e	enum:__anon85
DW_OP_breg11	ThirdParty/libunwind/src/dwarf2.h	/^  DW_OP_breg11             = 0x7B, \/\/ base register 11 + SLEB128 offset$/;"	e	enum:__anon85
DW_OP_breg12	ThirdParty/libunwind/src/dwarf2.h	/^  DW_OP_breg12             = 0x7C, \/\/ base register 12 + SLEB128 offset$/;"	e	enum:__anon85
DW_OP_breg13	ThirdParty/libunwind/src/dwarf2.h	/^  DW_OP_breg13             = 0x7D, \/\/ base register 13 + SLEB128 offset$/;"	e	enum:__anon85
DW_OP_breg14	ThirdParty/libunwind/src/dwarf2.h	/^  DW_OP_breg14             = 0x7E, \/\/ base register 14 + SLEB128 offset$/;"	e	enum:__anon85
DW_OP_breg15	ThirdParty/libunwind/src/dwarf2.h	/^  DW_OP_breg15             = 0x7F, \/\/ base register 15 + SLEB128 offset$/;"	e	enum:__anon85
DW_OP_breg16	ThirdParty/libunwind/src/dwarf2.h	/^  DW_OP_breg16             = 0x80, \/\/ base register 16 + SLEB128 offset$/;"	e	enum:__anon85
DW_OP_breg17	ThirdParty/libunwind/src/dwarf2.h	/^  DW_OP_breg17             = 0x81, \/\/ base register 17 + SLEB128 offset$/;"	e	enum:__anon85
DW_OP_breg18	ThirdParty/libunwind/src/dwarf2.h	/^  DW_OP_breg18             = 0x82, \/\/ base register 18 + SLEB128 offset$/;"	e	enum:__anon85
DW_OP_breg19	ThirdParty/libunwind/src/dwarf2.h	/^  DW_OP_breg19             = 0x83, \/\/ base register 19 + SLEB128 offset$/;"	e	enum:__anon85
DW_OP_breg2	ThirdParty/libunwind/src/dwarf2.h	/^  DW_OP_breg2              = 0x72, \/\/ base register 2 + SLEB128 offset$/;"	e	enum:__anon85
DW_OP_breg20	ThirdParty/libunwind/src/dwarf2.h	/^  DW_OP_breg20             = 0x84, \/\/ base register 20 + SLEB128 offset$/;"	e	enum:__anon85
DW_OP_breg21	ThirdParty/libunwind/src/dwarf2.h	/^  DW_OP_breg21             = 0x85, \/\/ base register 21 + SLEB128 offset$/;"	e	enum:__anon85
DW_OP_breg22	ThirdParty/libunwind/src/dwarf2.h	/^  DW_OP_breg22             = 0x86, \/\/ base register 22 + SLEB128 offset$/;"	e	enum:__anon85
DW_OP_breg23	ThirdParty/libunwind/src/dwarf2.h	/^  DW_OP_breg23             = 0x87, \/\/ base register 23 + SLEB128 offset$/;"	e	enum:__anon85
DW_OP_breg24	ThirdParty/libunwind/src/dwarf2.h	/^  DW_OP_breg24             = 0x88, \/\/ base register 24 + SLEB128 offset$/;"	e	enum:__anon85
DW_OP_breg25	ThirdParty/libunwind/src/dwarf2.h	/^  DW_OP_breg25             = 0x89, \/\/ base register 25 + SLEB128 offset$/;"	e	enum:__anon85
DW_OP_breg26	ThirdParty/libunwind/src/dwarf2.h	/^  DW_OP_breg26             = 0x8A, \/\/ base register 26 + SLEB128 offset$/;"	e	enum:__anon85
DW_OP_breg27	ThirdParty/libunwind/src/dwarf2.h	/^  DW_OP_breg27             = 0x8B, \/\/ base register 27 + SLEB128 offset$/;"	e	enum:__anon85
DW_OP_breg28	ThirdParty/libunwind/src/dwarf2.h	/^  DW_OP_breg28             = 0x8C, \/\/ base register 28 + SLEB128 offset$/;"	e	enum:__anon85
DW_OP_breg29	ThirdParty/libunwind/src/dwarf2.h	/^  DW_OP_breg29             = 0x8D, \/\/ base register 29 + SLEB128 offset$/;"	e	enum:__anon85
DW_OP_breg3	ThirdParty/libunwind/src/dwarf2.h	/^  DW_OP_breg3              = 0x73, \/\/ base register 3 + SLEB128 offset$/;"	e	enum:__anon85
DW_OP_breg30	ThirdParty/libunwind/src/dwarf2.h	/^  DW_OP_breg30             = 0x8E, \/\/ base register 30 + SLEB128 offset$/;"	e	enum:__anon85
DW_OP_breg31	ThirdParty/libunwind/src/dwarf2.h	/^  DW_OP_breg31             = 0x8F, \/\/ base register 31 + SLEB128 offset$/;"	e	enum:__anon85
DW_OP_breg4	ThirdParty/libunwind/src/dwarf2.h	/^  DW_OP_breg4              = 0x74, \/\/ base register 4 + SLEB128 offset$/;"	e	enum:__anon85
DW_OP_breg5	ThirdParty/libunwind/src/dwarf2.h	/^  DW_OP_breg5              = 0x75, \/\/ base register 5 + SLEB128 offset$/;"	e	enum:__anon85
DW_OP_breg6	ThirdParty/libunwind/src/dwarf2.h	/^  DW_OP_breg6              = 0x76, \/\/ base register 6 + SLEB128 offset$/;"	e	enum:__anon85
DW_OP_breg7	ThirdParty/libunwind/src/dwarf2.h	/^  DW_OP_breg7              = 0x77, \/\/ base register 7 + SLEB128 offset$/;"	e	enum:__anon85
DW_OP_breg8	ThirdParty/libunwind/src/dwarf2.h	/^  DW_OP_breg8              = 0x78, \/\/ base register 8 + SLEB128 offset$/;"	e	enum:__anon85
DW_OP_breg9	ThirdParty/libunwind/src/dwarf2.h	/^  DW_OP_breg9              = 0x79, \/\/ base register 9 + SLEB128 offset$/;"	e	enum:__anon85
DW_OP_bregx	ThirdParty/libunwind/src/dwarf2.h	/^  DW_OP_bregx              = 0x92, \/\/ ULEB128 register followed by SLEB128 offset$/;"	e	enum:__anon85
DW_OP_call2	ThirdParty/libunwind/src/dwarf2.h	/^  DW_OP_call2              = 0x98, \/\/ 2-byte offset of DIE$/;"	e	enum:__anon85
DW_OP_call4	ThirdParty/libunwind/src/dwarf2.h	/^  DW_OP_call4              = 0x99, \/\/ 4-byte offset of DIE$/;"	e	enum:__anon85
DW_OP_call_ref	ThirdParty/libunwind/src/dwarf2.h	/^  DW_OP_call_ref           = 0x9A, \/\/ 4- or 8-byte offset of DIE$/;"	e	enum:__anon85
DW_OP_const1s	ThirdParty/libunwind/src/dwarf2.h	/^  DW_OP_const1s            = 0x09, \/\/ 1-byte constant$/;"	e	enum:__anon85
DW_OP_const1u	ThirdParty/libunwind/src/dwarf2.h	/^  DW_OP_const1u            = 0x08, \/\/ 1-byte constant$/;"	e	enum:__anon85
DW_OP_const2s	ThirdParty/libunwind/src/dwarf2.h	/^  DW_OP_const2s            = 0x0B, \/\/ 2-byte constant$/;"	e	enum:__anon85
DW_OP_const2u	ThirdParty/libunwind/src/dwarf2.h	/^  DW_OP_const2u            = 0x0A, \/\/ 2-byte constant$/;"	e	enum:__anon85
DW_OP_const4s	ThirdParty/libunwind/src/dwarf2.h	/^  DW_OP_const4s            = 0x0D, \/\/ 4-byte constant$/;"	e	enum:__anon85
DW_OP_const4u	ThirdParty/libunwind/src/dwarf2.h	/^  DW_OP_const4u            = 0x0C, \/\/ 4-byte constant$/;"	e	enum:__anon85
DW_OP_const8s	ThirdParty/libunwind/src/dwarf2.h	/^  DW_OP_const8s            = 0x0F, \/\/ 8-byte constant$/;"	e	enum:__anon85
DW_OP_const8u	ThirdParty/libunwind/src/dwarf2.h	/^  DW_OP_const8u            = 0x0E, \/\/ 8-byte constant$/;"	e	enum:__anon85
DW_OP_consts	ThirdParty/libunwind/src/dwarf2.h	/^  DW_OP_consts             = 0x11, \/\/ SLEB128 constant$/;"	e	enum:__anon85
DW_OP_constu	ThirdParty/libunwind/src/dwarf2.h	/^  DW_OP_constu             = 0x10, \/\/ ULEB128 constant$/;"	e	enum:__anon85
DW_OP_deref	Lib/Platform/POSIX/POSIX.S	/^#define DW_OP_deref .cfi_escape 0x06;$/;"	d
DW_OP_deref	ThirdParty/libunwind/src/dwarf2.h	/^  DW_OP_deref              = 0x06,$/;"	e	enum:__anon85
DW_OP_deref_size	ThirdParty/libunwind/src/dwarf2.h	/^  DW_OP_deref_size         = 0x94, \/\/ 1-byte size of data retrieved$/;"	e	enum:__anon85
DW_OP_div	ThirdParty/libunwind/src/dwarf2.h	/^  DW_OP_div                = 0x1B,$/;"	e	enum:__anon85
DW_OP_drop	ThirdParty/libunwind/src/dwarf2.h	/^  DW_OP_drop               = 0x13,$/;"	e	enum:__anon85
DW_OP_dup	ThirdParty/libunwind/src/dwarf2.h	/^  DW_OP_dup                = 0x12,$/;"	e	enum:__anon85
DW_OP_eq	ThirdParty/libunwind/src/dwarf2.h	/^  DW_OP_eq                 = 0x29,$/;"	e	enum:__anon85
DW_OP_fbreg	ThirdParty/libunwind/src/dwarf2.h	/^  DW_OP_fbreg              = 0x91, \/\/ SLEB128 offset$/;"	e	enum:__anon85
DW_OP_ge	ThirdParty/libunwind/src/dwarf2.h	/^  DW_OP_ge                 = 0x2A,$/;"	e	enum:__anon85
DW_OP_gt	ThirdParty/libunwind/src/dwarf2.h	/^  DW_OP_gt                 = 0x2B,$/;"	e	enum:__anon85
DW_OP_hi_user	ThirdParty/libunwind/src/dwarf2.h	/^  DW_OP_hi_user            = 0xFF$/;"	e	enum:__anon85
DW_OP_le	ThirdParty/libunwind/src/dwarf2.h	/^  DW_OP_le                 = 0x2C,$/;"	e	enum:__anon85
DW_OP_lit0	ThirdParty/libunwind/src/dwarf2.h	/^  DW_OP_lit0               = 0x30, \/\/ Literal 0$/;"	e	enum:__anon85
DW_OP_lit1	ThirdParty/libunwind/src/dwarf2.h	/^  DW_OP_lit1               = 0x31, \/\/ Literal 1$/;"	e	enum:__anon85
DW_OP_lit10	ThirdParty/libunwind/src/dwarf2.h	/^  DW_OP_lit10              = 0x3A, \/\/ Literal 10$/;"	e	enum:__anon85
DW_OP_lit11	ThirdParty/libunwind/src/dwarf2.h	/^  DW_OP_lit11              = 0x3B, \/\/ Literal 11$/;"	e	enum:__anon85
DW_OP_lit12	ThirdParty/libunwind/src/dwarf2.h	/^  DW_OP_lit12              = 0x3C, \/\/ Literal 12$/;"	e	enum:__anon85
DW_OP_lit13	ThirdParty/libunwind/src/dwarf2.h	/^  DW_OP_lit13              = 0x3D, \/\/ Literal 13$/;"	e	enum:__anon85
DW_OP_lit14	ThirdParty/libunwind/src/dwarf2.h	/^  DW_OP_lit14              = 0x3E, \/\/ Literal 14$/;"	e	enum:__anon85
DW_OP_lit15	ThirdParty/libunwind/src/dwarf2.h	/^  DW_OP_lit15              = 0x3F, \/\/ Literal 15$/;"	e	enum:__anon85
DW_OP_lit16	ThirdParty/libunwind/src/dwarf2.h	/^  DW_OP_lit16              = 0x40, \/\/ Literal 16$/;"	e	enum:__anon85
DW_OP_lit17	ThirdParty/libunwind/src/dwarf2.h	/^  DW_OP_lit17              = 0x41, \/\/ Literal 17$/;"	e	enum:__anon85
DW_OP_lit18	ThirdParty/libunwind/src/dwarf2.h	/^  DW_OP_lit18              = 0x42, \/\/ Literal 18$/;"	e	enum:__anon85
DW_OP_lit19	ThirdParty/libunwind/src/dwarf2.h	/^  DW_OP_lit19              = 0x43, \/\/ Literal 19$/;"	e	enum:__anon85
DW_OP_lit2	ThirdParty/libunwind/src/dwarf2.h	/^  DW_OP_lit2               = 0x32, \/\/ Literal 2$/;"	e	enum:__anon85
DW_OP_lit20	ThirdParty/libunwind/src/dwarf2.h	/^  DW_OP_lit20              = 0x44, \/\/ Literal 20$/;"	e	enum:__anon85
DW_OP_lit21	ThirdParty/libunwind/src/dwarf2.h	/^  DW_OP_lit21              = 0x45, \/\/ Literal 21$/;"	e	enum:__anon85
DW_OP_lit22	ThirdParty/libunwind/src/dwarf2.h	/^  DW_OP_lit22              = 0x46, \/\/ Literal 22$/;"	e	enum:__anon85
DW_OP_lit23	ThirdParty/libunwind/src/dwarf2.h	/^  DW_OP_lit23              = 0x47, \/\/ Literal 23$/;"	e	enum:__anon85
DW_OP_lit24	ThirdParty/libunwind/src/dwarf2.h	/^  DW_OP_lit24              = 0x48, \/\/ Literal 24$/;"	e	enum:__anon85
DW_OP_lit25	ThirdParty/libunwind/src/dwarf2.h	/^  DW_OP_lit25              = 0x49, \/\/ Literal 25$/;"	e	enum:__anon85
DW_OP_lit26	ThirdParty/libunwind/src/dwarf2.h	/^  DW_OP_lit26              = 0x4A, \/\/ Literal 26$/;"	e	enum:__anon85
DW_OP_lit27	ThirdParty/libunwind/src/dwarf2.h	/^  DW_OP_lit27              = 0x4B, \/\/ Literal 27$/;"	e	enum:__anon85
DW_OP_lit28	ThirdParty/libunwind/src/dwarf2.h	/^  DW_OP_lit28              = 0x4C, \/\/ Literal 28$/;"	e	enum:__anon85
DW_OP_lit29	ThirdParty/libunwind/src/dwarf2.h	/^  DW_OP_lit29              = 0x4D, \/\/ Literal 29$/;"	e	enum:__anon85
DW_OP_lit3	ThirdParty/libunwind/src/dwarf2.h	/^  DW_OP_lit3               = 0x33, \/\/ Literal 3$/;"	e	enum:__anon85
DW_OP_lit30	ThirdParty/libunwind/src/dwarf2.h	/^  DW_OP_lit30              = 0x4E, \/\/ Literal 30$/;"	e	enum:__anon85
DW_OP_lit31	ThirdParty/libunwind/src/dwarf2.h	/^  DW_OP_lit31              = 0x4F, \/\/ Literal 31$/;"	e	enum:__anon85
DW_OP_lit4	ThirdParty/libunwind/src/dwarf2.h	/^  DW_OP_lit4               = 0x34, \/\/ Literal 4$/;"	e	enum:__anon85
DW_OP_lit5	ThirdParty/libunwind/src/dwarf2.h	/^  DW_OP_lit5               = 0x35, \/\/ Literal 5$/;"	e	enum:__anon85
DW_OP_lit6	ThirdParty/libunwind/src/dwarf2.h	/^  DW_OP_lit6               = 0x36, \/\/ Literal 6$/;"	e	enum:__anon85
DW_OP_lit7	ThirdParty/libunwind/src/dwarf2.h	/^  DW_OP_lit7               = 0x37, \/\/ Literal 7$/;"	e	enum:__anon85
DW_OP_lit8	ThirdParty/libunwind/src/dwarf2.h	/^  DW_OP_lit8               = 0x38, \/\/ Literal 8$/;"	e	enum:__anon85
DW_OP_lit9	ThirdParty/libunwind/src/dwarf2.h	/^  DW_OP_lit9               = 0x39, \/\/ Literal 9$/;"	e	enum:__anon85
DW_OP_lo_user	ThirdParty/libunwind/src/dwarf2.h	/^  DW_OP_lo_user            = 0xE0,$/;"	e	enum:__anon85
DW_OP_lt	ThirdParty/libunwind/src/dwarf2.h	/^  DW_OP_lt                 = 0x2D,$/;"	e	enum:__anon85
DW_OP_minus	ThirdParty/libunwind/src/dwarf2.h	/^  DW_OP_minus              = 0x1C,$/;"	e	enum:__anon85
DW_OP_mod	ThirdParty/libunwind/src/dwarf2.h	/^  DW_OP_mod                = 0x1D,$/;"	e	enum:__anon85
DW_OP_mul	ThirdParty/libunwind/src/dwarf2.h	/^  DW_OP_mul                = 0x1E,$/;"	e	enum:__anon85
DW_OP_ne	ThirdParty/libunwind/src/dwarf2.h	/^  DW_OP_ne                 = 0x2E,$/;"	e	enum:__anon85
DW_OP_neg	ThirdParty/libunwind/src/dwarf2.h	/^  DW_OP_neg                = 0x1F,$/;"	e	enum:__anon85
DW_OP_nop	ThirdParty/libunwind/src/dwarf2.h	/^  DW_OP_nop                = 0x96,$/;"	e	enum:__anon85
DW_OP_not	ThirdParty/libunwind/src/dwarf2.h	/^  DW_OP_not                = 0x20,$/;"	e	enum:__anon85
DW_OP_or	ThirdParty/libunwind/src/dwarf2.h	/^  DW_OP_or                 = 0x21,$/;"	e	enum:__anon85
DW_OP_over	ThirdParty/libunwind/src/dwarf2.h	/^  DW_OP_over               = 0x14,$/;"	e	enum:__anon85
DW_OP_pick	ThirdParty/libunwind/src/dwarf2.h	/^  DW_OP_pick               = 0x15, \/\/ 1-byte stack index$/;"	e	enum:__anon85
DW_OP_piece	ThirdParty/libunwind/src/dwarf2.h	/^  DW_OP_piece              = 0x93, \/\/ ULEB128 size of piece addressed$/;"	e	enum:__anon85
DW_OP_plus	ThirdParty/libunwind/src/dwarf2.h	/^  DW_OP_plus               = 0x22,$/;"	e	enum:__anon85
DW_OP_plus_uconst	ThirdParty/libunwind/src/dwarf2.h	/^  DW_OP_plus_uconst        = 0x23, \/\/ ULEB128 addend$/;"	e	enum:__anon85
DW_OP_push_object_addres	ThirdParty/libunwind/src/dwarf2.h	/^  DW_OP_push_object_addres = 0x97,$/;"	e	enum:__anon85
DW_OP_reg0	ThirdParty/libunwind/src/dwarf2.h	/^  DW_OP_reg0               = 0x50, \/\/ Contents of reg0$/;"	e	enum:__anon85
DW_OP_reg1	ThirdParty/libunwind/src/dwarf2.h	/^  DW_OP_reg1               = 0x51, \/\/ Contents of reg1$/;"	e	enum:__anon85
DW_OP_reg10	ThirdParty/libunwind/src/dwarf2.h	/^  DW_OP_reg10              = 0x5A, \/\/ Contents of reg10$/;"	e	enum:__anon85
DW_OP_reg11	ThirdParty/libunwind/src/dwarf2.h	/^  DW_OP_reg11              = 0x5B, \/\/ Contents of reg11$/;"	e	enum:__anon85
DW_OP_reg12	ThirdParty/libunwind/src/dwarf2.h	/^  DW_OP_reg12              = 0x5C, \/\/ Contents of reg12$/;"	e	enum:__anon85
DW_OP_reg13	ThirdParty/libunwind/src/dwarf2.h	/^  DW_OP_reg13              = 0x5D, \/\/ Contents of reg13$/;"	e	enum:__anon85
DW_OP_reg14	ThirdParty/libunwind/src/dwarf2.h	/^  DW_OP_reg14              = 0x5E, \/\/ Contents of reg14$/;"	e	enum:__anon85
DW_OP_reg15	ThirdParty/libunwind/src/dwarf2.h	/^  DW_OP_reg15              = 0x5F, \/\/ Contents of reg15$/;"	e	enum:__anon85
DW_OP_reg16	ThirdParty/libunwind/src/dwarf2.h	/^  DW_OP_reg16              = 0x60, \/\/ Contents of reg16$/;"	e	enum:__anon85
DW_OP_reg17	ThirdParty/libunwind/src/dwarf2.h	/^  DW_OP_reg17              = 0x61, \/\/ Contents of reg17$/;"	e	enum:__anon85
DW_OP_reg18	ThirdParty/libunwind/src/dwarf2.h	/^  DW_OP_reg18              = 0x62, \/\/ Contents of reg18$/;"	e	enum:__anon85
DW_OP_reg19	ThirdParty/libunwind/src/dwarf2.h	/^  DW_OP_reg19              = 0x63, \/\/ Contents of reg19$/;"	e	enum:__anon85
DW_OP_reg2	ThirdParty/libunwind/src/dwarf2.h	/^  DW_OP_reg2               = 0x52, \/\/ Contents of reg2$/;"	e	enum:__anon85
DW_OP_reg20	ThirdParty/libunwind/src/dwarf2.h	/^  DW_OP_reg20              = 0x64, \/\/ Contents of reg20$/;"	e	enum:__anon85
DW_OP_reg21	ThirdParty/libunwind/src/dwarf2.h	/^  DW_OP_reg21              = 0x65, \/\/ Contents of reg21$/;"	e	enum:__anon85
DW_OP_reg22	ThirdParty/libunwind/src/dwarf2.h	/^  DW_OP_reg22              = 0x66, \/\/ Contents of reg22$/;"	e	enum:__anon85
DW_OP_reg23	ThirdParty/libunwind/src/dwarf2.h	/^  DW_OP_reg23              = 0x67, \/\/ Contents of reg23$/;"	e	enum:__anon85
DW_OP_reg24	ThirdParty/libunwind/src/dwarf2.h	/^  DW_OP_reg24              = 0x68, \/\/ Contents of reg24$/;"	e	enum:__anon85
DW_OP_reg25	ThirdParty/libunwind/src/dwarf2.h	/^  DW_OP_reg25              = 0x69, \/\/ Contents of reg25$/;"	e	enum:__anon85
DW_OP_reg26	ThirdParty/libunwind/src/dwarf2.h	/^  DW_OP_reg26              = 0x6A, \/\/ Contents of reg26$/;"	e	enum:__anon85
DW_OP_reg27	ThirdParty/libunwind/src/dwarf2.h	/^  DW_OP_reg27              = 0x6B, \/\/ Contents of reg27$/;"	e	enum:__anon85
DW_OP_reg28	ThirdParty/libunwind/src/dwarf2.h	/^  DW_OP_reg28              = 0x6C, \/\/ Contents of reg28$/;"	e	enum:__anon85
DW_OP_reg29	ThirdParty/libunwind/src/dwarf2.h	/^  DW_OP_reg29              = 0x6D, \/\/ Contents of reg29$/;"	e	enum:__anon85
DW_OP_reg3	ThirdParty/libunwind/src/dwarf2.h	/^  DW_OP_reg3               = 0x53, \/\/ Contents of reg3$/;"	e	enum:__anon85
DW_OP_reg30	ThirdParty/libunwind/src/dwarf2.h	/^  DW_OP_reg30              = 0x6E, \/\/ Contents of reg30$/;"	e	enum:__anon85
DW_OP_reg31	ThirdParty/libunwind/src/dwarf2.h	/^  DW_OP_reg31              = 0x6F, \/\/ Contents of reg31$/;"	e	enum:__anon85
DW_OP_reg4	ThirdParty/libunwind/src/dwarf2.h	/^  DW_OP_reg4               = 0x54, \/\/ Contents of reg4$/;"	e	enum:__anon85
DW_OP_reg5	ThirdParty/libunwind/src/dwarf2.h	/^  DW_OP_reg5               = 0x55, \/\/ Contents of reg5$/;"	e	enum:__anon85
DW_OP_reg6	ThirdParty/libunwind/src/dwarf2.h	/^  DW_OP_reg6               = 0x56, \/\/ Contents of reg6$/;"	e	enum:__anon85
DW_OP_reg7	ThirdParty/libunwind/src/dwarf2.h	/^  DW_OP_reg7               = 0x57, \/\/ Contents of reg7$/;"	e	enum:__anon85
DW_OP_reg8	ThirdParty/libunwind/src/dwarf2.h	/^  DW_OP_reg8               = 0x58, \/\/ Contents of reg8$/;"	e	enum:__anon85
DW_OP_reg9	ThirdParty/libunwind/src/dwarf2.h	/^  DW_OP_reg9               = 0x59, \/\/ Contents of reg9$/;"	e	enum:__anon85
DW_OP_reg_plus_offset	Lib/Platform/POSIX/POSIX.S	/^#define DW_OP_reg_plus_offset(reg,offset) .cfi_escape 0x70+reg, offset;$/;"	d
DW_OP_regx	ThirdParty/libunwind/src/dwarf2.h	/^  DW_OP_regx               = 0x90, \/\/ ULEB128 register$/;"	e	enum:__anon85
DW_OP_rot	ThirdParty/libunwind/src/dwarf2.h	/^  DW_OP_rot                = 0x17,$/;"	e	enum:__anon85
DW_OP_shl	ThirdParty/libunwind/src/dwarf2.h	/^  DW_OP_shl                = 0x24,$/;"	e	enum:__anon85
DW_OP_shr	ThirdParty/libunwind/src/dwarf2.h	/^  DW_OP_shr                = 0x25,$/;"	e	enum:__anon85
DW_OP_shra	ThirdParty/libunwind/src/dwarf2.h	/^  DW_OP_shra               = 0x26,$/;"	e	enum:__anon85
DW_OP_skip	ThirdParty/libunwind/src/dwarf2.h	/^  DW_OP_skip               = 0x2F, \/\/ signed 2-byte constant$/;"	e	enum:__anon85
DW_OP_swap	ThirdParty/libunwind/src/dwarf2.h	/^  DW_OP_swap               = 0x16,$/;"	e	enum:__anon85
DW_OP_xderef	ThirdParty/libunwind/src/dwarf2.h	/^  DW_OP_xderef             = 0x18,$/;"	e	enum:__anon85
DW_OP_xderef_size	ThirdParty/libunwind/src/dwarf2.h	/^  DW_OP_xderef_size        = 0x95, \/\/ 1-byte size of data retrieved$/;"	e	enum:__anon85
DW_OP_xor	ThirdParty/libunwind/src/dwarf2.h	/^  DW_OP_xor                = 0x27,$/;"	e	enum:__anon85
DW_X86_64_RET_ADDR	ThirdParty/libunwind/src/DwarfInstructions.hpp	/^    DW_X86_64_RET_ADDR = 16$/;"	e	enum:libunwind::DwarfInstructions::__anon86
DW_X86_RET_ADDR	ThirdParty/libunwind/src/DwarfInstructions.hpp	/^    DW_X86_RET_ADDR = 8$/;"	e	enum:libunwind::DwarfInstructions::__anon87
DYNAMICTOP_PTR	Lib/Emscripten/Emscripten.cpp	/^	U32 DYNAMICTOP_PTR;$/;"	m	struct:MutableGlobals	file:
DataSegment	Include/WAVM/IR/Module.h	/^	struct DataSegment$/;"	s	class:WAVM::IR::Opcode
DataSegmentAndMemImm	Include/WAVM/IR/Operators.h	/^	struct DataSegmentAndMemImm$/;"	s	namespace:WAVM::IR
DataSegmentImm	Include/WAVM/IR/Operators.h	/^	struct DataSegmentImm$/;"	s	namespace:WAVM::IR
DbgHelp	Lib/Platform/Windows/Diagnostics.cpp	/^	DbgHelp()$/;"	f	struct:DbgHelp	file:
DbgHelp	Lib/Platform/Windows/Diagnostics.cpp	/^struct DbgHelp$/;"	s	file:
DefaultHashPolicy	Include/WAVM/Inline/Hash.h	/^	template<typename Key> struct DefaultHashPolicy$/;"	s	namespace:WAVM
DefaultHashTableAllocPolicy	Include/WAVM/Inline/HashTable.h	/^	struct DefaultHashTableAllocPolicy$/;"	s	namespace:WAVM
DenseStaticIntSet	Include/WAVM/Inline/DenseStaticIntSet.h	/^		DenseStaticIntSet() { memset(elements, 0, sizeof(elements)); }$/;"	f	struct:WAVM::DenseStaticIntSet
DenseStaticIntSet	Include/WAVM/Inline/DenseStaticIntSet.h	/^		DenseStaticIntSet(Index index)$/;"	f	struct:WAVM::DenseStaticIntSet
DenseStaticIntSet	Include/WAVM/Inline/DenseStaticIntSet.h	/^	template<typename Index, Uptr maxIndexPlusOne> struct DenseStaticIntSet$/;"	s	namespace:WAVM
Descriptor	ThirdParty/libunwind/src/Unwind-EHABI.cpp	/^struct Descriptor {$/;"	s	namespace:__anon79	file:
DisassemblyNames	Include/WAVM/IR/Module.h	/^	struct DisassemblyNames$/;"	s	struct:WAVM::IR::Opcode::Elem
DumpFormat	Test/DumpTestModules/DumpTestModules.cpp	/^enum class DumpFormat$/;"	c	file:
DwarfFDECache	ThirdParty/libunwind/src/UnwindCursor.hpp	/^class _LIBUNWIND_HIDDEN DwarfFDECache {$/;"	c	namespace:libunwind
DwarfInstructions	ThirdParty/libunwind/src/DwarfInstructions.hpp	/^class DwarfInstructions {$/;"	c	namespace:libunwind
EHABIIndexEntry	ThirdParty/libunwind/src/UnwindCursor.hpp	/^struct EHABIIndexEntry {$/;"	s	namespace:libunwind
EHABISectionIterator	ThirdParty/libunwind/src/UnwindCursor.hpp	/^  EHABISectionIterator(A& addressSpace, const UnwindInfoSections& sects, size_t i)$/;"	f	struct:libunwind::EHABISectionIterator
EHABISectionIterator	ThirdParty/libunwind/src/UnwindCursor.hpp	/^struct EHABISectionIterator {$/;"	s	namespace:libunwind
EHHeaderInfo	ThirdParty/libunwind/src/EHHeaderParser.hpp	/^  struct EHHeaderInfo {$/;"	s	class:libunwind::EHHeaderParser
EHHeaderParser	ThirdParty/libunwind/src/EHHeaderParser.hpp	/^template <typename A> class EHHeaderParser {$/;"	c	namespace:libunwind
EMIT_ATOMIC_CMPXCHG	Lib/LLVMJIT/EmitMem.cpp	/^#define EMIT_ATOMIC_CMPXCHG(/;"	d	file:
EMIT_ATOMIC_LOAD_OP	Lib/LLVMJIT/EmitMem.cpp	/^#define EMIT_ATOMIC_LOAD_OP(/;"	d	file:
EMIT_ATOMIC_RMW	Lib/LLVMJIT/EmitMem.cpp	/^#define EMIT_ATOMIC_RMW(/;"	d	file:
EMIT_ATOMIC_STORE_OP	Lib/LLVMJIT/EmitMem.cpp	/^#define EMIT_ATOMIC_STORE_OP(/;"	d	file:
EMIT_BINARY_OP	Lib/LLVMJIT/EmitNumeric.cpp	/^#define EMIT_BINARY_OP(/;"	d	file:
EMIT_CONST	Lib/LLVMJIT/EmitNumeric.cpp	/^#define EMIT_CONST(/;"	d	file:
EMIT_ENTER_EXIT_HOOKS	Lib/LLVMJIT/EmitFunction.cpp	/^#define EMIT_ENTER_EXIT_HOOKS /;"	d	file:
EMIT_FP_BINARY_OP	Lib/LLVMJIT/EmitNumeric.cpp	/^#define EMIT_FP_BINARY_OP(/;"	d	file:
EMIT_FP_COMPARE	Lib/LLVMJIT/EmitNumeric.cpp	/^#define EMIT_FP_COMPARE(/;"	d	file:
EMIT_FP_COMPARE_OP	Lib/LLVMJIT/EmitNumeric.cpp	/^#define EMIT_FP_COMPARE_OP(/;"	d	file:
EMIT_FP_UNARY_OP	Lib/LLVMJIT/EmitNumeric.cpp	/^#define EMIT_FP_UNARY_OP(/;"	d	file:
EMIT_INT_BINARY_OP	Lib/LLVMJIT/EmitNumeric.cpp	/^#define EMIT_INT_BINARY_OP(/;"	d	file:
EMIT_INT_COMPARE	Lib/LLVMJIT/EmitNumeric.cpp	/^#define EMIT_INT_COMPARE(/;"	d	file:
EMIT_INT_COMPARE_OP	Lib/LLVMJIT/EmitNumeric.cpp	/^#define EMIT_INT_COMPARE_OP(/;"	d	file:
EMIT_INT_UNARY_OP	Lib/LLVMJIT/EmitNumeric.cpp	/^#define EMIT_INT_UNARY_OP(/;"	d	file:
EMIT_LOAD_OP	Lib/LLVMJIT/EmitMem.cpp	/^#define EMIT_LOAD_OP(/;"	d	file:
EMIT_SIMD_BINARY_OP	Lib/LLVMJIT/EmitNumeric.cpp	/^#define EMIT_SIMD_BINARY_OP(/;"	d	file:
EMIT_SIMD_EXTRACT_LANE_OP	Lib/LLVMJIT/EmitNumeric.cpp	/^#define EMIT_SIMD_EXTRACT_LANE_OP(/;"	d	file:
EMIT_SIMD_FP_BINARY_OP	Lib/LLVMJIT/EmitNumeric.cpp	/^#define EMIT_SIMD_FP_BINARY_OP(/;"	d	file:
EMIT_SIMD_FP_UNARY_OP	Lib/LLVMJIT/EmitNumeric.cpp	/^#define EMIT_SIMD_FP_UNARY_OP(/;"	d	file:
EMIT_SIMD_INT_BINARY_OP	Lib/LLVMJIT/EmitNumeric.cpp	/^#define EMIT_SIMD_INT_BINARY_OP(/;"	d	file:
EMIT_SIMD_INT_UNARY_OP	Lib/LLVMJIT/EmitNumeric.cpp	/^#define EMIT_SIMD_INT_UNARY_OP(/;"	d	file:
EMIT_SIMD_REPLACE_LANE_OP	Lib/LLVMJIT/EmitNumeric.cpp	/^#define EMIT_SIMD_REPLACE_LANE_OP(/;"	d	file:
EMIT_SIMD_SHIFT	Lib/LLVMJIT/EmitNumeric.cpp	/^#define EMIT_SIMD_SHIFT(/;"	d	file:
EMIT_SIMD_SHIFT_OP	Lib/LLVMJIT/EmitNumeric.cpp	/^#define EMIT_SIMD_SHIFT_OP(/;"	d	file:
EMIT_SIMD_SPLAT	Lib/LLVMJIT/EmitConvert.cpp	/^#define EMIT_SIMD_SPLAT(/;"	d	file:
EMIT_SIMD_UNARY_OP	Lib/LLVMJIT/EmitNumeric.cpp	/^#define EMIT_SIMD_UNARY_OP(/;"	d	file:
EMIT_STORE_OP	Lib/LLVMJIT/EmitMem.cpp	/^#define EMIT_STORE_OP(/;"	d	file:
EMIT_UNARY_OP	Lib/LLVMJIT/EmitConvert.cpp	/^#define EMIT_UNARY_OP(/;"	d	file:
EMIT_UNARY_OP	Lib/LLVMJIT/EmitNumeric.cpp	/^#define EMIT_UNARY_OP(/;"	d	file:
ENABLE_LOGGING	Lib/IR/Validate.cpp	/^#define ENABLE_LOGGING /;"	d	file:
ENABLE_LOGGING	Lib/LLVMJIT/EmitFunction.cpp	/^#define ENABLE_LOGGING /;"	d	file:
END_FUNC	Lib/Platform/POSIX/POSIX.S	/^#define END_FUNC(name) \\$/;"	d
ENUM_CONTROL_OPERATORS	Include/WAVM/IR/OperatorTable.h	/^#define ENUM_CONTROL_OPERATORS(/;"	d
ENUM_INTRINSIC_EXCEPTION_TYPES	Include/WAVM/Runtime/Runtime.h	/^#define ENUM_INTRINSIC_EXCEPTION_TYPES(/;"	d
ENUM_LEGACY_TOKEN_ALIASES	Lib/WASTParse/Lexer.cpp	/^#define ENUM_LEGACY_TOKEN_ALIASES(/;"	d	file:
ENUM_LITERAL_TOKENS	Lib/WASTParse/Lexer.h	/^#define ENUM_LITERAL_TOKENS(/;"	d
ENUM_NONCONTROL_NONPARAMETRIC_OPERATORS	Include/WAVM/IR/OperatorTable.h	/^#define ENUM_NONCONTROL_NONPARAMETRIC_OPERATORS(/;"	d
ENUM_NONCONTROL_OPERATORS	Include/WAVM/IR/OperatorTable.h	/^#define ENUM_NONCONTROL_OPERATORS(/;"	d
ENUM_OPERATORS	Include/WAVM/IR/OperatorTable.h	/^#define ENUM_OPERATORS(/;"	d
ENUM_PARAMETRIC_OPERATORS	Include/WAVM/IR/OperatorTable.h	/^#define ENUM_PARAMETRIC_OPERATORS(/;"	d
ENUM_TOKENS	Lib/WASTParse/Lexer.h	/^#define ENUM_TOKENS(/;"	d
EQUALS	output/Examples/Makefile	/^EQUALS = =$/;"	m
EQUALS	output/Include/WAVM/Inline/Makefile	/^EQUALS = =$/;"	m
EQUALS	output/Include/WAVM/Inline/xxhash/Makefile	/^EQUALS = =$/;"	m
EQUALS	output/Lib/Emscripten/Makefile	/^EQUALS = =$/;"	m
EQUALS	output/Lib/IR/Makefile	/^EQUALS = =$/;"	m
EQUALS	output/Lib/LLVMJIT/Makefile	/^EQUALS = =$/;"	m
EQUALS	output/Lib/Logging/Makefile	/^EQUALS = =$/;"	m
EQUALS	output/Lib/NFA/Makefile	/^EQUALS = =$/;"	m
EQUALS	output/Lib/Platform/Makefile	/^EQUALS = =$/;"	m
EQUALS	output/Lib/RegExp/Makefile	/^EQUALS = =$/;"	m
EQUALS	output/Lib/Runtime/Makefile	/^EQUALS = =$/;"	m
EQUALS	output/Lib/ThreadTest/Makefile	/^EQUALS = =$/;"	m
EQUALS	output/Lib/WASI/Makefile	/^EQUALS = =$/;"	m
EQUALS	output/Lib/WASM/Makefile	/^EQUALS = =$/;"	m
EQUALS	output/Lib/WASTParse/Makefile	/^EQUALS = =$/;"	m
EQUALS	output/Lib/WASTPrint/Makefile	/^EQUALS = =$/;"	m
EQUALS	output/Lib/wavm-c/Makefile	/^EQUALS = =$/;"	m
EQUALS	output/Makefile	/^EQUALS = =$/;"	m
EQUALS	output/Programs/wavm-as/Makefile	/^EQUALS = =$/;"	m
EQUALS	output/Programs/wavm-compile/Makefile	/^EQUALS = =$/;"	m
EQUALS	output/Programs/wavm-disas/Makefile	/^EQUALS = =$/;"	m
EQUALS	output/Programs/wavm-run-wasi/Makefile	/^EQUALS = =$/;"	m
EQUALS	output/Programs/wavm-run/Makefile	/^EQUALS = =$/;"	m
EQUALS	output/Test/Benchmarks/Makefile	/^EQUALS = =$/;"	m
EQUALS	output/Test/Containers/Makefile	/^EQUALS = =$/;"	m
EQUALS	output/Test/DumpTestModules/Makefile	/^EQUALS = =$/;"	m
EQUALS	output/Test/Makefile	/^EQUALS = =$/;"	m
EQUALS	output/Test/RunTestScript/Makefile	/^EQUALS = =$/;"	m
EQUALS	output/Test/fuzz/Makefile	/^EQUALS = =$/;"	m
EQUALS	output/Test/spec/Makefile	/^EQUALS = =$/;"	m
EQUALS	output/Test/wavm-c/Makefile	/^EQUALS = =$/;"	m
EQUALS	output/ThirdParty/bridge/Makefile	/^EQUALS = =$/;"	m
EQUALS	output/ThirdParty/dtoa/Makefile	/^EQUALS = =$/;"	m
EQUALS	output/ThirdParty/libunwind/Makefile	/^EQUALS = =$/;"	m
EXECUTION_CONTEXT_CS	Lib/Platform/Windows/Win64.asm	/^EXECUTION_CONTEXT_CS        EQU 8$/;"	d
EXECUTION_CONTEXT_NUMBYTES	Lib/Platform/POSIX/POSIX.S	/^#define EXECUTION_CONTEXT_NUMBYTES 64$/;"	d
EXECUTION_CONTEXT_R12	Lib/Platform/POSIX/POSIX.S	/^#define EXECUTION_CONTEXT_R12 24$/;"	d
EXECUTION_CONTEXT_R12	Lib/Platform/Windows/Win64.asm	/^EXECUTION_CONTEXT_R12       EQU 40$/;"	d
EXECUTION_CONTEXT_R13	Lib/Platform/POSIX/POSIX.S	/^#define EXECUTION_CONTEXT_R13 32$/;"	d
EXECUTION_CONTEXT_R13	Lib/Platform/Windows/Win64.asm	/^EXECUTION_CONTEXT_R13       EQU 48$/;"	d
EXECUTION_CONTEXT_R14	Lib/Platform/POSIX/POSIX.S	/^#define EXECUTION_CONTEXT_R14 40$/;"	d
EXECUTION_CONTEXT_R14	Lib/Platform/Windows/Win64.asm	/^EXECUTION_CONTEXT_R14       EQU 56$/;"	d
EXECUTION_CONTEXT_R15	Lib/Platform/POSIX/POSIX.S	/^#define EXECUTION_CONTEXT_R15 48$/;"	d
EXECUTION_CONTEXT_R15	Lib/Platform/Windows/Win64.asm	/^EXECUTION_CONTEXT_R15       EQU 64$/;"	d
EXECUTION_CONTEXT_RBP	Lib/Platform/POSIX/POSIX.S	/^#define EXECUTION_CONTEXT_RBP 16$/;"	d
EXECUTION_CONTEXT_RBP	Lib/Platform/Windows/Win64.asm	/^EXECUTION_CONTEXT_RBP       EQU 96$/;"	d
EXECUTION_CONTEXT_RBX	Lib/Platform/POSIX/POSIX.S	/^#define EXECUTION_CONTEXT_RBX 0$/;"	d
EXECUTION_CONTEXT_RBX	Lib/Platform/Windows/Win64.asm	/^EXECUTION_CONTEXT_RBX       EQU 88$/;"	d
EXECUTION_CONTEXT_RDI	Lib/Platform/Windows/Win64.asm	/^EXECUTION_CONTEXT_RDI       EQU 72$/;"	d
EXECUTION_CONTEXT_RFLAGS	Lib/Platform/Windows/Win64.asm	/^EXECUTION_CONTEXT_RFLAGS    EQU 16$/;"	d
EXECUTION_CONTEXT_RIP	Lib/Platform/POSIX/POSIX.S	/^#define EXECUTION_CONTEXT_RIP 56$/;"	d
EXECUTION_CONTEXT_RIP	Lib/Platform/Windows/Win64.asm	/^EXECUTION_CONTEXT_RIP       EQU 0$/;"	d
EXECUTION_CONTEXT_RSI	Lib/Platform/Windows/Win64.asm	/^EXECUTION_CONTEXT_RSI       EQU 80$/;"	d
EXECUTION_CONTEXT_RSP	Lib/Platform/POSIX/POSIX.S	/^#define EXECUTION_CONTEXT_RSP 8$/;"	d
EXECUTION_CONTEXT_RSP	Lib/Platform/Windows/Win64.asm	/^EXECUTION_CONTEXT_RSP       EQU 24$/;"	d
EXECUTION_CONTEXT_SS	Lib/Platform/Windows/Win64.asm	/^EXECUTION_CONTEXT_SS        EQU 32$/;"	d
EXECUTION_CONTEXT_XMM10	Lib/Platform/Windows/Win64.asm	/^EXECUTION_CONTEXT_XMM10     EQU 176$/;"	d
EXECUTION_CONTEXT_XMM11	Lib/Platform/Windows/Win64.asm	/^EXECUTION_CONTEXT_XMM11     EQU 192$/;"	d
EXECUTION_CONTEXT_XMM12	Lib/Platform/Windows/Win64.asm	/^EXECUTION_CONTEXT_XMM12     EQU 208$/;"	d
EXECUTION_CONTEXT_XMM13	Lib/Platform/Windows/Win64.asm	/^EXECUTION_CONTEXT_XMM13     EQU 224$/;"	d
EXECUTION_CONTEXT_XMM14	Lib/Platform/Windows/Win64.asm	/^EXECUTION_CONTEXT_XMM14     EQU 240$/;"	d
EXECUTION_CONTEXT_XMM15	Lib/Platform/Windows/Win64.asm	/^EXECUTION_CONTEXT_XMM15     EQU 256$/;"	d
EXECUTION_CONTEXT_XMM6	Lib/Platform/Windows/Win64.asm	/^EXECUTION_CONTEXT_XMM6      EQU 112$/;"	d
EXECUTION_CONTEXT_XMM7	Lib/Platform/Windows/Win64.asm	/^EXECUTION_CONTEXT_XMM7      EQU 128$/;"	d
EXECUTION_CONTEXT_XMM8	Lib/Platform/Windows/Win64.asm	/^EXECUTION_CONTEXT_XMM8      EQU 144$/;"	d
EXECUTION_CONTEXT_XMM9	Lib/Platform/Windows/Win64.asm	/^EXECUTION_CONTEXT_XMM9      EQU 160$/;"	d
EXPECTED_NUM_FRAMES	ThirdParty/libunwind/test/libunwind_02.pass.cpp	/^#define EXPECTED_NUM_FRAMES /;"	d	file:
EXTRACT_BITS	ThirdParty/libunwind/src/CompactUnwinder.hpp	/^#define EXTRACT_BITS(/;"	d
Ebits	ThirdParty/dtoa/dtoa.c	/^#define Ebits /;"	d	file:
Elem	Include/WAVM/IR/Module.h	/^	struct Elem$/;"	s	class:WAVM::IR::Opcode
ElemSegment	Include/WAVM/IR/Module.h	/^	struct ElemSegment$/;"	s	struct:WAVM::IR::Opcode::Elem
ElemSegmentAndTableImm	Include/WAVM/IR/Operators.h	/^	struct ElemSegmentAndTableImm$/;"	s	namespace:WAVM::IR
ElemSegmentImm	Include/WAVM/IR/Operators.h	/^	struct ElemSegmentImm$/;"	s	namespace:WAVM::IR
Element	Include/WAVM/Inline/DenseStaticIntSet.h	/^		typedef Uptr Element;$/;"	t	struct:WAVM::DenseStaticIntSet
Element	Lib/Runtime/RuntimePrivate.h	/^		struct Element$/;"	s	struct:WAVM::Runtime::Table
Emax	ThirdParty/dtoa/dtoa.c	/^#define Emax /;"	d	file:
Emin	ThirdParty/dtoa/dtoa.c	/^#define Emin /;"	d	file:
EmitContext	Lib/LLVMJIT/EmitContext.h	/^		EmitContext(LLVMContext& inLLVMContext, llvm::Constant* inDefaultMemoryOffset)$/;"	f	struct:WAVM::LLVMJIT::EmitContext
EmitContext	Lib/LLVMJIT/EmitContext.h	/^	struct EmitContext$/;"	s	namespace:WAVM::LLVMJIT
EmitFunctionContext	Lib/LLVMJIT/EmitFunctionContext.h	/^		EmitFunctionContext(LLVMContext& inLLVMContext,$/;"	f	struct:WAVM::LLVMJIT::EmitFunctionContext
EmitFunctionContext	Lib/LLVMJIT/EmitFunctionContext.h	/^	struct EmitFunctionContext : EmitContext$/;"	s	namespace:WAVM::LLVMJIT
EmitModuleContext	Lib/LLVMJIT/EmitModule.cpp	/^EmitModuleContext::EmitModuleContext(const IR::Module& inIRModule,$/;"	f	class:EmitModuleContext
EmitModuleContext	Lib/LLVMJIT/EmitModuleContext.h	/^	struct EmitModuleContext$/;"	s	namespace:WAVM::LLVMJIT
EmplacedValue	Test/Containers/HashMapTest.cpp	/^	EmplacedValue(const std::string& inA, const std::string& inB) : a(inA), b(inB) {}$/;"	f	struct:EmplacedValue
EmplacedValue	Test/Containers/HashMapTest.cpp	/^struct EmplacedValue$/;"	s	file:
Emscripten	Include/WAVM/Emscripten/Emscripten.h	/^namespace WAVM { namespace Emscripten {$/;"	n	namespace:WAVM
Encoding	Include/WAVM/IR/Types.h	/^		struct Encoding$/;"	s	struct:WAVM::IR::ValueType::FunctionType
ErrNo	Lib/Emscripten/Emscripten.cpp	/^enum ErrNo$/;"	g	file:
Error	Include/WAVM/WASTParse/WASTParse.h	/^	struct Error$/;"	s	namespace:WAVM::WAST
Errors	Include/WAVM/Inline/Errors.h	/^namespace WAVM { namespace Errors {$/;"	n	namespace:WAVM
Event	Include/WAVM/Platform/Event.h	/^	struct Event$/;"	s	namespace:WAVM::Platform
Event	Lib/Platform/POSIX/Event.cpp	/^Platform::Event::Event()$/;"	f	class:Platform::Event
Event	Lib/Platform/Windows/Event.cpp	/^Platform::Event::Event()$/;"	f	class:Platform::Event
Exception	Include/WAVM/Runtime/RuntimeData.h	/^	struct Exception$/;"	s	namespace:WAVM::Runtime
ExceptionType	Include/WAVM/IR/Types.h	/^	struct ExceptionType$/;"	s	class:WAVM::IR::ValueType
ExceptionType	Lib/Runtime/RuntimePrivate.h	/^		ExceptionType(Compartment* inCompartment,$/;"	f	struct:WAVM::Runtime::ExceptionType
ExceptionType	Lib/Runtime/RuntimePrivate.h	/^	struct ExceptionType : GCObject$/;"	s	namespace:WAVM::Runtime
ExceptionTypeBinding	Include/WAVM/LLVMJIT/LLVMJIT.h	/^	struct ExceptionTypeBinding$/;"	s	namespace:WAVM::LLVMJIT
ExceptionTypeDef	Include/WAVM/IR/Module.h	/^	struct ExceptionTypeDef$/;"	s	class:WAVM::IR::Opcode
ExceptionTypeImm	Include/WAVM/IR/Operators.h	/^	struct ExceptionTypeImm$/;"	s	namespace:WAVM::IR
ExceptionTypeImport	Include/WAVM/IR/Module.h	/^	typedef Import<ExceptionType> ExceptionTypeImport;$/;"	t	class:WAVM::IR::Opcode
ExceptionTypes	Include/WAVM/Runtime/Runtime.h	/^	namespace ExceptionTypes {$/;"	n	namespace:WAVM::Runtime
ExecutionContext	Lib/Platform/POSIX/POSIXPrivate.h	/^struct ExecutionContext$/;"	s
ExecutionContext	Lib/Platform/Windows/WindowsPrivate.h	/^struct ExecutionContext$/;"	s
ExitException	Lib/WASI/WASI.cpp	/^struct ExitException$/;"	s	file:
ExitThreadException	Lib/ThreadTest/ThreadTest.cpp	/^struct ExitThreadException$/;"	s	file:
Exp_1	ThirdParty/dtoa/dtoa.c	/^#define Exp_1 /;"	d	file:
Exp_11	ThirdParty/dtoa/dtoa.c	/^#define Exp_11 /;"	d	file:
Exp_mask	ThirdParty/dtoa/dtoa.c	/^#define Exp_mask /;"	d	file:
Exp_msk1	ThirdParty/dtoa/dtoa.c	/^#define Exp_msk1 /;"	d	file:
Exp_msk11	ThirdParty/dtoa/dtoa.c	/^#define Exp_msk11 /;"	d	file:
Exp_shift	ThirdParty/dtoa/dtoa.c	/^#define Exp_shift /;"	d	file:
Exp_shift1	ThirdParty/dtoa/dtoa.c	/^#define Exp_shift1 /;"	d	file:
ExpectedTrapType	Include/WAVM/WASTParse/TestScript.h	/^	enum class ExpectedTrapType$/;"	c	namespace:WAVM::WAST
Export	Include/WAVM/IR/Module.h	/^	struct Export$/;"	s	class:WAVM::IR::Opcode
ExternKind	Include/WAVM/IR/Types.h	/^	enum class ExternKind : U8$/;"	c	class:WAVM::IR::ValueType
ExternType	Include/WAVM/IR/Types.h	/^		ExternType() : kind(ExternKind::invalid) {}$/;"	f	struct:WAVM::IR::ValueType::ExternType
ExternType	Include/WAVM/IR/Types.h	/^		ExternType(ExceptionType inExceptionType)$/;"	f	struct:WAVM::IR::ValueType::ExternType
ExternType	Include/WAVM/IR/Types.h	/^		ExternType(ExternKind inKind) : kind(inKind) {}$/;"	f	struct:WAVM::IR::ValueType::ExternType
ExternType	Include/WAVM/IR/Types.h	/^		ExternType(FunctionType inFunction) : kind(ExternKind::function), function(inFunction) {}$/;"	f	struct:WAVM::IR::ValueType::ExternType
ExternType	Include/WAVM/IR/Types.h	/^		ExternType(GlobalType inGlobal) : kind(ExternKind::global), global(inGlobal) {}$/;"	f	struct:WAVM::IR::ValueType::ExternType
ExternType	Include/WAVM/IR/Types.h	/^		ExternType(MemoryType inMemory) : kind(ExternKind::memory), memory(inMemory) {}$/;"	f	struct:WAVM::IR::ValueType::ExternType
ExternType	Include/WAVM/IR/Types.h	/^		ExternType(TableType inTable) : kind(ExternKind::table), table(inTable) {}$/;"	f	struct:WAVM::IR::ValueType::ExternType
ExternType	Include/WAVM/IR/Types.h	/^	struct ExternType$/;"	s	class:WAVM::IR::ValueType
F32	Include/WAVM/Inline/BasicTypes.h	/^typedef float F32;$/;"	t
F64	Include/WAVM/Inline/BasicTypes.h	/^typedef double F64;$/;"	t
FDE_Info	ThirdParty/libunwind/src/DwarfInstructions.hpp	/^  typedef typename CFI_Parser<A>::FDE_Info          FDE_Info;$/;"	t	class:libunwind::DwarfInstructions
FDE_Info	ThirdParty/libunwind/src/DwarfParser.hpp	/^  struct FDE_Info {$/;"	s	class:libunwind::CFI_Parser
FFFFFFFF	ThirdParty/dtoa/dtoa.c	/^#define FFFFFFFF /;"	d	file:
FLT_RADIX	ThirdParty/dtoa/dtoa.c	/^#define FLT_RADIX /;"	d	file:
FORCEINLINE	Include/WAVM/Platform/Defines.h	/^#define FORCEINLINE /;"	d
FORCEINLINE	Include/WAVM/Platform/Defines.h	/^#define FORCEINLINE$/;"	d
FORCENOINLINE	Include/WAVM/Platform/Defines.h	/^#define FORCENOINLINE /;"	d
FORCENOINLINE	Include/WAVM/Platform/Defines.h	/^#define FORCENOINLINE$/;"	d
FORCE_INLINE	Include/WAVM/Inline/xxhash/xxhash.c	/^#      define FORCE_INLINE /;"	d	file:
FORCE_INLINE	Include/WAVM/Inline/xxhash/xxhash.c	/^#    define FORCE_INLINE /;"	d	file:
FORCE_INLINE	Include/WAVM/Inline/xxhash/xxhash.c	/^#  define FORCE_INLINE /;"	d	file:
FREE_DTOA_LOCK	ThirdParty/dtoa/dtoa.c	/^#define FREE_DTOA_LOCK(/;"	d	file:
FUNC	ThirdParty/libunwind/src/Unwind-EHABI.cpp	/^    FUNC    = 0x1,$/;"	e	enum:__anon79::Descriptor::__anon81	file:
FatalParseException	Lib/WASTParse/Parse.h	/^	struct FatalParseException$/;"	s	namespace:WAVM::WAST
FatalSerializationException	Include/WAVM/Inline/Serialization.h	/^		FatalSerializationException(std::string&& inMessage) : message(std::move(inMessage)) {}$/;"	f	struct:WAVM::Serialization::FatalSerializationException
FatalSerializationException	Include/WAVM/Inline/Serialization.h	/^	struct FatalSerializationException$/;"	s	namespace:WAVM::Serialization
FeatureSpec	Include/WAVM/IR/IR.h	/^	struct FeatureSpec$/;"	s	namespace:WAVM::IR
FileAccessMode	Include/WAVM/Platform/File.h	/^	enum class FileAccessMode$/;"	c	namespace:WAVM::Platform
FileCreateMode	Include/WAVM/Platform/File.h	/^	enum class FileCreateMode$/;"	c	namespace:WAVM::Platform
FileSeekOrigin	Include/WAVM/Platform/File.h	/^	enum class FileSeekOrigin$/;"	c	namespace:WAVM::Platform
Float	Include/WAVM/Inline/FloatComponents.h	/^		typedef F32 Float;$/;"	t	struct:FloatComponents
Float	Include/WAVM/Inline/FloatComponents.h	/^		typedef F64 Float;$/;"	t	struct:WAVM::FloatComponents
FloatComponents	Include/WAVM/Inline/FloatComponents.h	/^	template<> struct FloatComponents<F32>$/;"	s
FloatComponents	Include/WAVM/Inline/FloatComponents.h	/^	template<> struct FloatComponents<F64>$/;"	s	namespace:WAVM
Flt_Rounds	ThirdParty/dtoa/dtoa.c	/^#define Flt_Rounds /;"	d	file:
Flt_Rounds	ThirdParty/dtoa/dtoa.c	/^#undef Flt_Rounds$/;"	d	file:
ForkThreadArgs	Lib/Platform/POSIX/Thread.cpp	/^struct ForkThreadArgs$/;"	s	file:
ForkThreadArgs	Lib/Platform/Windows/Thread.cpp	/^struct ForkThreadArgs : ThreadArgs$/;"	s	file:
Format	Include/WAVM/IR/Types.h	/^		enum Format$/;"	g	struct:WAVM::IR::ValueType::IndexedBlockType
Format	ThirdParty/libunwind/src/Unwind-EHABI.cpp	/^  } Format;$/;"	t	struct:__anon79::Descriptor	typeref:enum:__anon79::Descriptor::__anon80	file:
Frac_mask	ThirdParty/dtoa/dtoa.c	/^#define Frac_mask /;"	d	file:
Frac_mask1	ThirdParty/dtoa/dtoa.c	/^#define Frac_mask1 /;"	d	file:
Frame	Include/WAVM/Platform/Diagnostics.h	/^		struct Frame$/;"	s	struct:WAVM::Platform::CallStack
Function	Include/WAVM/IR/Module.h	/^		struct Function$/;"	s	struct:WAVM::IR::Opcode::Elem::DisassemblyNames
Function	Include/WAVM/Runtime/Intrinsics.h	/^	struct Function$/;"	s	namespace:WAVM::Intrinsics
Function	Include/WAVM/Runtime/RuntimeData.h	/^		Function(FunctionMutableData* inMutableData,$/;"	f	struct:WAVM::Runtime::Function
Function	Include/WAVM/Runtime/RuntimeData.h	/^	struct Function$/;"	s	namespace:WAVM::Runtime
Function	Lib/Runtime/Intrinsics.cpp	/^Intrinsics::Function::Function(Intrinsics::Module& moduleRef,$/;"	f	class:Intrinsics::Function
FunctionBinding	Include/WAVM/LLVMJIT/LLVMJIT.h	/^	struct FunctionBinding$/;"	s	namespace:WAVM::LLVMJIT
FunctionDef	Include/WAVM/IR/Module.h	/^	struct FunctionDef$/;"	s	class:WAVM::IR::Opcode
FunctionImm	Include/WAVM/IR/Operators.h	/^	struct FunctionImm$/;"	s	namespace:WAVM::IR
FunctionImport	Include/WAVM/IR/Module.h	/^	typedef Import<IndexedFunctionType> FunctionImport;$/;"	t	class:WAVM::IR::Opcode
FunctionMutableData	Include/WAVM/Runtime/RuntimeData.h	/^		FunctionMutableData(std::string&& inDebugName) : debugName(inDebugName) {}$/;"	f	struct:WAVM::Runtime::FunctionMutableData
FunctionMutableData	Include/WAVM/Runtime/RuntimeData.h	/^	struct FunctionMutableData$/;"	s	namespace:WAVM::Runtime
FunctionPrintContext	Lib/WASTPrint/Print.cpp	/^	FunctionPrintContext(ModulePrintContext& inModuleContext, Uptr functionDefIndex)$/;"	f	struct:FunctionPrintContext
FunctionPrintContext	Lib/WASTPrint/Print.cpp	/^struct FunctionPrintContext$/;"	s	file:
FunctionState	Lib/WASTParse/ParseFunction.cpp	/^		FunctionState(const std::shared_ptr<NameToIndexMap>& inLocalNameToIndexMap,$/;"	f	struct:WAVM::WAST::FunctionState
FunctionState	Lib/WASTParse/ParseFunction.cpp	/^	struct FunctionState$/;"	s	namespace:WAVM::WAST	file:
FunctionType	Include/WAVM/IR/Types.h	/^		FunctionType(Encoding encoding) : impl(reinterpret_cast<const Impl*>(encoding.impl)) {}$/;"	f	struct:WAVM::IR::ValueType::FunctionType
FunctionType	Include/WAVM/IR/Types.h	/^		FunctionType(TypeTuple inResults = TypeTuple(), TypeTuple inParams = TypeTuple())$/;"	f	struct:WAVM::IR::ValueType::FunctionType
FunctionType	Include/WAVM/IR/Types.h	/^		FunctionType(const Impl* inImpl) : impl(inImpl) {}$/;"	f	struct:WAVM::IR::ValueType::FunctionType
FunctionType	Include/WAVM/IR/Types.h	/^	struct FunctionType$/;"	s	class:WAVM::IR::ValueType
FunctionTypeHashPolicy	Lib/IR/Types.cpp	/^struct FunctionTypeHashPolicy$/;"	s	file:
FunctionValidationContext	Lib/IR/Validate.cpp	/^	FunctionValidationContext(const Module& inModule, const FunctionDef& inFunctionDef)$/;"	f	struct:FunctionValidationContext
FunctionValidationContext	Lib/IR/Validate.cpp	/^struct FunctionValidationContext$/;"	s	file:
GCObject	Lib/Runtime/ObjectGC.cpp	/^Runtime::GCObject::GCObject(ObjectKind inKind, Compartment* inCompartment)$/;"	f	class:Runtime::GCObject
GCObject	Lib/Runtime/RuntimePrivate.h	/^	struct GCObject : Object$/;"	s	namespace:WAVM::Runtime
GCPointer	Include/WAVM/Runtime/Runtime.h	/^		GCPointer() : value(nullptr) {}$/;"	f	struct:WAVM::Runtime::GCPointer
GCPointer	Include/WAVM/Runtime/Runtime.h	/^		GCPointer(GCPointer<ObjectType>&& inMove)$/;"	f	struct:WAVM::Runtime::GCPointer
GCPointer	Include/WAVM/Runtime/Runtime.h	/^		GCPointer(ObjectType* inValue)$/;"	f	struct:WAVM::Runtime::GCPointer
GCPointer	Include/WAVM/Runtime/Runtime.h	/^		GCPointer(const GCPointer<ObjectType>& inCopy)$/;"	f	struct:WAVM::Runtime::GCPointer
GCPointer	Include/WAVM/Runtime/Runtime.h	/^	template<typename ObjectType> struct GCPointer$/;"	s	namespace:WAVM::Runtime
GCState	Lib/Runtime/ObjectGC.cpp	/^	GCState(Compartment* inCompartment) : compartment(inCompartment) {}$/;"	f	struct:GCState
GCState	Lib/Runtime/ObjectGC.cpp	/^struct GCState$/;"	s	file:
GLUE	ThirdParty/libunwind/src/assembly.h	/^#define GLUE(/;"	d
GLUE2	ThirdParty/libunwind/src/assembly.h	/^#define GLUE2(/;"	d
GPRs	ThirdParty/libunwind/src/Registers.hpp	/^  struct GPRs {$/;"	s	class:libunwind::Registers_arm
GPRs	ThirdParty/libunwind/src/Registers.hpp	/^  struct GPRs {$/;"	s	class:libunwind::Registers_arm64
GPRs	ThirdParty/libunwind/src/Registers.hpp	/^  struct GPRs {$/;"	s	class:libunwind::Registers_x86
GPRs	ThirdParty/libunwind/src/Registers.hpp	/^  struct GPRs {$/;"	s	class:libunwind::Registers_x86_64
GasVisitor	Include/WAVM/Emscripten/gas-visit-context.h	/^    GasVisitor(Uptr idx, IR::Module& irModule, IR::FunctionDef& fd)$/;"	f	struct:GasVisitor
GasVisitor	Include/WAVM/Emscripten/gas-visit-context.h	/^struct GasVisitor {$/;"	s
GenericGlobal	Include/WAVM/Runtime/Intrinsics.h	/^		GenericGlobal(Intrinsics::Module& moduleRef, const char* inName, Value inValue)$/;"	f	struct:WAVM::Intrinsics::GenericGlobal
GenericGlobal	Include/WAVM/Runtime/Intrinsics.h	/^	template<typename Value> struct GenericGlobal : Global$/;"	s	namespace:WAVM::Intrinsics
GetAction	Include/WAVM/WASTParse/TestScript.h	/^		GetAction(TextFileLocus&& inLocus,$/;"	f	struct:WAVM::WAST::GetAction
GetAction	Include/WAVM/WASTParse/TestScript.h	/^	struct GetAction : Action$/;"	s	namespace:WAVM::WAST
GetOrSetVariableImm	Include/WAVM/IR/Operators.h	/^	template<bool isGlobal> struct GetOrSetVariableImm$/;"	s	namespace:WAVM::IR
Global	Include/WAVM/Runtime/Intrinsics.h	/^	struct Global$/;"	s	namespace:WAVM::Intrinsics
Global	Lib/Runtime/Intrinsics.cpp	/^Intrinsics::Global::Global(Intrinsics::Module& moduleRef,$/;"	f	class:Intrinsics::Global
Global	Lib/Runtime/RuntimePrivate.h	/^		Global(Compartment* inCompartment,$/;"	f	struct:WAVM::Runtime::Global
Global	Lib/Runtime/RuntimePrivate.h	/^	struct Global : GCObject$/;"	s	namespace:WAVM::Runtime
GlobalBinding	Include/WAVM/LLVMJIT/LLVMJIT.h	/^	struct GlobalBinding$/;"	s	namespace:WAVM::LLVMJIT
GlobalDef	Include/WAVM/IR/Module.h	/^	struct GlobalDef$/;"	s	class:WAVM::IR::Opcode
GlobalImport	Include/WAVM/IR/Module.h	/^	typedef Import<GlobalType> GlobalImport;$/;"	t	class:WAVM::IR::Opcode
GlobalType	Include/WAVM/IR/Types.h	/^		GlobalType() : valueType(ValueType::any), isMutable(false) {}$/;"	f	struct:WAVM::IR::ValueType::GlobalType
GlobalType	Include/WAVM/IR/Types.h	/^		GlobalType(ValueType inValueType, bool inIsMutable)$/;"	f	struct:WAVM::IR::ValueType::GlobalType
GlobalType	Include/WAVM/IR/Types.h	/^	struct GlobalType$/;"	s	class:WAVM::IR::ValueType
HASHMAP_ARGUMENTS	Include/WAVM/Inline/HashMapImpl.h	/^#define HASHMAP_ARGUMENTS /;"	d
HASHMAP_ARGUMENTS	Include/WAVM/Inline/HashMapImpl.h	/^#undef HASHMAP_ARGUMENTS/;"	d
HASHMAP_PARAMETERS	Include/WAVM/Inline/HashMapImpl.h	/^#define HASHMAP_PARAMETERS /;"	d
HASHMAP_PARAMETERS	Include/WAVM/Inline/HashMapImpl.h	/^#undef HASHMAP_PARAMETERS$/;"	d
HASHSET_ARGUMENTS	Include/WAVM/Inline/HashSetImpl.h	/^#define HASHSET_ARGUMENTS$/;"	d
HASHSET_ARGUMENTS	Include/WAVM/Inline/HashSetImpl.h	/^#undef HASHSET_ARGUMENTS/;"	d
HASHSET_PARAMETERS	Include/WAVM/Inline/HashSetImpl.h	/^#define HASHSET_PARAMETERS$/;"	d
HASHSET_PARAMETERS	Include/WAVM/Inline/HashSetImpl.h	/^#undef HASHSET_PARAMETERS$/;"	d
HASHTABLE_ARGUMENTS	Include/WAVM/Inline/HashTableImpl.h	/^#define HASHTABLE_ARGUMENTS /;"	d
HASHTABLE_ARGUMENTS	Include/WAVM/Inline/HashTableImpl.h	/^#undef HASHTABLE_ARGUMENTS$/;"	d
HASHTABLE_PARAMETERS	Include/WAVM/Inline/HashTableImpl.h	/^#define HASHTABLE_PARAMETERS /;"	d
HASHTABLE_PARAMETERS	Include/WAVM/Inline/HashTableImpl.h	/^#undef HASHTABLE_PARAMETERS$/;"	d
HEX	output/CMakeFiles/3.13.2/CompilerIdC/CMakeCCompilerId.c	/^#define HEX(/;"	d	file:
HEX	output/CMakeFiles/3.13.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#define HEX(/;"	d	file:
HIDDEN_SYMBOL	ThirdParty/libunwind/src/assembly.h	/^#define HIDDEN_SYMBOL(/;"	d
Hash	Include/WAVM/IR/Types.h	/^template<> struct WAVM::Hash<WAVM::IR::FunctionType>$/;"	s	class:WAVM::WAVM
Hash	Include/WAVM/IR/Types.h	/^template<> struct WAVM::Hash<WAVM::IR::TypeTuple>$/;"	s	class:WAVM::WAVM
Hash	Include/WAVM/Inline/DenseStaticIntSet.h	/^	struct Hash<DenseStaticIntSet<Index, maxIndexPlusOne>>$/;"	s	namespace:WAVM
Hash	Include/WAVM/Inline/Hash.h	/^	template<> struct Hash<I16>$/;"	s	namespace:WAVM
Hash	Include/WAVM/Inline/Hash.h	/^	template<> struct Hash<I32>$/;"	s	namespace:WAVM
Hash	Include/WAVM/Inline/Hash.h	/^	template<> struct Hash<I64>$/;"	s	namespace:WAVM
Hash	Include/WAVM/Inline/Hash.h	/^	template<> struct Hash<I8>$/;"	s	namespace:WAVM
Hash	Include/WAVM/Inline/Hash.h	/^	template<> struct Hash<U16>$/;"	s	namespace:WAVM
Hash	Include/WAVM/Inline/Hash.h	/^	template<> struct Hash<U32>$/;"	s	namespace:WAVM
Hash	Include/WAVM/Inline/Hash.h	/^	template<> struct Hash<U64>$/;"	s	namespace:WAVM
Hash	Include/WAVM/Inline/Hash.h	/^	template<> struct Hash<U8>$/;"	s	namespace:WAVM
Hash	Include/WAVM/Inline/Hash.h	/^	template<> struct Hash<std::string>$/;"	s	namespace:WAVM
Hash	Include/WAVM/Inline/Hash.h	/^	template<typename Element> struct Hash<std::vector<Element>>$/;"	s	namespace:WAVM
Hash	Include/WAVM/Inline/Hash.h	/^	template<typename Key> struct Hash : std::hash<Key>$/;"	s	namespace:WAVM
HashMap	Include/WAVM/Inline/HashMap.h	/^	struct HashMap$/;"	s	namespace:WAVM
HashMap	Include/WAVM/Inline/HashMapImpl.h	/^HashMap<HASHMAP_ARGUMENTS>::HashMap(Uptr reserveNumPairs) : table(reserveNumPairs)$/;"	f	class:HashMap
HashMap	Include/WAVM/Inline/HashMapImpl.h	/^HashMap<HASHMAP_ARGUMENTS>::HashMap(const std::initializer_list<Pair>& initializerList)$/;"	f	class:HashMap
HashMapIterator	Include/WAVM/Inline/HashMap.h	/^	template<typename Key, typename Value> struct HashMapIterator$/;"	s	namespace:WAVM
HashMapIterator	Include/WAVM/Inline/HashMapImpl.h	/^HashMapIterator<Key, Value>::HashMapIterator($/;"	f	class:HashMapIterator
HashMapPair	Include/WAVM/Inline/HashMap.h	/^	template<typename Key, typename Value> struct HashMapPair$/;"	s	namespace:WAVM
HashMapPair	Include/WAVM/Inline/HashMapImpl.h	/^HashMapPair<Key, Value>::HashMapPair(Key&& inKey, ValueArgs&&... valueArgs)$/;"	f	class:HashMapPair
HashMapPair	Include/WAVM/Inline/HashMapImpl.h	/^HashMapPair<Key, Value>::HashMapPair(const Key& inKey, ValueArgs&&... valueArgs)$/;"	f	class:HashMapPair
HashPolicy	Lib/WASTParse/Parse.h	/^		struct HashPolicy$/;"	s	struct:WAVM::WAST::Name
HashSet	Include/WAVM/Inline/HashSet.h	/^	struct HashSet$/;"	s	namespace:WAVM
HashSet	Include/WAVM/Inline/HashSetImpl.h	/^HashSet<Element, ElementHashPolicy>::HashSet(Uptr reserveNumElements) : table(reserveNumElements)$/;"	f	class:HashSet
HashSet	Include/WAVM/Inline/HashSetImpl.h	/^HashSet<Element, ElementHashPolicy>::HashSet(const std::initializer_list<Element>& initializerList)$/;"	f	class:HashSet
HashSetIterator	Include/WAVM/Inline/HashSet.h	/^	template<typename Element> struct HashSetIterator$/;"	s	namespace:WAVM
HashSetIterator	Include/WAVM/Inline/HashSetImpl.h	/^HashSetIterator<Element>::HashSetIterator(const HashTableBucket<Element>* inBucket,$/;"	f	class:HashSetIterator
HashTable	Include/WAVM/Inline/HashTable.h	/^	struct HashTable$/;"	s	namespace:WAVM
HashTable	Include/WAVM/Inline/HashTableImpl.h	/^HashTable<HASHTABLE_ARGUMENTS>::HashTable(Uptr estimatedNumElements)$/;"	f	class:HashTable
HashTable	Include/WAVM/Inline/HashTableImpl.h	/^template<HASHTABLE_PARAMETERS> HashTable<HASHTABLE_ARGUMENTS>::HashTable(HashTable&& movee)$/;"	f	class:HashTable
HashTable	Include/WAVM/Inline/HashTableImpl.h	/^template<HASHTABLE_PARAMETERS> HashTable<HASHTABLE_ARGUMENTS>::HashTable(const HashTable& copy)$/;"	f	class:HashTable
HashTableBucket	Include/WAVM/Inline/HashTable.h	/^	template<typename Element> struct HashTableBucket$/;"	s	namespace:WAVM
HashTablePolicy	Include/WAVM/Inline/HashMap.h	/^		struct HashTablePolicy$/;"	s	struct:WAVM::HashMap
HashTablePolicy	Include/WAVM/Inline/HashSet.h	/^		struct HashTablePolicy$/;"	s	struct:WAVM::HashSet
Honor_FLT_ROUNDS	ThirdParty/dtoa/dtoa.c	/^#undef Honor_FLT_ROUNDS$/;"	d	file:
I16	Include/WAVM/Inline/BasicTypes.h	/^typedef int16_t I16;$/;"	t
I32	Include/WAVM/Inline/BasicTypes.h	/^typedef int32_t I32;$/;"	t
I64	Include/WAVM/Inline/BasicTypes.h	/^typedef int64_t I64;$/;"	t
I8	Include/WAVM/Inline/BasicTypes.h	/^typedef int8_t I8;$/;"	t
ID_VOID_MAIN	output/CMakeFiles/3.13.2/CompilerIdC/CMakeCCompilerId.c	/^# define ID_VOID_MAIN$/;"	d	file:
IEEE_8087	Lib/WASTParse/ParseNumbers.cpp	/^#define IEEE_8087$/;"	d	file:
IEEE_8087	Lib/WASTParse/ParseNumbers.cpp	/^#undef IEEE_8087$/;"	d	file:
IEEE_8087	ThirdParty/dtoa/dtoa.c	/^Exactly one of IEEE_8087, IEEE_MC68k, VAX, or IBM should be defined.$/;"	v
IEEE_Arith	ThirdParty/dtoa/dtoa.c	/^#define IEEE_Arith$/;"	d	file:
IEEE_Arith	ThirdParty/dtoa/dtoa.c	/^#undef IEEE_Arith$/;"	d	file:
IEEE_MC68k	ThirdParty/dtoa/dtoa.c	/^Exactly one of IEEE_8087, IEEE_MC68k, VAX, or IBM should be defined.$/;"	v
IMPORT	Examples/gas.cpp	/^#define IMPORT /;"	d	file:
INDENT_STRING	Lib/WASTPrint/Print.cpp	/^#define INDENT_STRING /;"	d	file:
INFNAN_CHECK	ThirdParty/dtoa/dtoa.c	/^#define INFNAN_CHECK$/;"	d	file:
INFNAN_CHECK	ThirdParty/dtoa/dtoa.c	/^#undef INFNAN_CHECK$/;"	d	file:
INTRINSIC_MODULE_REF	Include/WAVM/Runtime/Intrinsics.h	/^#define INTRINSIC_MODULE_REF(/;"	d
INVALID	ThirdParty/libunwind/src/Unwind-EHABI.cpp	/^    INVALID = 0x4$/;"	e	enum:__anon79::Descriptor::__anon81	file:
IR	Include/WAVM/Emscripten/Emscripten.h	/^namespace WAVM { namespace IR {$/;"	n	namespace:WAVM
IR	Include/WAVM/IR/IR.h	/^namespace WAVM { namespace IR {$/;"	n	namespace:WAVM
IR	Include/WAVM/IR/Module.h	/^namespace WAVM { namespace IR {$/;"	n	namespace:WAVM
IR	Include/WAVM/IR/OperatorPrinter.h	/^namespace WAVM { namespace IR {$/;"	n	namespace:WAVM
IR	Include/WAVM/IR/Operators.h	/^namespace WAVM { namespace IR {$/;"	n	namespace:WAVM
IR	Include/WAVM/IR/Types.h	/^namespace WAVM { namespace IR {$/;"	n	namespace:WAVM
IR	Include/WAVM/IR/Validate.h	/^namespace WAVM { namespace IR {$/;"	n	namespace:WAVM
IR	Include/WAVM/IR/Value.h	/^namespace WAVM { namespace IR {$/;"	n	namespace:WAVM
IR	Include/WAVM/LLVMJIT/LLVMJIT.h	/^namespace WAVM { namespace IR {$/;"	n	namespace:WAVM
IR	Include/WAVM/Runtime/Runtime.h	/^namespace WAVM { namespace IR {$/;"	n	namespace:WAVM
IR	Include/WAVM/WASM/WASM.h	/^namespace WAVM { namespace IR {$/;"	n	namespace:WAVM
IR	Include/WAVM/WASTParse/WASTParse.h	/^namespace WAVM { namespace IR {$/;"	n	namespace:WAVM
IR	Include/WAVM/WASTPrint/WASTPrint.h	/^namespace WAVM { namespace IR {$/;"	n	namespace:WAVM
IR	Lib/IR/Validate.cpp	/^namespace WAVM { namespace IR {$/;"	n	namespace:WAVM	file:
IR	Lib/WASM/WASMSerialization.cpp	/^namespace WAVM { namespace IR {$/;"	n	namespace:WAVM	file:
Impl	Include/WAVM/IR/Types.h	/^		struct Impl$/;"	s	struct:WAVM::IR::ValueType::FunctionType
Impl	Include/WAVM/IR/Types.h	/^		struct Impl$/;"	s	struct:WAVM::IR::ValueType::TypeTuple
Impl	Lib/IR/Types.cpp	/^IR::FunctionType::Impl::Impl(TypeTuple inResults, TypeTuple inParams)$/;"	f	class:IR::FunctionType::Impl
Impl	Lib/IR/Types.cpp	/^IR::TypeTuple::Impl::Impl(Uptr inNumElems, const ValueType* inElems) : numElems(inNumElems)$/;"	f	class:IR::TypeTuple::Impl
Impl	Lib/IR/Types.cpp	/^IR::TypeTuple::Impl::Impl(const Impl& inCopy) : hash(inCopy.hash), numElems(inCopy.numElems)$/;"	f	class:IR::TypeTuple::Impl
Import	Include/WAVM/IR/Module.h	/^	template<typename Type> struct Import$/;"	s	class:WAVM::IR::Opcode
ImportBindings	Include/WAVM/Runtime/Runtime.h	/^	struct ImportBindings$/;"	s	namespace:WAVM::Runtime
ImportFunctionInsertVisitor	Include/WAVM/Emscripten/insert-imported-context.h	/^    ImportFunctionInsertVisitor(IR::Module& irModule, std::string name) :$/;"	f	struct:ImportFunctionInsertVisitor
ImportFunctionInsertVisitor	Include/WAVM/Emscripten/insert-imported-context.h	/^struct ImportFunctionInsertVisitor : OperatorStreamProxy<CodeStream>$/;"	s
IndexMap	Include/WAVM/Inline/IndexMap.h	/^		IndexMap(Index inMinIndex, Index inMaxIndex)$/;"	f	struct:WAVM::IndexMap
IndexMap	Include/WAVM/Inline/IndexMap.h	/^	template<typename Index, typename Element> struct IndexMap$/;"	s	namespace:WAVM
IndexSpace	Include/WAVM/IR/Module.h	/^	template<typename Definition, typename Type> struct IndexSpace$/;"	s	struct:WAVM::IR::Opcode::Elem
IndexedBlockType	Include/WAVM/IR/Types.h	/^	struct IndexedBlockType$/;"	s	class:WAVM::IR::ValueType
IndexedFunctionType	Include/WAVM/IR/Types.h	/^	struct IndexedFunctionType$/;"	s	class:WAVM::IR::ValueType
InitializerExpression	Include/WAVM/IR/Module.h	/^	typedef InitializerExpressionBase<Uptr> InitializerExpression;$/;"	t	class:WAVM::IR::Opcode
InitializerExpressionBase	Include/WAVM/IR/Module.h	/^		InitializerExpressionBase() : type(Type::error) {}$/;"	f	class:WAVM::IR::Opcode::Type
InitializerExpressionBase	Include/WAVM/IR/Module.h	/^		InitializerExpressionBase(F32 inF32) : type(Type::f32_const), f32(inF32) {}$/;"	f	class:WAVM::IR::Opcode::Type
InitializerExpressionBase	Include/WAVM/IR/Module.h	/^		InitializerExpressionBase(F64 inF64) : type(Type::f64_const), f64(inF64) {}$/;"	f	class:WAVM::IR::Opcode::Type
InitializerExpressionBase	Include/WAVM/IR/Module.h	/^		InitializerExpressionBase(I32 inI32) : type(Type::i32_const), i32(inI32) {}$/;"	f	class:WAVM::IR::Opcode::Type
InitializerExpressionBase	Include/WAVM/IR/Module.h	/^		InitializerExpressionBase(I64 inI64) : type(Type::i64_const), i64(inI64) {}$/;"	f	class:WAVM::IR::Opcode::Type
InitializerExpressionBase	Include/WAVM/IR/Module.h	/^		InitializerExpressionBase(Type inType, Ref inRef) : type(inType), ref(inRef)$/;"	f	class:WAVM::IR::Opcode::Type
InitializerExpressionBase	Include/WAVM/IR/Module.h	/^		InitializerExpressionBase(V128 inV128) : type(Type::v128_const), v128(inV128) {}$/;"	f	class:WAVM::IR::Opcode::Type
InitializerExpressionBase	Include/WAVM/IR/Module.h	/^		InitializerExpressionBase(std::nullptr_t) : type(Type::ref_null) {}$/;"	f	class:WAVM::IR::Opcode::Type
InputStream	Include/WAVM/Inline/Serialization.h	/^		InputStream(const U8* inNext, const U8* inEnd) : next(inNext), end(inEnd) {}$/;"	f	struct:WAVM::Serialization::InputStream
InputStream	Include/WAVM/Inline/Serialization.h	/^	struct InputStream$/;"	s	namespace:WAVM::Serialization
Instance	Include/WAVM/Emscripten/Emscripten.h	/^	struct Instance$/;"	s	namespace:WAVM::Emscripten
Int_max	ThirdParty/dtoa/dtoa.c	/^#define Int_max /;"	d	file:
InternalStateIndex	Include/WAVM/NFA/NFA.h	/^		typedef I16 InternalStateIndex;$/;"	t	struct:WAVM::NFA::Machine
Intrinsics	Include/WAVM/Runtime/Intrinsics.h	/^namespace WAVM { namespace Intrinsics {$/;"	n	namespace:WAVM
Intrinsics	Lib/Runtime/Intrinsics.cpp	/^namespace WAVM { namespace Intrinsics {$/;"	n	namespace:WAVM	file:
Intrinsics	Lib/Runtime/RuntimePrivate.h	/^namespace WAVM { namespace Intrinsics {$/;"	n	namespace:WAVM
IntrusiveSharedPtr	Include/WAVM/Inline/IntrusiveSharedPtr.h	/^		IntrusiveSharedPtr() : value(nullptr) {}$/;"	f	struct:WAVM::IntrusiveSharedPtr
IntrusiveSharedPtr	Include/WAVM/Inline/IntrusiveSharedPtr.h	/^		IntrusiveSharedPtr(IntrusiveSharedPtr<Pointee>&& inMove)$/;"	f	struct:WAVM::IntrusiveSharedPtr
IntrusiveSharedPtr	Include/WAVM/Inline/IntrusiveSharedPtr.h	/^		IntrusiveSharedPtr(Pointee* inValue)$/;"	f	struct:WAVM::IntrusiveSharedPtr
IntrusiveSharedPtr	Include/WAVM/Inline/IntrusiveSharedPtr.h	/^		IntrusiveSharedPtr(const IntrusiveSharedPtr<Pointee>& inCopy)$/;"	f	struct:WAVM::IntrusiveSharedPtr
IntrusiveSharedPtr	Include/WAVM/Inline/IntrusiveSharedPtr.h	/^	template<typename Pointee> struct IntrusiveSharedPtr$/;"	s	namespace:WAVM
InvokeAction	Include/WAVM/WASTParse/TestScript.h	/^		InvokeAction(TextFileLocus&& inLocus,$/;"	f	struct:WAVM::WAST::InvokeAction
InvokeAction	Include/WAVM/WASTParse/TestScript.h	/^	struct InvokeAction : Action$/;"	s	namespace:WAVM::WAST
InvokeThunkPointer	Include/WAVM/Runtime/RuntimeData.h	/^	typedef Runtime::ContextRuntimeData* (*InvokeThunkPointer)(Runtime::Function*,$/;"	t	class:WAVM::Runtime::Runtime
Iptr	Include/WAVM/Inline/BasicTypes.h	/^typedef I32 Iptr;$/;"	t
Iptr	Include/WAVM/Inline/BasicTypes.h	/^typedef I64 Iptr;$/;"	t
Iptr	Include/WAVM/Inline/BasicTypes.h	/^typedef intptr_t Iptr;$/;"	t
Iterator	Include/WAVM/Inline/HashMap.h	/^		typedef HashMapIterator<Key, Value> Iterator;$/;"	t	struct:WAVM::HashMap
Iterator	Include/WAVM/Inline/IndexMap.h	/^			Iterator(HashMapIterator<Index, Element>&& inMapIt) : mapIt(inMapIt) {}$/;"	f	struct:WAVM::IndexMap::Iterator
Iterator	Include/WAVM/Inline/IndexMap.h	/^		struct Iterator$/;"	s	struct:WAVM::IndexMap
JMP	ThirdParty/libunwind/src/assembly.h	/^#define JMP(/;"	d
KEEP_UNLOADED_MODULE_ADDRESSES_RESERVED	Lib/LLVMJIT/LLVMModule.cpp	/^#define KEEP_UNLOADED_MODULE_ADDRESSES_RESERVED /;"	d	file:
KEYMGR_GCC3_DW2_OBJ_LIST	ThirdParty/libunwind/src/Unwind_AppleExtras.cpp	/^#define KEYMGR_GCC3_DW2_OBJ_LIST /;"	d	file:
Kind	ThirdParty/libunwind/src/Unwind-EHABI.cpp	/^  } Kind;$/;"	t	struct:__anon79::Descriptor	typeref:enum:__anon79::Descriptor::__anon81	file:
Kmax	ThirdParty/dtoa/dtoa.c	/^#define Kmax /;"	d	file:
L	ThirdParty/dtoa/dtoa.c	/^typedef union { double d; ULong L[2]; } U;$/;"	m	union:__anon53	file:
LIBUNWIND_AVAIL	ThirdParty/libunwind/include/libunwind.h	/^      #define LIBUNWIND_AVAIL /;"	d
LIBUNWIND_AVAIL	ThirdParty/libunwind/include/libunwind.h	/^     #define LIBUNWIND_AVAIL /;"	d
LIBUNWIND_AVAIL	ThirdParty/libunwind/include/libunwind.h	/^    #define LIBUNWIND_AVAIL /;"	d
LIBUNWIND_AVAIL	ThirdParty/libunwind/include/libunwind.h	/^  #define LIBUNWIND_AVAIL$/;"	d
LIBUNWIND_CONFIG_H	ThirdParty/libunwind/src/config.h	/^#define LIBUNWIND_CONFIG_H$/;"	d
LIBUNWIND_UNAVAIL	ThirdParty/libunwind/include/unwind.h	/^#define LIBUNWIND_UNAVAIL /;"	d
LIBUNWIND_UNAVAIL	ThirdParty/libunwind/include/unwind.h	/^#define LIBUNWIND_UNAVAIL$/;"	d
LLVMArrayOutputStream	Lib/LLVMJIT/LLVMCompile.cpp	/^	LLVMArrayOutputStream() { SetUnbuffered(); }$/;"	f	struct:LLVMArrayOutputStream
LLVMArrayOutputStream	Lib/LLVMJIT/LLVMCompile.cpp	/^struct LLVMArrayOutputStream : llvm::raw_pwrite_stream$/;"	s	file:
LLVMContext	Lib/LLVMJIT/LLVMJIT.cpp	/^LLVMContext::LLVMContext()$/;"	f	class:LLVMContext
LLVMContext	Lib/LLVMJIT/LLVMJITPrivate.h	/^	struct LLVMContext : llvm::LLVMContext$/;"	s	namespace:WAVM::LLVMJIT
LLVMFuzzerTestOneInput	Test/fuzz/fuzz-assemble.cpp	/^extern "C" I32 LLVMFuzzerTestOneInput(const U8* data, Uptr numBytes)$/;"	f
LLVMFuzzerTestOneInput	Test/fuzz/fuzz-compile-model.cpp	/^extern "C" I32 LLVMFuzzerTestOneInput(const U8* data, Uptr numBytes)$/;"	f
LLVMFuzzerTestOneInput	Test/fuzz/fuzz-compile.cpp	/^extern "C" I32 LLVMFuzzerTestOneInput(const U8* data, Uptr numBytes)$/;"	f
LLVMFuzzerTestOneInput	Test/fuzz/fuzz-disassemble.cpp	/^extern "C" I32 LLVMFuzzerTestOneInput(const U8* data, Uptr numBytes)$/;"	f
LLVMFuzzerTestOneInput	Test/fuzz/fuzz-instantiate.cpp	/^extern "C" I32 LLVMFuzzerTestOneInput(const U8* data, Uptr numBytes)$/;"	f
LLVMFuzzerTestOneInput	Test/fuzz/fuzz-wasm.cpp	/^extern "C" I32 LLVMFuzzerTestOneInput(const U8* data, Uptr numBytes)$/;"	f
LLVMFuzzerTestOneInput	Test/fuzz/fuzz-wast.cpp	/^extern "C" I32 LLVMFuzzerTestOneInput(const U8* data, Uptr numBytes)$/;"	f
LLVMJIT	Include/WAVM/LLVMJIT/LLVMJIT.h	/^namespace WAVM { namespace LLVMJIT {$/;"	n	namespace:WAVM
LLVMJIT	Include/WAVM/Runtime/RuntimeData.h	/^namespace WAVM { namespace LLVMJIT {$/;"	n	namespace:WAVM
LLVMJIT	Lib/LLVMJIT/EmitContext.h	/^namespace WAVM { namespace LLVMJIT {$/;"	n	namespace:WAVM
LLVMJIT	Lib/LLVMJIT/EmitFunctionContext.h	/^namespace WAVM { namespace LLVMJIT {$/;"	n	namespace:WAVM
LLVMJIT	Lib/LLVMJIT/EmitModuleContext.h	/^namespace WAVM { namespace LLVMJIT {$/;"	n	namespace:WAVM
LLVMJIT	Lib/LLVMJIT/LLVMJITPrivate.h	/^namespace WAVM { namespace LLVMJIT {$/;"	n	namespace:WAVM
LOAD	Include/WAVM/IR/OperatorTable.h	/^#define LOAD(/;"	d
LOAD_VECTOR_UNALIGNEDh	ThirdParty/libunwind/src/UnwindRegistersRestore.S	/^#define LOAD_VECTOR_UNALIGNEDh(_index) \\$/;"	d
LOAD_VECTOR_UNALIGNEDl	ThirdParty/libunwind/src/UnwindRegistersRestore.S	/^#define LOAD_VECTOR_UNALIGNEDl(_index) \\$/;"	d
LONG_MAX	ThirdParty/dtoa/dtoa.c	/^#define LONG_MAX /;"	d	file:
LSB	ThirdParty/dtoa/dtoa.c	/^#define LSB /;"	d	file:
LU16	ThirdParty/libunwind/src/Unwind-EHABI.cpp	/^    LU16 = 1, \/\/ Long descriptor,  16-bit entries$/;"	e	enum:__anon79::Descriptor::__anon80	file:
LU32	ThirdParty/libunwind/src/Unwind-EHABI.cpp	/^    LU32 = 3, \/\/ Long descriptor,  32-bit entries$/;"	e	enum:__anon79::Descriptor::__anon80	file:
LaneIndexImm	Include/WAVM/IR/Operators.h	/^	template<Uptr numLanes> struct LaneIndexImm$/;"	s	namespace:WAVM::IR
LazyResolver	Include/WAVM/Runtime/Linker.h	/^		LazyResolver(std::function<Resolver*()>& inInnerResolverThunk)$/;"	f	struct:WAVM::Runtime::LazyResolver
LazyResolver	Include/WAVM/Runtime/Linker.h	/^	struct LazyResolver : Resolver$/;"	s	namespace:WAVM::Runtime
Ldone	ThirdParty/libunwind/src/UnwindRegistersRestore.S	/^Ldone  ## _index:$/;"	l
Ldone	ThirdParty/libunwind/src/UnwindRegistersRestore.S	/^Ldone  ## n:$/;"	l
LibcxxConfiguration	ThirdParty/libunwind/test/libunwind/test/config.py	/^from libcxx.test.config import Configuration as LibcxxConfiguration$/;"	i
LineInfo	Lib/WASTParse/Lexer.cpp	/^	struct LineInfo$/;"	s	namespace:WAVM::WAST	file:
LinkResult	Include/WAVM/Runtime/Linker.h	/^	struct LinkResult$/;"	s	namespace:WAVM::Runtime
Lit	Lib/RegExp/RegExp.cpp	/^	Lit(const NFA::CharSet& inCharSet) : Node(NodeType::lit), charSet(inCharSet) {}$/;"	f	struct:Lit
Lit	Lib/RegExp/RegExp.cpp	/^struct Lit : Node$/;"	s	file:
LiteralImm	Include/WAVM/IR/Operators.h	/^	template<typename Value> struct LiteralImm$/;"	s	namespace:WAVM::IR
Llong	ThirdParty/dtoa/dtoa.c	/^#define Llong /;"	d	file:
Lnovec	ThirdParty/libunwind/src/UnwindRegistersRestore.S	/^Lnovec:$/;"	l
LoadOrStoreImm	Include/WAVM/IR/Operators.h	/^	template<Uptr naturalAlignmentLog2> struct LoadOrStoreImm$/;"	s	namespace:WAVM::IR
LocalAddressSpace	ThirdParty/libunwind/src/AddressSpace.hpp	/^class __attribute__((visibility("hidden"))) LocalAddressSpace {$/;"	c	namespace:libunwind
LocalSet	Lib/WASM/WASMSerialization.cpp	/^struct LocalSet$/;"	s	file:
Lock	Include/WAVM/Inline/Lock.h	/^		Lock(Mutex& inMutex) : mutex(&inMutex) { mutex->lock(); }$/;"	f	struct:WAVM::Lock
Lock	Include/WAVM/Inline/Lock.h	/^	template<typename Mutex> struct Lock$/;"	s	namespace:WAVM
Log	Include/WAVM/Logging/Logging.h	/^namespace WAVM { namespace Log {$/;"	n	namespace:WAVM
Log2P	ThirdParty/dtoa/dtoa.c	/^#define Log2P /;"	d	file:
Long	Lib/WASTParse/ParseNumbers.cpp	/^#define Long /;"	d	file:
Long	Lib/WASTParse/ParseNumbers.cpp	/^#undef Long$/;"	d	file:
Long	ThirdParty/dtoa/dtoa.c	/^#define Long /;"	d	file:
MALLOC	ThirdParty/dtoa/dtoa.c	/^#define MALLOC /;"	d	file:
MAP_ANONYMOUS	Lib/Platform/POSIX/Memory.cpp	/^#define MAP_ANONYMOUS /;"	d	file:
MAP_ANONYMOUS	Lib/Platform/POSIX/Thread.cpp	/^#define MAP_ANONYMOUS /;"	d	file:
MAP_STACK_FLAGS	Lib/Platform/POSIX/Thread.cpp	/^#define MAP_STACK_FLAGS /;"	d	file:
MEM_MODULE	Include/WAVM/Inline/xxhash/xxhash.c	/^# define MEM_MODULE$/;"	d	file:
Machine	Include/WAVM/NFA/NFA.h	/^		Machine() : stateAndOffsetToNextStateMap(nullptr), numClasses(0), numStates(0) {}$/;"	f	struct:WAVM::NFA::Machine
Machine	Include/WAVM/NFA/NFA.h	/^		Machine(Machine&& inMachine) { moveFrom(std::move(inMachine)); }$/;"	f	struct:WAVM::NFA::Machine
Machine	Include/WAVM/NFA/NFA.h	/^	struct NFA_API Machine$/;"	s	namespace:WAVM::NFA
Machine	Lib/NFA/NFA.cpp	/^NFA::Machine::Machine(Builder* builder)$/;"	f	class:NFA::Machine
MaxAligned	ThirdParty/libunwind/test/alignment.pass.cpp	/^struct MaxAligned {} __attribute__((__aligned__));$/;"	s	file:
Memory	Include/WAVM/Runtime/Intrinsics.h	/^	struct Memory$/;"	s	namespace:WAVM::Intrinsics
Memory	Lib/Runtime/Intrinsics.cpp	/^Intrinsics::Memory::Memory(Intrinsics::Module& moduleRef,$/;"	f	class:Intrinsics::Memory
Memory	Lib/Runtime/RuntimePrivate.h	/^		Memory(Compartment* inCompartment, const IR::MemoryType& inType, std::string&& inDebugName)$/;"	f	struct:WAVM::Runtime::Memory
Memory	Lib/Runtime/RuntimePrivate.h	/^	struct Memory : GCObject$/;"	s	namespace:WAVM::Runtime
MemoryAccess	Include/WAVM/Platform/Memory.h	/^	enum class MemoryAccess$/;"	c	namespace:WAVM::Platform
MemoryBinding	Include/WAVM/LLVMJIT/LLVMJIT.h	/^	struct MemoryBinding$/;"	s	namespace:WAVM::LLVMJIT
MemoryCopyImm	Include/WAVM/IR/Operators.h	/^	struct MemoryCopyImm$/;"	s	namespace:WAVM::IR
MemoryDef	Include/WAVM/IR/Module.h	/^	struct MemoryDef$/;"	s	class:WAVM::IR::Opcode
MemoryImm	Include/WAVM/IR/Operators.h	/^	struct MemoryImm$/;"	s	namespace:WAVM::IR
MemoryImport	Include/WAVM/IR/Module.h	/^	typedef Import<MemoryType> MemoryImport;$/;"	t	class:WAVM::IR::Opcode
MemoryInputStream	Include/WAVM/Inline/Serialization.h	/^		MemoryInputStream(const U8* begin, Uptr numBytes) : InputStream(begin, begin + numBytes) {}$/;"	f	struct:WAVM::Serialization::MemoryInputStream
MemoryInputStream	Include/WAVM/Inline/Serialization.h	/^	struct MemoryInputStream : InputStream$/;"	s	namespace:WAVM::Serialization
MemoryType	Include/WAVM/IR/Types.h	/^		MemoryType() : isShared(false), size({0, UINT64_MAX}) {}$/;"	f	struct:WAVM::IR::ValueType::MemoryType
MemoryType	Include/WAVM/IR/Types.h	/^		MemoryType(bool inIsShared, const SizeConstraints& inSize)$/;"	f	struct:WAVM::IR::ValueType::MemoryType
MemoryType	Include/WAVM/IR/Types.h	/^	struct MemoryType$/;"	s	class:WAVM::IR::ValueType
MissingImport	Include/WAVM/Runtime/Linker.h	/^		struct MissingImport$/;"	s	struct:WAVM::Runtime::LinkResult
Module	Include/WAVM/IR/Module.h	/^		Module() : startFunctionIndex(UINTPTR_MAX) {}$/;"	f	struct:WAVM::IR::Opcode::Elem::Module
Module	Include/WAVM/IR/Module.h	/^		Module(const FeatureSpec& inFeatureSpec)$/;"	f	struct:WAVM::IR::Opcode::Elem::Module
Module	Include/WAVM/IR/Module.h	/^	struct Module$/;"	s	struct:WAVM::IR::Opcode::Elem
Module	Include/WAVM/Runtime/Intrinsics.h	/^	struct Module$/;"	s	namespace:WAVM::Intrinsics
Module	Lib/LLVMJIT/LLVMJITPrivate.h	/^	struct Module$/;"	s	namespace:WAVM::LLVMJIT
Module	Lib/LLVMJIT/LLVMModule.cpp	/^Module::Module(const std::vector<U8>& objectBytes,$/;"	f	class:Module
Module	Lib/Runtime/RuntimePrivate.h	/^		Module(IR::Module&& inIR, std::vector<U8>&& inObjectCode)$/;"	f	struct:WAVM::Runtime::Module
Module	Lib/Runtime/RuntimePrivate.h	/^	struct Module$/;"	s	namespace:WAVM::Runtime
ModuleAction	Include/WAVM/WASTParse/TestScript.h	/^		ModuleAction(TextFileLocus&& inLocus,$/;"	f	struct:WAVM::WAST::ModuleAction
ModuleAction	Include/WAVM/WASTParse/TestScript.h	/^	struct ModuleAction : Action$/;"	s	namespace:WAVM::WAST
ModuleConstRef	Include/WAVM/Runtime/Runtime.h	/^	typedef std::shared_ptr<const Module> ModuleConstRef;$/;"	t	namespace:WAVM::Runtime
ModuleConstRefParam	Include/WAVM/Runtime/Runtime.h	/^	typedef const std::shared_ptr<const Module>& ModuleConstRefParam;$/;"	t	namespace:WAVM::Runtime
ModuleExportResolver	Include/WAVM/Runtime/Linker.h	/^		ModuleExportResolver(const IR::Module& inModule, ModuleInstance* inModuleInstance)$/;"	f	struct:WAVM::Runtime::ModuleExportResolver
ModuleExportResolver	Include/WAVM/Runtime/Linker.h	/^	struct ModuleExportResolver : Resolver$/;"	s	namespace:WAVM::Runtime
ModuleImpl	Lib/Runtime/Intrinsics.cpp	/^	struct ModuleImpl$/;"	s	namespace:WAVM::Intrinsics	file:
ModuleInstance	Lib/Runtime/RuntimePrivate.h	/^		ModuleInstance(Compartment* inCompartment,$/;"	f	struct:WAVM::Runtime::ModuleInstance
ModuleInstance	Lib/Runtime/RuntimePrivate.h	/^	struct ModuleInstance : GCObject$/;"	s	namespace:WAVM::Runtime
ModuleInstanceBinding	Include/WAVM/LLVMJIT/LLVMJIT.h	/^	struct ModuleInstanceBinding$/;"	s	namespace:WAVM::LLVMJIT
ModuleMatcher	Test/fuzz/ModuleMatcher.h	/^		ModuleMatcher(const Module& inA, const Module& inB) : aModule(inA), bModule(inB) {}$/;"	f	struct:WAVM::ModuleMatcher
ModuleMatcher	Test/fuzz/ModuleMatcher.h	/^	struct ModuleMatcher$/;"	s	namespace:WAVM
ModuleMemoryManager	Lib/LLVMJIT/LLVMModule.cpp	/^	ModuleMemoryManager()$/;"	f	struct:LLVMJIT::ModuleMemoryManager
ModuleMemoryManager	Lib/LLVMJIT/LLVMModule.cpp	/^struct LLVMJIT::ModuleMemoryManager : llvm::RTDyldMemoryManager$/;"	s	class:LLVMJIT	file:
ModulePrintContext	Lib/WASTPrint/Print.cpp	/^	ModulePrintContext(const Module& inModule, std::string& inString)$/;"	f	struct:ModulePrintContext
ModulePrintContext	Lib/WASTPrint/Print.cpp	/^struct ModulePrintContext$/;"	s	file:
ModulePtr	Include/WAVM/Emscripten/Interface.h	/^    typedef void* ModulePtr;$/;"	t
ModuleRef	Include/WAVM/Runtime/Runtime.h	/^	typedef std::shared_ptr<Module> ModuleRef;$/;"	t	namespace:WAVM::Runtime
ModuleRefParam	Include/WAVM/Runtime/Runtime.h	/^	typedef const std::shared_ptr<Module>& ModuleRefParam;$/;"	t	namespace:WAVM::Runtime
ModuleState	Lib/WASTParse/Parse.h	/^		ModuleState(ParseState* inParseState, IR::Module& inModule)$/;"	f	struct:WAVM::WAST::ModuleState
ModuleState	Lib/WASTParse/Parse.h	/^	struct ModuleState$/;"	s	namespace:WAVM::WAST
MutableGlobals	Lib/Emscripten/Emscripten.cpp	/^struct MutableGlobals$/;"	s	file:
Mutex	Include/WAVM/Platform/Mutex.h	/^	struct Mutex$/;"	s	namespace:WAVM::Platform
Mutex	Lib/Platform/POSIX/Mutex.cpp	/^Platform::Mutex::Mutex()$/;"	f	class:Platform::Mutex
Mutex	Lib/Platform/Windows/Mutex.cpp	/^Platform::Mutex::Mutex()$/;"	f	class:Platform::Mutex
NAN_WORD0	ThirdParty/dtoa/dtoa.c	/^#define NAN_WORD0 /;"	d	file:
NAN_WORD1	ThirdParty/dtoa/dtoa.c	/^#define NAN_WORD1 /;"	d	file:
NEVER_HERE	ThirdParty/libunwind/src/Unwind_AppleExtras.cpp	/^  #define NEVER_HERE(/;"	d	file:
NFA	Include/WAVM/NFA/NFA.h	/^namespace WAVM { namespace NFA {$/;"	n	namespace:WAVM
NFA	Lib/NFA/NFA.cpp	/^namespace WAVM { namespace NFA {$/;"	n	namespace:WAVM	file:
NFAState	Lib/NFA/NFA.cpp	/^struct NFAState$/;"	s	file:
NOMINMAX	Lib/Platform/Windows/Clock.cpp	/^#define NOMINMAX$/;"	d	file:
NOMINMAX	Lib/Platform/Windows/Diagnostics.cpp	/^#define NOMINMAX$/;"	d	file:
NOMINMAX	Lib/Platform/Windows/Event.cpp	/^#define NOMINMAX$/;"	d	file:
NOMINMAX	Lib/Platform/Windows/File.cpp	/^#define NOMINMAX$/;"	d	file:
NOMINMAX	Lib/Platform/Windows/Memory.cpp	/^#define NOMINMAX$/;"	d	file:
NOMINMAX	Lib/Platform/Windows/Mutex.cpp	/^#define NOMINMAX$/;"	d	file:
NOMINMAX	Lib/Platform/Windows/Signal.cpp	/^#define NOMINMAX$/;"	d	file:
NOMINMAX	Lib/Platform/Windows/Thread.cpp	/^#define NOMINMAX$/;"	d	file:
NOMINMAX	Lib/Platform/Windows/WindowsPrivate.h	/^#define NOMINMAX$/;"	d
NONE	Include/WAVM/IR/OperatorTable.h	/^#define NONE /;"	d
NOT_HERE_BEFORE_10_6	ThirdParty/libunwind/src/Unwind_AppleExtras.cpp	/^  #define NOT_HERE_BEFORE_10_6(/;"	d	file:
NOT_HERE_BEFORE_5_0	ThirdParty/libunwind/src/Unwind_AppleExtras.cpp	/^   #define NOT_HERE_BEFORE_5_0(/;"	d	file:
NO_ASAN	Include/WAVM/Platform/Defines.h	/^#define NO_ASAN /;"	d
NO_ASAN	Include/WAVM/Platform/Defines.h	/^#define NO_ASAN$/;"	d
NO_EXEC_STACK_DIRECTIVE	ThirdParty/libunwind/src/UnwindRegistersRestore.S	/^NO_EXEC_STACK_DIRECTIVE$/;"	l
NO_EXEC_STACK_DIRECTIVE	ThirdParty/libunwind/src/UnwindRegistersSave.S	/^NO_EXEC_STACK_DIRECTIVE$/;"	l
NO_EXEC_STACK_DIRECTIVE	ThirdParty/libunwind/src/assembly.h	/^#define NO_EXEC_STACK_DIRECTIVE /;"	d
NO_EXEC_STACK_DIRECTIVE	ThirdParty/libunwind/src/assembly.h	/^#define NO_EXEC_STACK_DIRECTIVE$/;"	d
NO_INFNAN_CHECK	Lib/WASTParse/ParseNumbers.cpp	/^#define NO_INFNAN_CHECK$/;"	d	file:
NO_INFNAN_CHECK	Lib/WASTParse/ParseNumbers.cpp	/^#undef NO_INFNAN_CHECK$/;"	d	file:
NO_STRTOD_BIGCOMP	Lib/WASTParse/ParseNumbers.cpp	/^#undef NO_STRTOD_BIGCOMP$/;"	d	file:
NO_STRTOD_BIGCOMP	ThirdParty/dtoa/dtoa.c	/^#define NO_STRTOD_BIGCOMP$/;"	d	file:
NO_UBSAN	Include/WAVM/Platform/Defines.h	/^#define NO_UBSAN /;"	d
NO_UBSAN	Include/WAVM/Platform/Defines.h	/^#define NO_UBSAN$/;"	d
NULLARY	Include/WAVM/IR/OperatorTable.h	/^#define NULLARY(/;"	d
NUM_FRAMES_UPPER_BOUND	ThirdParty/libunwind/test/libunwind_02.pass.cpp	/^#define NUM_FRAMES_UPPER_BOUND /;"	d	file:
Name	Lib/WASTParse/Parse.h	/^		Name(const char* inBegin, U32 inNumChars, U32 inSourceOffset)$/;"	f	struct:WAVM::WAST::Name
Name	Lib/WASTParse/Parse.h	/^		constexpr Name() : begin(nullptr), numChars(0), sourceOffset(0) {}$/;"	f	struct:WAVM::WAST::Name
Name	Lib/WASTParse/Parse.h	/^	struct Name$/;"	s	namespace:WAVM::WAST
NameScope	Lib/WASTPrint/Print.cpp	/^	NameScope(const char inSigil, bool inAllowQuotedNames, Uptr estimatedNumElements)$/;"	f	struct:NameScope
NameScope	Lib/WASTPrint/Print.cpp	/^struct NameScope$/;"	s	file:
NameSubsectionType	Lib/IR/DisassemblyNames.cpp	/^enum class NameSubsectionType : U8$/;"	c	file:
NameToIndexMap	Lib/WASTParse/Parse.h	/^	typedef HashMap<Name, Uptr, Name::HashPolicy> NameToIndexMap;$/;"	t	namespace:WAVM::WAST
Nbits	ThirdParty/dtoa/dtoa.c	/^#define Nbits /;"	d	file:
Need_Hexdig	ThirdParty/dtoa/dtoa.c	/^#define Need_Hexdig$/;"	d	file:
Need_Hexdig	ThirdParty/dtoa/dtoa.c	/^#undef Need_Hexdig$/;"	d	file:
NoImm	Include/WAVM/IR/Operators.h	/^	struct NoImm$/;"	s	namespace:WAVM::IR
Node	Lib/RegExp/RegExp.cpp	/^	Node(NodeType inType) : type(inType) {}$/;"	f	struct:Node
Node	Lib/RegExp/RegExp.cpp	/^struct Node$/;"	s	file:
NodeType	Lib/RegExp/RegExp.cpp	/^enum class NodeType : U8$/;"	c	file:
NonParametricOpSignatures	Include/WAVM/IR/Operators.h	/^	struct NonParametricOpSignatures$/;"	s	namespace:WAVM::IR
NopFunctionPointer	Test/Benchmarks/invoke-bench.cpp	/^typedef ContextAndResult<I32> (*NopFunctionPointer)(ContextRuntimeData*);$/;"	t	file:
NullResolver	Include/WAVM/Runtime/Linker.h	/^	struct NullResolver : Resolver$/;"	s	namespace:WAVM::Runtime
Object	Include/WAVM/Runtime/RuntimeData.h	/^	struct Object$/;"	s	namespace:WAVM::Runtime
ObjectKind	Include/WAVM/Runtime/RuntimeData.h	/^	enum class ObjectKind : U8$/;"	c	namespace:WAVM::Runtime
OneOrMore	Lib/RegExp/RegExp.cpp	/^typedef Unary<NodeType::oneOrMore> OneOrMore;$/;"	t	file:
Opcode	Include/WAVM/IR/Module.h	/^	enum class Opcode : U16;$/;"	c	namespace:WAVM::IR
Opcode	Include/WAVM/IR/Operators.h	/^	enum class Opcode : U16$/;"	c	namespace:WAVM::IR
OpcodeAndImm	Include/WAVM/IR/Operators.h	/^	template<> struct OpcodeAndImm<NoImm>$/;"	s	namespace:WAVM::IR
OperatorDecoderStream	Include/WAVM/IR/Operators.h	/^		OperatorDecoderStream(const std::vector<U8>& codeBytes)$/;"	f	struct:WAVM::IR::OperatorDecoderStream
OperatorDecoderStream	Include/WAVM/IR/Operators.h	/^	struct OperatorDecoderStream$/;"	s	namespace:WAVM::IR
OperatorEmitFunc	Include/WAVM/Emscripten/gas-visit-context.h	/^typedef void OperatorEmitFunc(CodeStream*);$/;"	t
OperatorEmitFunc	Test/fuzz/fuzz-compile-model.cpp	/^typedef void OperatorEmitFunc(RandomStream&, IR::Module&, CodeStream&);$/;"	t	file:
OperatorEncoderStream	Include/WAVM/IR/Operators.h	/^		OperatorEncoderStream(Serialization::OutputStream& inByteStream) : byteStream(inByteStream)$/;"	f	struct:WAVM::IR::OperatorEncoderStream
OperatorEncoderStream	Include/WAVM/IR/Operators.h	/^	struct OperatorEncoderStream$/;"	s	namespace:WAVM::IR
OperatorInfo	Test/fuzz/fuzz-compile-model.cpp	/^struct OperatorInfo$/;"	s	file:
OperatorPrinter	Include/WAVM/IR/OperatorPrinter.h	/^		OperatorPrinter(const Module& inModule, const FunctionDef& inFunctionDef)$/;"	f	struct:WAVM::IR::OperatorPrinter
OperatorPrinter	Include/WAVM/IR/OperatorPrinter.h	/^	struct OperatorPrinter$/;"	s	namespace:WAVM::IR
OperatorSerializerStream	Lib/WASM/WASMSerialization.cpp	/^	OperatorSerializerStream(Serialization::OutputStream& inByteStream, FunctionDef& inFunctionDef)$/;"	f	struct:OperatorSerializerStream
OperatorSerializerStream	Lib/WASM/WASMSerialization.cpp	/^struct OperatorSerializerStream$/;"	s	file:
OperatorStreamProxy	Include/WAVM/Emscripten/insert-imported-context.h	/^    OperatorStreamProxy(InnerStream* inInnerStream) : innerStream(inInnerStream) {}$/;"	f	struct:OperatorStreamProxy
OperatorStreamProxy	Include/WAVM/Emscripten/insert-imported-context.h	/^template<typename InnerStream> struct OperatorStreamProxy$/;"	s
Optional	Lib/RegExp/RegExp.cpp	/^typedef Unary<NodeType::optional> Optional;$/;"	t	file:
OptionalStorage	Include/WAVM/Inline/OptionalStorage.h	/^		OptionalStorage() {}$/;"	f	struct:WAVM::OptionalStorage
OptionalStorage	Include/WAVM/Inline/OptionalStorage.h	/^		OptionalStorage(Args&&... args) : contents(std::forward<Args>(args)...)$/;"	f	struct:WAVM::OptionalStorage
OptionalStorage	Include/WAVM/Inline/OptionalStorage.h	/^	struct OptionalStorage$/;"	s	namespace:WAVM
OptionalStorage	Include/WAVM/Inline/OptionalStorage.h	/^	template<typename Contents> struct OptionalStorage<Contents, true>$/;"	s	namespace:WAVM
OutputStream	Include/WAVM/Inline/Serialization.h	/^		OutputStream() : next(nullptr), end(nullptr) {}$/;"	f	struct:WAVM::Serialization::OutputStream
OutputStream	Include/WAVM/Inline/Serialization.h	/^	struct OutputStream$/;"	s	namespace:WAVM::Serialization
P	ThirdParty/dtoa/dtoa.c	/^#define P /;"	d	file:
PACKED_STRUCT	Include/WAVM/Platform/Defines.h	/^#define PACKED_STRUCT(/;"	d
PHIVector	Lib/LLVMJIT/LLVMJITPrivate.h	/^	typedef llvm::SmallVector<llvm::PHINode*, 1> PHIVector;$/;"	t	namespace:WAVM::LLVMJIT
PLATFORM_ID	output/CMakeFiles/3.13.2/CompilerIdC/CMakeCCompilerId.c	/^#  define PLATFORM_ID /;"	d	file:
PLATFORM_ID	output/CMakeFiles/3.13.2/CompilerIdC/CMakeCCompilerId.c	/^#  define PLATFORM_ID$/;"	d	file:
PLATFORM_ID	output/CMakeFiles/3.13.2/CompilerIdC/CMakeCCompilerId.c	/^# define PLATFORM_ID /;"	d	file:
PLATFORM_ID	output/CMakeFiles/3.13.2/CompilerIdC/CMakeCCompilerId.c	/^# define PLATFORM_ID$/;"	d	file:
PLATFORM_ID	output/CMakeFiles/3.13.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define PLATFORM_ID /;"	d	file:
PLATFORM_ID	output/CMakeFiles/3.13.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define PLATFORM_ID$/;"	d	file:
PLATFORM_ID	output/CMakeFiles/3.13.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define PLATFORM_ID /;"	d	file:
PLATFORM_ID	output/CMakeFiles/3.13.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define PLATFORM_ID$/;"	d	file:
POISON_FORKED_STACK_SELF_POINTERS	Lib/Platform/Windows/Thread.cpp	/^#define POISON_FORKED_STACK_SELF_POINTERS /;"	d	file:
POP_DISABLE_WARNINGS_FOR_LLVM_HEADERS	Lib/LLVMJIT/LLVMJITPrivate.h	/^#define POP_DISABLE_WARNINGS_FOR_LLVM_HEADERS /;"	d
POP_DISABLE_WARNINGS_FOR_LLVM_HEADERS	Lib/LLVMJIT/LLVMJITPrivate.h	/^#define POP_DISABLE_WARNINGS_FOR_LLVM_HEADERS$/;"	d
PPC64_CLVS_BOTTOM	ThirdParty/libunwind/src/UnwindRegistersRestore.S	/^#define PPC64_CLVS_BOTTOM(n)               \\$/;"	d
PPC64_CLVSh	ThirdParty/libunwind/src/UnwindRegistersRestore.S	/^#define PPC64_CLVSh(n)           \\$/;"	d
PPC64_CLVSl	ThirdParty/libunwind/src/UnwindRegistersRestore.S	/^#define PPC64_CLVSl(n)           \\$/;"	d
PPC64_CLV_UNALIGNED_BOTTOM	ThirdParty/libunwind/src/UnwindRegistersRestore.S	/^#define PPC64_CLV_UNALIGNED_BOTTOM(n)            \\$/;"	d
PPC64_CLV_UNALIGNEDh	ThirdParty/libunwind/src/UnwindRegistersRestore.S	/^#define PPC64_CLV_UNALIGNEDh(n)  \\$/;"	d
PPC64_CLV_UNALIGNEDl	ThirdParty/libunwind/src/UnwindRegistersRestore.S	/^#define PPC64_CLV_UNALIGNEDl(n)  \\$/;"	d
PPC64_HAS_VMX	ThirdParty/libunwind/src/assembly.h	/^#define PPC64_HAS_VMX$/;"	d
PPC64_HAS_VMX	ThirdParty/libunwind/src/config.h	/^#define PPC64_HAS_VMX$/;"	d
PPC64_LF	ThirdParty/libunwind/src/UnwindRegistersRestore.S	/^#define PPC64_LF(n) \\$/;"	d
PPC64_LR	ThirdParty/libunwind/src/UnwindRegistersRestore.S	/^#define PPC64_LR(n) \\$/;"	d
PPC64_LVS	ThirdParty/libunwind/src/UnwindRegistersRestore.S	/^#define PPC64_LVS(n)         \\$/;"	d
PPC64_OFFS_CR	ThirdParty/libunwind/src/assembly.h	/^#define PPC64_OFFS_CR /;"	d
PPC64_OFFS_CTR	ThirdParty/libunwind/src/assembly.h	/^#define PPC64_OFFS_CTR /;"	d
PPC64_OFFS_FP	ThirdParty/libunwind/src/assembly.h	/^#define PPC64_OFFS_FP /;"	d
PPC64_OFFS_LR	ThirdParty/libunwind/src/assembly.h	/^#define PPC64_OFFS_LR /;"	d
PPC64_OFFS_SRR0	ThirdParty/libunwind/src/assembly.h	/^#define PPC64_OFFS_SRR0 /;"	d
PPC64_OFFS_V	ThirdParty/libunwind/src/assembly.h	/^#define PPC64_OFFS_V /;"	d
PPC64_OFFS_VRSAVE	ThirdParty/libunwind/src/assembly.h	/^#define PPC64_OFFS_VRSAVE /;"	d
PPC64_OFFS_XER	ThirdParty/libunwind/src/assembly.h	/^#define PPC64_OFFS_XER /;"	d
PPC64_STF	ThirdParty/libunwind/src/UnwindRegistersSave.S	/^#define PPC64_STF(n) \\$/;"	d
PPC64_STR	ThirdParty/libunwind/src/UnwindRegistersSave.S	/^#define PPC64_STR(n) \\$/;"	d
PPC64_STVS	ThirdParty/libunwind/src/UnwindRegistersSave.S	/^#define PPC64_STVS(n)      \\$/;"	d
PPC64_STV_UNALIGNED	ThirdParty/libunwind/src/UnwindRegistersSave.S	/^#define PPC64_STV_UNALIGNED(n)                 \\$/;"	d
PRIME32_1	Include/WAVM/Inline/xxhash/xxhash.c	/^static const U32 PRIME32_1 = 2654435761U;$/;"	v	file:
PRIME32_2	Include/WAVM/Inline/xxhash/xxhash.c	/^static const U32 PRIME32_2 = 2246822519U;$/;"	v	file:
PRIME32_3	Include/WAVM/Inline/xxhash/xxhash.c	/^static const U32 PRIME32_3 = 3266489917U;$/;"	v	file:
PRIME32_4	Include/WAVM/Inline/xxhash/xxhash.c	/^static const U32 PRIME32_4 =  668265263U;$/;"	v	file:
PRIME32_5	Include/WAVM/Inline/xxhash/xxhash.c	/^static const U32 PRIME32_5 =  374761393U;$/;"	v	file:
PRIME64_1	Include/WAVM/Inline/xxhash/xxhash.c	/^static const U64 PRIME64_1 = 11400714785074694791ULL;$/;"	v	file:
PRIME64_2	Include/WAVM/Inline/xxhash/xxhash.c	/^static const U64 PRIME64_2 = 14029467366897019727ULL;$/;"	v	file:
PRIME64_3	Include/WAVM/Inline/xxhash/xxhash.c	/^static const U64 PRIME64_3 =  1609587929392839161ULL;$/;"	v	file:
PRIME64_4	Include/WAVM/Inline/xxhash/xxhash.c	/^static const U64 PRIME64_4 =  9650029242287828579ULL;$/;"	v	file:
PRIME64_5	Include/WAVM/Inline/xxhash/xxhash.c	/^static const U64 PRIME64_5 =  2870177450012600261ULL;$/;"	v	file:
PRINT_DISASSEMBLY	Lib/LLVMJIT/LLVMModule.cpp	/^#define PRINT_DISASSEMBLY /;"	d	file:
PRINT_OP	Lib/WASTPrint/Print.cpp	/^#define PRINT_OP(/;"	d	file:
PRINT_SEH_TABLES	Lib/LLVMJIT/Win64EH.cpp	/^#define PRINT_SEH_TABLES /;"	d	file:
PRIVATE_MEM	ThirdParty/dtoa/dtoa.c	/^#define PRIVATE_MEM /;"	d	file:
PRIVATE_mem	ThirdParty/dtoa/dtoa.c	/^#define PRIVATE_mem /;"	d	file:
PRIuPTR	Include/WAVM/Inline/BasicTypes.h	/^#define PRIuPTR /;"	d
PRIuPTR	Include/WAVM/Inline/BasicTypes.h	/^#undef PRIuPTR$/;"	d
PRIxPTR	Include/WAVM/Inline/BasicTypes.h	/^#define PRIxPTR /;"	d
PRIxPTR	Include/WAVM/Inline/BasicTypes.h	/^#undef PRIxPTR$/;"	d
PROCESS1	Include/WAVM/Inline/xxhash/xxhash.c	/^#define PROCESS1 /;"	d	file:
PROCESS1_64	Include/WAVM/Inline/xxhash/xxhash.c	/^#define PROCESS1_64 /;"	d	file:
PROCESS4	Include/WAVM/Inline/xxhash/xxhash.c	/^#define PROCESS4 /;"	d	file:
PROCESS4_64	Include/WAVM/Inline/xxhash/xxhash.c	/^#define PROCESS4_64 /;"	d	file:
PROCESS8_64	Include/WAVM/Inline/xxhash/xxhash.c	/^#define PROCESS8_64 /;"	d	file:
PTR	ThirdParty/libunwind/src/UnwindRegistersSave.S	/^#define PTR %rcx$/;"	d
PTR	ThirdParty/libunwind/src/UnwindRegistersSave.S	/^#define PTR %rdi$/;"	d
PUSH_DISABLE_WARNINGS_FOR_LLVM_HEADERS	Lib/LLVMJIT/LLVMJITPrivate.h	/^#define PUSH_DISABLE_WARNINGS_FOR_LLVM_HEADERS /;"	d
PUSH_DISABLE_WARNINGS_FOR_LLVM_HEADERS	Lib/LLVMJIT/LLVMJITPrivate.h	/^#define PUSH_DISABLE_WARNINGS_FOR_LLVM_HEADERS$/;"	d
Pack_32	ThirdParty/dtoa/dtoa.c	/^#define Pack_32$/;"	d	file:
Pack_32	ThirdParty/dtoa/dtoa.c	/^#undef Pack_32$/;"	d	file:
Pair	Include/WAVM/Inline/HashMap.h	/^		typedef HashMapPair<Key, Value> Pair;$/;"	t	struct:WAVM::HashMap
Pair	Include/WAVM/Inline/HashMap.h	/^		typedef HashMapPair<Key, Value> Pair;$/;"	t	struct:WAVM::HashMapIterator
ParseState	Lib/WASTParse/Parse.h	/^		ParseState(const char* inString, const LineInfo* inLineInfo)$/;"	f	struct:WAVM::WAST::ParseState
ParseState	Lib/WASTParse/Parse.h	/^	struct ParseState$/;"	s	namespace:WAVM::WAST
PassiveDataSegmentMap	Lib/Runtime/RuntimePrivate.h	/^	typedef HashMap<Uptr, std::shared_ptr<std::vector<U8>>> PassiveDataSegmentMap;$/;"	t	namespace:WAVM::Runtime
PassiveElemSegmentMap	Lib/Runtime/RuntimePrivate.h	/^	typedef HashMap<Uptr, std::shared_ptr<std::vector<Object*>>> PassiveElemSegmentMap;$/;"	t	namespace:WAVM::Runtime
Platform	Include/WAVM/Platform/Clock.h	/^namespace WAVM { namespace Platform {$/;"	n	namespace:WAVM
Platform	Include/WAVM/Platform/Diagnostics.h	/^namespace WAVM { namespace Platform {$/;"	n	namespace:WAVM
Platform	Include/WAVM/Platform/Event.h	/^namespace WAVM { namespace Platform {$/;"	n	namespace:WAVM
Platform	Include/WAVM/Platform/File.h	/^namespace WAVM { namespace Platform {$/;"	n	namespace:WAVM
Platform	Include/WAVM/Platform/Intrinsic.h	/^namespace WAVM { namespace Platform {$/;"	n	namespace:WAVM
Platform	Include/WAVM/Platform/Memory.h	/^namespace WAVM { namespace Platform {$/;"	n	namespace:WAVM
Platform	Include/WAVM/Platform/Mutex.h	/^namespace WAVM { namespace Platform {$/;"	n	namespace:WAVM
Platform	Include/WAVM/Platform/Signal.h	/^namespace WAVM { namespace Platform {$/;"	n	namespace:WAVM
Platform	Include/WAVM/Platform/Thread.h	/^namespace WAVM { namespace Platform {$/;"	n	namespace:WAVM
Platform	Lib/Platform/POSIX/POSIXPrivate.h	/^namespace WAVM { namespace Platform {$/;"	n	namespace:WAVM
Platform	Lib/Platform/Windows/WindowsPrivate.h	/^namespace WAVM { namespace Platform {$/;"	n	namespace:WAVM
Process	Lib/WASI/WASI.cpp	/^	struct Process$/;"	s	namespace:WAVM::WASI	file:
ProcessDescriptors	ThirdParty/libunwind/src/Unwind-EHABI.cpp	/^_Unwind_Reason_Code ProcessDescriptors($/;"	f	namespace:__anon79
ProcessResolver	Lib/WASI/WASI.cpp	/^struct ProcessResolver : Resolver$/;"	s	file:
ProcessorGroupInfo	Lib/Platform/Windows/Thread.cpp	/^struct ProcessorGroupInfo$/;"	s	file:
PrologInfo	ThirdParty/libunwind/src/DwarfInstructions.hpp	/^  typedef typename CFI_Parser<A>::PrologInfo        PrologInfo;$/;"	t	class:libunwind::DwarfInstructions
PrologInfo	ThirdParty/libunwind/src/DwarfParser.hpp	/^  struct PrologInfo {$/;"	s	class:libunwind::CFI_Parser
PrologInfoStackEntry	ThirdParty/libunwind/src/DwarfParser.hpp	/^    PrologInfoStackEntry(PrologInfoStackEntry *n, const PrologInfo &i)$/;"	f	struct:libunwind::CFI_Parser::PrologInfoStackEntry
PrologInfoStackEntry	ThirdParty/libunwind/src/DwarfParser.hpp	/^  struct PrologInfoStackEntry {$/;"	s	class:libunwind::CFI_Parser
PthreadCond	Include/WAVM/Platform/Event.h	/^		struct PthreadCond$/;"	s	struct:WAVM::Platform::Event
PthreadMutex	Include/WAVM/Platform/Event.h	/^		struct PthreadMutex$/;"	s	struct:WAVM::Platform::Event
PthreadMutex	Include/WAVM/Platform/Mutex.h	/^		struct PthreadMutex$/;"	s	struct:WAVM::Platform::Mutex
Quick_max	ThirdParty/dtoa/dtoa.c	/^#define Quick_max /;"	d	file:
QuotedModuleType	Include/WAVM/WASTParse/TestScript.h	/^	enum class QuotedModuleType$/;"	c	namespace:WAVM::WAST
REGISTER_KIND	ThirdParty/libunwind/src/libunwind.cpp	/^# define REGISTER_KIND /;"	d	file:
REGISTER_KIND	ThirdParty/libunwind/src/libunwind.cpp	/^#undef REGISTER_KIND$/;"	d	file:
RESERVED0	ThirdParty/libunwind/src/Unwind-EHABI.cpp	/^    RESERVED0 =  4, RESERVED1 =  5, RESERVED2  = 6,  RESERVED3  =  7,$/;"	e	enum:__anon79::Descriptor::__anon80	file:
RESERVED1	ThirdParty/libunwind/src/Unwind-EHABI.cpp	/^    RESERVED0 =  4, RESERVED1 =  5, RESERVED2  = 6,  RESERVED3  =  7,$/;"	e	enum:__anon79::Descriptor::__anon80	file:
RESERVED10	ThirdParty/libunwind/src/Unwind-EHABI.cpp	/^    RESERVED8 = 12, RESERVED9 = 13, RESERVED10 = 14, RESERVED11 = 15$/;"	e	enum:__anon79::Descriptor::__anon80	file:
RESERVED11	ThirdParty/libunwind/src/Unwind-EHABI.cpp	/^    RESERVED8 = 12, RESERVED9 = 13, RESERVED10 = 14, RESERVED11 = 15$/;"	e	enum:__anon79::Descriptor::__anon80	file:
RESERVED2	ThirdParty/libunwind/src/Unwind-EHABI.cpp	/^    RESERVED0 =  4, RESERVED1 =  5, RESERVED2  = 6,  RESERVED3  =  7,$/;"	e	enum:__anon79::Descriptor::__anon80	file:
RESERVED3	ThirdParty/libunwind/src/Unwind-EHABI.cpp	/^    RESERVED0 =  4, RESERVED1 =  5, RESERVED2  = 6,  RESERVED3  =  7,$/;"	e	enum:__anon79::Descriptor::__anon80	file:
RESERVED4	ThirdParty/libunwind/src/Unwind-EHABI.cpp	/^    RESERVED4 =  8, RESERVED5 =  9, RESERVED6  = 10, RESERVED7  = 11,$/;"	e	enum:__anon79::Descriptor::__anon80	file:
RESERVED5	ThirdParty/libunwind/src/Unwind-EHABI.cpp	/^    RESERVED4 =  8, RESERVED5 =  9, RESERVED6  = 10, RESERVED7  = 11,$/;"	e	enum:__anon79::Descriptor::__anon80	file:
RESERVED6	ThirdParty/libunwind/src/Unwind-EHABI.cpp	/^    RESERVED4 =  8, RESERVED5 =  9, RESERVED6  = 10, RESERVED7  = 11,$/;"	e	enum:__anon79::Descriptor::__anon80	file:
RESERVED7	ThirdParty/libunwind/src/Unwind-EHABI.cpp	/^    RESERVED4 =  8, RESERVED5 =  9, RESERVED6  = 10, RESERVED7  = 11,$/;"	e	enum:__anon79::Descriptor::__anon80	file:
RESERVED8	ThirdParty/libunwind/src/Unwind-EHABI.cpp	/^    RESERVED8 = 12, RESERVED9 = 13, RESERVED10 = 14, RESERVED11 = 15$/;"	e	enum:__anon79::Descriptor::__anon80	file:
RESERVED9	ThirdParty/libunwind/src/Unwind-EHABI.cpp	/^    RESERVED8 = 12, RESERVED9 = 13, RESERVED10 = 14, RESERVED11 = 15$/;"	e	enum:__anon79::Descriptor::__anon80	file:
RETURNS_TWICE	Include/WAVM/Platform/Defines.h	/^#define RETURNS_TWICE /;"	d
RETURNS_TWICE	Include/WAVM/Platform/Defines.h	/^#define RETURNS_TWICE$/;"	d
RM	output/Examples/Makefile	/^RM = \/usr\/local\/Cellar\/cmake\/3.13.2\/bin\/cmake -E remove -f$/;"	m
RM	output/Include/WAVM/Inline/Makefile	/^RM = \/usr\/local\/Cellar\/cmake\/3.13.2\/bin\/cmake -E remove -f$/;"	m
RM	output/Include/WAVM/Inline/xxhash/Makefile	/^RM = \/usr\/local\/Cellar\/cmake\/3.13.2\/bin\/cmake -E remove -f$/;"	m
RM	output/Lib/Emscripten/Makefile	/^RM = \/usr\/local\/Cellar\/cmake\/3.13.2\/bin\/cmake -E remove -f$/;"	m
RM	output/Lib/IR/Makefile	/^RM = \/usr\/local\/Cellar\/cmake\/3.13.2\/bin\/cmake -E remove -f$/;"	m
RM	output/Lib/LLVMJIT/Makefile	/^RM = \/usr\/local\/Cellar\/cmake\/3.13.2\/bin\/cmake -E remove -f$/;"	m
RM	output/Lib/Logging/Makefile	/^RM = \/usr\/local\/Cellar\/cmake\/3.13.2\/bin\/cmake -E remove -f$/;"	m
RM	output/Lib/NFA/Makefile	/^RM = \/usr\/local\/Cellar\/cmake\/3.13.2\/bin\/cmake -E remove -f$/;"	m
RM	output/Lib/Platform/Makefile	/^RM = \/usr\/local\/Cellar\/cmake\/3.13.2\/bin\/cmake -E remove -f$/;"	m
RM	output/Lib/RegExp/Makefile	/^RM = \/usr\/local\/Cellar\/cmake\/3.13.2\/bin\/cmake -E remove -f$/;"	m
RM	output/Lib/Runtime/Makefile	/^RM = \/usr\/local\/Cellar\/cmake\/3.13.2\/bin\/cmake -E remove -f$/;"	m
RM	output/Lib/ThreadTest/Makefile	/^RM = \/usr\/local\/Cellar\/cmake\/3.13.2\/bin\/cmake -E remove -f$/;"	m
RM	output/Lib/WASI/Makefile	/^RM = \/usr\/local\/Cellar\/cmake\/3.13.2\/bin\/cmake -E remove -f$/;"	m
RM	output/Lib/WASM/Makefile	/^RM = \/usr\/local\/Cellar\/cmake\/3.13.2\/bin\/cmake -E remove -f$/;"	m
RM	output/Lib/WASTParse/Makefile	/^RM = \/usr\/local\/Cellar\/cmake\/3.13.2\/bin\/cmake -E remove -f$/;"	m
RM	output/Lib/WASTPrint/Makefile	/^RM = \/usr\/local\/Cellar\/cmake\/3.13.2\/bin\/cmake -E remove -f$/;"	m
RM	output/Lib/wavm-c/Makefile	/^RM = \/usr\/local\/Cellar\/cmake\/3.13.2\/bin\/cmake -E remove -f$/;"	m
RM	output/Makefile	/^RM = \/usr\/local\/Cellar\/cmake\/3.13.2\/bin\/cmake -E remove -f$/;"	m
RM	output/Programs/wavm-as/Makefile	/^RM = \/usr\/local\/Cellar\/cmake\/3.13.2\/bin\/cmake -E remove -f$/;"	m
RM	output/Programs/wavm-compile/Makefile	/^RM = \/usr\/local\/Cellar\/cmake\/3.13.2\/bin\/cmake -E remove -f$/;"	m
RM	output/Programs/wavm-disas/Makefile	/^RM = \/usr\/local\/Cellar\/cmake\/3.13.2\/bin\/cmake -E remove -f$/;"	m
RM	output/Programs/wavm-run-wasi/Makefile	/^RM = \/usr\/local\/Cellar\/cmake\/3.13.2\/bin\/cmake -E remove -f$/;"	m
RM	output/Programs/wavm-run/Makefile	/^RM = \/usr\/local\/Cellar\/cmake\/3.13.2\/bin\/cmake -E remove -f$/;"	m
RM	output/Test/Benchmarks/Makefile	/^RM = \/usr\/local\/Cellar\/cmake\/3.13.2\/bin\/cmake -E remove -f$/;"	m
RM	output/Test/Containers/Makefile	/^RM = \/usr\/local\/Cellar\/cmake\/3.13.2\/bin\/cmake -E remove -f$/;"	m
RM	output/Test/DumpTestModules/Makefile	/^RM = \/usr\/local\/Cellar\/cmake\/3.13.2\/bin\/cmake -E remove -f$/;"	m
RM	output/Test/Makefile	/^RM = \/usr\/local\/Cellar\/cmake\/3.13.2\/bin\/cmake -E remove -f$/;"	m
RM	output/Test/RunTestScript/Makefile	/^RM = \/usr\/local\/Cellar\/cmake\/3.13.2\/bin\/cmake -E remove -f$/;"	m
RM	output/Test/fuzz/Makefile	/^RM = \/usr\/local\/Cellar\/cmake\/3.13.2\/bin\/cmake -E remove -f$/;"	m
RM	output/Test/spec/Makefile	/^RM = \/usr\/local\/Cellar\/cmake\/3.13.2\/bin\/cmake -E remove -f$/;"	m
RM	output/Test/wavm-c/Makefile	/^RM = \/usr\/local\/Cellar\/cmake\/3.13.2\/bin\/cmake -E remove -f$/;"	m
RM	output/ThirdParty/bridge/Makefile	/^RM = \/usr\/local\/Cellar\/cmake\/3.13.2\/bin\/cmake -E remove -f$/;"	m
RM	output/ThirdParty/dtoa/Makefile	/^RM = \/usr\/local\/Cellar\/cmake\/3.13.2\/bin\/cmake -E remove -f$/;"	m
RM	output/ThirdParty/libunwind/Makefile	/^RM = \/usr\/local\/Cellar\/cmake\/3.13.2\/bin\/cmake -E remove -f$/;"	m
ROUND_BIASED	ThirdParty/dtoa/dtoa.c	/^#define ROUND_BIASED$/;"	d	file:
ROUND_BIASED	ThirdParty/dtoa/dtoa.c	/^#undef  ROUND_BIASED$/;"	d	file:
RWMutex	ThirdParty/libunwind/src/RWMutex.hpp	/^class _LIBUNWIND_HIDDEN RWMutex {$/;"	c	namespace:libunwind
RandomStream	Test/fuzz/fuzz-compile-model.cpp	/^	RandomStream(const U8* inData, Uptr numBytes)$/;"	f	struct:RandomStream
RandomStream	Test/fuzz/fuzz-compile-model.cpp	/^struct RandomStream$/;"	s	file:
RecoverParseException	Lib/WASTParse/Parse.h	/^	struct RecoverParseException$/;"	s	namespace:WAVM::WAST
Reference	Lib/WASTParse/Parse.h	/^		Reference() : type(Type::invalid), token(nullptr) {}$/;"	f	struct:WAVM::WAST::Reference
Reference	Lib/WASTParse/Parse.h	/^		Reference(Uptr inIndex) : type(Type::index), index(inIndex) {}$/;"	f	struct:WAVM::WAST::Reference
Reference	Lib/WASTParse/Parse.h	/^		Reference(const Name& inName) : type(Type::name), name(inName) {}$/;"	f	struct:WAVM::WAST::Reference
Reference	Lib/WASTParse/Parse.h	/^	struct Reference$/;"	s	namespace:WAVM::WAST
ReferenceType	Include/WAVM/IR/Types.h	/^	enum class ReferenceType : U8$/;"	c	class:WAVM::IR::ValueType
RegExp	Include/WAVM/RegExp/RegExp.h	/^namespace WAVM { namespace RegExp {$/;"	n	namespace:WAVM
RegisterCommand	Include/WAVM/WASTParse/TestScript.h	/^		RegisterCommand(TextFileLocus&& inLocus,$/;"	f	struct:WAVM::WAST::RegisterCommand
RegisterCommand	Include/WAVM/WASTParse/TestScript.h	/^	struct RegisterCommand : Command$/;"	s	namespace:WAVM::WAST
RegisterLocation	ThirdParty/libunwind/src/DwarfInstructions.hpp	/^  typedef typename CFI_Parser<A>::RegisterLocation  RegisterLocation;$/;"	t	class:libunwind::DwarfInstructions
RegisterLocation	ThirdParty/libunwind/src/DwarfParser.hpp	/^  struct RegisterLocation {$/;"	s	class:libunwind::CFI_Parser
RegisterMask	ThirdParty/libunwind/src/Unwind-EHABI.cpp	/^uint32_t RegisterMask(uint8_t start, uint8_t count_minus_one) {$/;"	f	namespace:__anon79
RegisterRange	ThirdParty/libunwind/src/Unwind-EHABI.cpp	/^uint32_t RegisterRange(uint8_t start, uint8_t count_minus_one) {$/;"	f	namespace:__anon79
RegisterSavedWhere	ThirdParty/libunwind/src/DwarfParser.hpp	/^  enum RegisterSavedWhere {$/;"	g	class:libunwind::CFI_Parser
Registers_arm	ThirdParty/libunwind/src/Registers.hpp	/^class _LIBUNWIND_HIDDEN Registers_arm {$/;"	c	namespace:libunwind
Registers_arm	ThirdParty/libunwind/src/Registers.hpp	/^inline Registers_arm::Registers_arm()$/;"	f	class:libunwind::Registers_arm
Registers_arm	ThirdParty/libunwind/src/Registers.hpp	/^inline Registers_arm::Registers_arm(const void *registers)$/;"	f	class:libunwind::Registers_arm
Registers_arm64	ThirdParty/libunwind/src/Registers.hpp	/^class _LIBUNWIND_HIDDEN Registers_arm64 {$/;"	c	namespace:libunwind
Registers_arm64	ThirdParty/libunwind/src/Registers.hpp	/^inline Registers_arm64::Registers_arm64() {$/;"	f	class:libunwind::Registers_arm64
Registers_arm64	ThirdParty/libunwind/src/Registers.hpp	/^inline Registers_arm64::Registers_arm64(const void *registers) {$/;"	f	class:libunwind::Registers_arm64
Registers_mips_newabi	ThirdParty/libunwind/src/Registers.hpp	/^class _LIBUNWIND_HIDDEN Registers_mips_newabi {$/;"	c	namespace:libunwind
Registers_mips_newabi	ThirdParty/libunwind/src/Registers.hpp	/^inline Registers_mips_newabi::Registers_mips_newabi() {$/;"	f	class:libunwind::Registers_mips_newabi
Registers_mips_newabi	ThirdParty/libunwind/src/Registers.hpp	/^inline Registers_mips_newabi::Registers_mips_newabi(const void *registers) {$/;"	f	class:libunwind::Registers_mips_newabi
Registers_mips_o32	ThirdParty/libunwind/src/Registers.hpp	/^class _LIBUNWIND_HIDDEN Registers_mips_o32 {$/;"	c	namespace:libunwind
Registers_mips_o32	ThirdParty/libunwind/src/Registers.hpp	/^inline Registers_mips_o32::Registers_mips_o32() {$/;"	f	class:libunwind::Registers_mips_o32
Registers_mips_o32	ThirdParty/libunwind/src/Registers.hpp	/^inline Registers_mips_o32::Registers_mips_o32(const void *registers) {$/;"	f	class:libunwind::Registers_mips_o32
Registers_or1k	ThirdParty/libunwind/src/Registers.hpp	/^class _LIBUNWIND_HIDDEN Registers_or1k {$/;"	c	namespace:libunwind
Registers_or1k	ThirdParty/libunwind/src/Registers.hpp	/^inline Registers_or1k::Registers_or1k() {$/;"	f	class:libunwind::Registers_or1k
Registers_or1k	ThirdParty/libunwind/src/Registers.hpp	/^inline Registers_or1k::Registers_or1k(const void *registers) {$/;"	f	class:libunwind::Registers_or1k
Registers_ppc	ThirdParty/libunwind/src/Registers.hpp	/^class _LIBUNWIND_HIDDEN Registers_ppc {$/;"	c	namespace:libunwind
Registers_ppc	ThirdParty/libunwind/src/Registers.hpp	/^inline Registers_ppc::Registers_ppc() {$/;"	f	class:libunwind::Registers_ppc
Registers_ppc	ThirdParty/libunwind/src/Registers.hpp	/^inline Registers_ppc::Registers_ppc(const void *registers) {$/;"	f	class:libunwind::Registers_ppc
Registers_ppc64	ThirdParty/libunwind/src/Registers.hpp	/^class _LIBUNWIND_HIDDEN Registers_ppc64 {$/;"	c	namespace:libunwind
Registers_ppc64	ThirdParty/libunwind/src/Registers.hpp	/^inline Registers_ppc64::Registers_ppc64() {$/;"	f	class:libunwind::Registers_ppc64
Registers_ppc64	ThirdParty/libunwind/src/Registers.hpp	/^inline Registers_ppc64::Registers_ppc64(const void *registers) {$/;"	f	class:libunwind::Registers_ppc64
Registers_x86	ThirdParty/libunwind/src/Registers.hpp	/^class _LIBUNWIND_HIDDEN Registers_x86 {$/;"	c	namespace:libunwind
Registers_x86	ThirdParty/libunwind/src/Registers.hpp	/^inline Registers_x86::Registers_x86() {$/;"	f	class:libunwind::Registers_x86
Registers_x86	ThirdParty/libunwind/src/Registers.hpp	/^inline Registers_x86::Registers_x86(const void *registers) {$/;"	f	class:libunwind::Registers_x86
Registers_x86_64	ThirdParty/libunwind/src/Registers.hpp	/^class _LIBUNWIND_HIDDEN Registers_x86_64 {$/;"	c	namespace:libunwind
Registers_x86_64	ThirdParty/libunwind/src/Registers.hpp	/^inline Registers_x86_64::Registers_x86_64() {$/;"	f	class:libunwind::Registers_x86_64
Registers_x86_64	ThirdParty/libunwind/src/Registers.hpp	/^inline Registers_x86_64::Registers_x86_64(const void *registers) {$/;"	f	class:libunwind::Registers_x86_64
RemoteAddressSpace	ThirdParty/libunwind/src/AddressSpace.hpp	/^  RemoteAddressSpace(task_t task) : fTask(task) {}$/;"	f	class:libunwind::RemoteAddressSpace
RemoteAddressSpace	ThirdParty/libunwind/src/AddressSpace.hpp	/^class RemoteAddressSpace {$/;"	c	namespace:libunwind
Resolver	Include/WAVM/Runtime/Linker.h	/^	struct Resolver$/;"	s	namespace:WAVM::Runtime
Result	Include/WAVM/Emscripten/gas-visit-context.h	/^    typedef void Result;$/;"	t	struct:GasVisitor
Result	Include/WAVM/Emscripten/insert-imported-context.h	/^    typedef void Result;$/;"	t	struct:OperatorStreamProxy
Result	Include/WAVM/IR/OperatorPrinter.h	/^		typedef std::string Result;$/;"	t	struct:WAVM::IR::OperatorPrinter
Result	Lib/LLVMJIT/EmitFunction.cpp	/^	typedef void Result;$/;"	t	struct:UnreachableOpVisitor	file:
Result	Lib/LLVMJIT/EmitFunctionContext.h	/^		typedef void Result;$/;"	t	struct:WAVM::LLVMJIT::EmitFunctionContext
Result	Lib/WASM/WASMSerialization.cpp	/^	typedef void Result;$/;"	t	struct:OperatorSerializerStream	file:
Result	Lib/WASTPrint/Print.cpp	/^	typedef void Result;$/;"	t	struct:FunctionPrintContext	file:
RethrowImm	Include/WAVM/IR/Operators.h	/^	struct RethrowImm$/;"	s	namespace:WAVM::IR
RootResolver	Lib/Emscripten/Interface.cpp	/^    RootResolver(Compartment* inCompartment): compartment(inCompartment){}$/;"	f	struct:RootResolver
RootResolver	Lib/Emscripten/Interface.cpp	/^struct RootResolver: Resolver$/;"	s	file:
RootResolver	Programs/wavm-run/wavm-run.cpp	/^	RootResolver(Compartment* inCompartment) : compartment(inCompartment) {}$/;"	f	struct:RootResolver
RootResolver	Programs/wavm-run/wavm-run.cpp	/^struct RootResolver : Resolver$/;"	s	file:
Rounding	ThirdParty/dtoa/dtoa.c	/^#define Rounding /;"	d	file:
RunResult	Include/WAVM/WASI/WASI.h	/^	enum class RunResult$/;"	c	namespace:WAVM::WASI
Runtime	Include/WAVM/Emscripten/xchain-service.h	/^namespace WAVM { namespace Runtime {$/;"	n	namespace:WAVM
Runtime	Include/WAVM/IR/Types.h	/^namespace WAVM { namespace Runtime {$/;"	n	namespace:WAVM
Runtime	Include/WAVM/IR/Value.h	/^namespace WAVM { namespace Runtime {$/;"	n	namespace:WAVM
Runtime	Include/WAVM/LLVMJIT/LLVMJIT.h	/^namespace WAVM { namespace Runtime {$/;"	n	namespace:WAVM
Runtime	Include/WAVM/Runtime/Intrinsics.h	/^namespace WAVM { namespace Runtime {$/;"	n	namespace:WAVM
Runtime	Include/WAVM/Runtime/Linker.h	/^namespace WAVM { namespace Runtime {$/;"	n	namespace:WAVM
Runtime	Include/WAVM/Runtime/Runtime.h	/^namespace WAVM { namespace Runtime {$/;"	n	namespace:WAVM
Runtime	Include/WAVM/Runtime/RuntimeData.h	/^namespace WAVM { namespace Runtime {$/;"	n	namespace:WAVM
Runtime	Include/WAVM/ThreadTest/ThreadTest.h	/^namespace WAVM { namespace Runtime {$/;"	n	namespace:WAVM
Runtime	Lib/LLVMJIT/LLVMModule.cpp	/^namespace WAVM { namespace Runtime {$/;"	n	namespace:WAVM	file:
Runtime	Lib/Runtime/RuntimePrivate.h	/^namespace WAVM { namespace Runtime {$/;"	n	namespace:WAVM
Runtime	Lib/Runtime/WAVMIntrinsics.cpp	/^namespace WAVM { namespace Runtime {$/;"	n	namespace:WAVM	file:
SAVE_VECTOR_UNALIGNED	ThirdParty/libunwind/src/UnwindRegistersSave.S	/^#define SAVE_VECTOR_UNALIGNED(_vec, _offset) \\$/;"	d
SCOPED_DISABLE_SECURE_CRT_WARNINGS	Include/WAVM/Platform/Defines.h	/^#define SCOPED_DISABLE_SECURE_CRT_WARNINGS(/;"	d
SEPARATOR	ThirdParty/libunwind/src/assembly.h	/^#define SEPARATOR /;"	d
SET_INEXACT	ThirdParty/dtoa/dtoa.c	/^#undef SET_INEXACT$/;"	d	file:
SHELL	output/Examples/Makefile	/^SHELL = \/bin\/sh$/;"	m
SHELL	output/Include/WAVM/Inline/Makefile	/^SHELL = \/bin\/sh$/;"	m
SHELL	output/Include/WAVM/Inline/xxhash/Makefile	/^SHELL = \/bin\/sh$/;"	m
SHELL	output/Lib/Emscripten/Makefile	/^SHELL = \/bin\/sh$/;"	m
SHELL	output/Lib/IR/Makefile	/^SHELL = \/bin\/sh$/;"	m
SHELL	output/Lib/LLVMJIT/Makefile	/^SHELL = \/bin\/sh$/;"	m
SHELL	output/Lib/Logging/Makefile	/^SHELL = \/bin\/sh$/;"	m
SHELL	output/Lib/NFA/Makefile	/^SHELL = \/bin\/sh$/;"	m
SHELL	output/Lib/Platform/Makefile	/^SHELL = \/bin\/sh$/;"	m
SHELL	output/Lib/RegExp/Makefile	/^SHELL = \/bin\/sh$/;"	m
SHELL	output/Lib/Runtime/Makefile	/^SHELL = \/bin\/sh$/;"	m
SHELL	output/Lib/ThreadTest/Makefile	/^SHELL = \/bin\/sh$/;"	m
SHELL	output/Lib/WASI/Makefile	/^SHELL = \/bin\/sh$/;"	m
SHELL	output/Lib/WASM/Makefile	/^SHELL = \/bin\/sh$/;"	m
SHELL	output/Lib/WASTParse/Makefile	/^SHELL = \/bin\/sh$/;"	m
SHELL	output/Lib/WASTPrint/Makefile	/^SHELL = \/bin\/sh$/;"	m
SHELL	output/Lib/wavm-c/Makefile	/^SHELL = \/bin\/sh$/;"	m
SHELL	output/Makefile	/^SHELL = \/bin\/sh$/;"	m
SHELL	output/Programs/wavm-as/Makefile	/^SHELL = \/bin\/sh$/;"	m
SHELL	output/Programs/wavm-compile/Makefile	/^SHELL = \/bin\/sh$/;"	m
SHELL	output/Programs/wavm-disas/Makefile	/^SHELL = \/bin\/sh$/;"	m
SHELL	output/Programs/wavm-run-wasi/Makefile	/^SHELL = \/bin\/sh$/;"	m
SHELL	output/Programs/wavm-run/Makefile	/^SHELL = \/bin\/sh$/;"	m
SHELL	output/Test/Benchmarks/Makefile	/^SHELL = \/bin\/sh$/;"	m
SHELL	output/Test/Containers/Makefile	/^SHELL = \/bin\/sh$/;"	m
SHELL	output/Test/DumpTestModules/Makefile	/^SHELL = \/bin\/sh$/;"	m
SHELL	output/Test/Makefile	/^SHELL = \/bin\/sh$/;"	m
SHELL	output/Test/RunTestScript/Makefile	/^SHELL = \/bin\/sh$/;"	m
SHELL	output/Test/fuzz/Makefile	/^SHELL = \/bin\/sh$/;"	m
SHELL	output/Test/spec/Makefile	/^SHELL = \/bin\/sh$/;"	m
SHELL	output/Test/wavm-c/Makefile	/^SHELL = \/bin\/sh$/;"	m
SHELL	output/ThirdParty/bridge/Makefile	/^SHELL = \/bin\/sh$/;"	m
SHELL	output/ThirdParty/dtoa/Makefile	/^SHELL = \/bin\/sh$/;"	m
SHELL	output/ThirdParty/libunwind/Makefile	/^SHELL = \/bin\/sh$/;"	m
SIMULATE_ID	output/CMakeFiles/3.13.2/CompilerIdC/CMakeCCompilerId.c	/^#  define SIMULATE_ID /;"	d	file:
SIMULATE_ID	output/CMakeFiles/3.13.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define SIMULATE_ID /;"	d	file:
SIMULATE_VERSION_MAJOR	output/CMakeFiles/3.13.2/CompilerIdC/CMakeCCompilerId.c	/^#  define SIMULATE_VERSION_MAJOR /;"	d	file:
SIMULATE_VERSION_MAJOR	output/CMakeFiles/3.13.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define SIMULATE_VERSION_MAJOR /;"	d	file:
SIMULATE_VERSION_MINOR	output/CMakeFiles/3.13.2/CompilerIdC/CMakeCCompilerId.c	/^#  define SIMULATE_VERSION_MINOR /;"	d	file:
SIMULATE_VERSION_MINOR	output/CMakeFiles/3.13.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define SIMULATE_VERSION_MINOR /;"	d	file:
STORE	Include/WAVM/IR/OperatorTable.h	/^#define STORE(/;"	d
STRINGIFY	output/CMakeFiles/3.13.2/CompilerIdC/CMakeCCompilerId.c	/^#define STRINGIFY(/;"	d	file:
STRINGIFY	output/CMakeFiles/3.13.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#define STRINGIFY(/;"	d	file:
STRINGIFY_HELPER	output/CMakeFiles/3.13.2/CompilerIdC/CMakeCCompilerId.c	/^#define STRINGIFY_HELPER(/;"	d	file:
STRINGIFY_HELPER	output/CMakeFiles/3.13.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#define STRINGIFY_HELPER(/;"	d	file:
STRTOD_DIGLIM	ThirdParty/dtoa/dtoa.c	/^#define STRTOD_DIGLIM /;"	d	file:
SU16	ThirdParty/libunwind/src/Unwind-EHABI.cpp	/^    SU16 = 0, \/\/ Short descriptor, 16-bit entries$/;"	e	enum:__anon79::Descriptor::__anon80	file:
SUFFIXES	output/Examples/Makefile	/^SUFFIXES =$/;"	m
SUFFIXES	output/Include/WAVM/Inline/Makefile	/^SUFFIXES =$/;"	m
SUFFIXES	output/Include/WAVM/Inline/xxhash/Makefile	/^SUFFIXES =$/;"	m
SUFFIXES	output/Lib/Emscripten/Makefile	/^SUFFIXES =$/;"	m
SUFFIXES	output/Lib/IR/Makefile	/^SUFFIXES =$/;"	m
SUFFIXES	output/Lib/LLVMJIT/Makefile	/^SUFFIXES =$/;"	m
SUFFIXES	output/Lib/Logging/Makefile	/^SUFFIXES =$/;"	m
SUFFIXES	output/Lib/NFA/Makefile	/^SUFFIXES =$/;"	m
SUFFIXES	output/Lib/Platform/Makefile	/^SUFFIXES =$/;"	m
SUFFIXES	output/Lib/RegExp/Makefile	/^SUFFIXES =$/;"	m
SUFFIXES	output/Lib/Runtime/Makefile	/^SUFFIXES =$/;"	m
SUFFIXES	output/Lib/ThreadTest/Makefile	/^SUFFIXES =$/;"	m
SUFFIXES	output/Lib/WASI/Makefile	/^SUFFIXES =$/;"	m
SUFFIXES	output/Lib/WASM/Makefile	/^SUFFIXES =$/;"	m
SUFFIXES	output/Lib/WASTParse/Makefile	/^SUFFIXES =$/;"	m
SUFFIXES	output/Lib/WASTPrint/Makefile	/^SUFFIXES =$/;"	m
SUFFIXES	output/Lib/wavm-c/Makefile	/^SUFFIXES =$/;"	m
SUFFIXES	output/Makefile	/^SUFFIXES =$/;"	m
SUFFIXES	output/Programs/wavm-as/Makefile	/^SUFFIXES =$/;"	m
SUFFIXES	output/Programs/wavm-compile/Makefile	/^SUFFIXES =$/;"	m
SUFFIXES	output/Programs/wavm-disas/Makefile	/^SUFFIXES =$/;"	m
SUFFIXES	output/Programs/wavm-run-wasi/Makefile	/^SUFFIXES =$/;"	m
SUFFIXES	output/Programs/wavm-run/Makefile	/^SUFFIXES =$/;"	m
SUFFIXES	output/Test/Benchmarks/Makefile	/^SUFFIXES =$/;"	m
SUFFIXES	output/Test/Containers/Makefile	/^SUFFIXES =$/;"	m
SUFFIXES	output/Test/DumpTestModules/Makefile	/^SUFFIXES =$/;"	m
SUFFIXES	output/Test/Makefile	/^SUFFIXES =$/;"	m
SUFFIXES	output/Test/RunTestScript/Makefile	/^SUFFIXES =$/;"	m
SUFFIXES	output/Test/fuzz/Makefile	/^SUFFIXES =$/;"	m
SUFFIXES	output/Test/spec/Makefile	/^SUFFIXES =$/;"	m
SUFFIXES	output/Test/wavm-c/Makefile	/^SUFFIXES =$/;"	m
SUFFIXES	output/ThirdParty/bridge/Makefile	/^SUFFIXES =$/;"	m
SUFFIXES	output/ThirdParty/dtoa/Makefile	/^SUFFIXES =$/;"	m
SUFFIXES	output/ThirdParty/libunwind/Makefile	/^SUFFIXES =$/;"	m
SUPPRESS_UNUSED	Include/WAVM/Platform/Defines.h	/^#define SUPPRESS_UNUSED(/;"	d
SYMBOL_IS_FUNC	ThirdParty/libunwind/src/assembly.h	/^#define SYMBOL_IS_FUNC(/;"	d
SYMBOL_NAME	ThirdParty/libunwind/src/assembly.h	/^#define SYMBOL_NAME(/;"	d
Scale_Bit	ThirdParty/dtoa/dtoa.c	/^#define Scale_Bit /;"	d	file:
ScopedBranchTarget	Lib/WASTParse/ParseFunction.cpp	/^		ScopedBranchTarget(FunctionState* inFunctionState, Name inName)$/;"	f	struct:__anon50::ScopedBranchTarget
ScopedBranchTarget	Lib/WASTParse/ParseFunction.cpp	/^	struct ScopedBranchTarget$/;"	s	namespace:__anon50	file:
ScopedTagPrinter	Lib/WASTPrint/Print.cpp	/^	ScopedTagPrinter(std::string& inString, const char* tag) : string(inString)$/;"	f	struct:ScopedTagPrinter
ScopedTagPrinter	Lib/WASTPrint/Print.cpp	/^struct ScopedTagPrinter$/;"	s	file:
Section	Lib/LLVMJIT/LLVMModule.cpp	/^	struct Section$/;"	s	struct:LLVMJIT::ModuleMemoryManager	file:
SectionType	Lib/WASM/WASMSerialization.cpp	/^enum class SectionType : U8$/;"	c	file:
Seq	Lib/RegExp/RegExp.cpp	/^typedef Binary<NodeType::seq> Seq;$/;"	t	file:
Serialization	Include/WAVM/Inline/Serialization.h	/^namespace WAVM { namespace Serialization {$/;"	n	namespace:WAVM
Serialization	Include/WAVM/WASM/WASM.h	/^namespace WAVM { namespace Serialization {$/;"	n	namespace:WAVM
SharedState	Test/RunTestScript/RunTestScript.cpp	/^struct SharedState$/;"	s	file:
ShuffleImm	Include/WAVM/IR/Operators.h	/^	template<Uptr numLanes> struct ShuffleImm$/;"	s	namespace:WAVM::IR
SigAltStack	Lib/Platform/POSIX/POSIXPrivate.h	/^	struct SigAltStack$/;"	s	namespace:WAVM::Platform
Sign_bit	ThirdParty/dtoa/dtoa.c	/^#define Sign_bit /;"	d	file:
Signal	Include/WAVM/Platform/Signal.h	/^	struct Signal$/;"	s	namespace:WAVM::Platform
SignalContext	Lib/Platform/POSIX/POSIXPrivate.h	/^	struct SignalContext$/;"	s	namespace:WAVM::Platform
SizeConstraints	Include/WAVM/IR/Types.h	/^	struct SizeConstraints$/;"	s	class:WAVM::IR::ValueType
StateIndex	Include/WAVM/NFA/NFA.h	/^	typedef I16 StateIndex;$/;"	t	namespace:WAVM::NFA
StateSet	Lib/NFA/NFA.cpp	/^typedef std::vector<StateIndex> StateSet;$/;"	t	file:
StateTransitionsByChar	Lib/NFA/NFA.cpp	/^	StateTransitionsByChar(StateTransitionsByChar&& inMove)$/;"	f	struct:StateTransitionsByChar
StateTransitionsByChar	Lib/NFA/NFA.cpp	/^	StateTransitionsByChar(U8 inC, Uptr inNumStates)$/;"	f	struct:StateTransitionsByChar
StateTransitionsByChar	Lib/NFA/NFA.cpp	/^struct StateTransitionsByChar$/;"	s	file:
StaticData	Lib/WASTParse/Lexer.cpp	/^StaticData::StaticData(bool allowLegacyOperatorNames)$/;"	f	class:StaticData
StaticData	Lib/WASTParse/Lexer.cpp	/^struct StaticData$/;"	s	file:
StdDevice	Include/WAVM/Platform/File.h	/^	enum class StdDevice$/;"	c	namespace:WAVM::Platform
StdErr	Lib/Emscripten/Emscripten.cpp	/^	StdErr = 1,$/;"	m	class:ioStreamVMHandle	file:
StdIn	Lib/Emscripten/Emscripten.cpp	/^	StdIn = 2,$/;"	m	class:ioStreamVMHandle	file:
StdOut	Lib/Emscripten/Emscripten.cpp	/^	StdOut = 3$/;"	m	class:ioStreamVMHandle	file:
Storeinc	ThirdParty/dtoa/dtoa.c	/^#define Storeinc(/;"	d	file:
StubResolver	Test/fuzz/fuzz-instantiate.cpp	/^	StubResolver(Compartment* inCompartment) : compartment(inCompartment) {}$/;"	f	struct:StubResolver
StubResolver	Test/fuzz/fuzz-instantiate.cpp	/^struct StubResolver : Runtime::Resolver$/;"	s	file:
Sudden_Underflow	ThirdParty/dtoa/dtoa.c	/^#define Sudden_Underflow$/;"	d	file:
Sudden_Underflow	ThirdParty/dtoa/dtoa.c	/^#undef  Sudden_Underflow$/;"	d	file:
Sudden_Underflow	ThirdParty/dtoa/dtoa.c	/^#undef Sudden_Underflow$/;"	d	file:
SymFromAddr	Lib/Platform/Windows/Diagnostics.cpp	/^	typedef BOOL(WINAPI* SymFromAddr)(HANDLE, U64, U64*, SYMBOL_INFO*);$/;"	t	struct:DbgHelp	file:
TMP	ThirdParty/libunwind/src/UnwindRegistersSave.S	/^#define TMP %rdx$/;"	d
TMP	ThirdParty/libunwind/src/UnwindRegistersSave.S	/^#define TMP %rsi$/;"	d
Table	Include/WAVM/Runtime/Intrinsics.h	/^	struct Table$/;"	s	namespace:WAVM::Intrinsics
Table	Lib/Runtime/Intrinsics.cpp	/^Intrinsics::Table::Table(Intrinsics::Module& moduleRef,$/;"	f	class:Intrinsics::Table
Table	Lib/Runtime/RuntimePrivate.h	/^		Table(Compartment* inCompartment, const IR::TableType& inType, std::string&& inDebugName)$/;"	f	struct:WAVM::Runtime::Table
Table	Lib/Runtime/RuntimePrivate.h	/^	struct Table : GCObject$/;"	s	namespace:WAVM::Runtime
TableBinding	Include/WAVM/LLVMJIT/LLVMJIT.h	/^	struct TableBinding$/;"	s	namespace:WAVM::LLVMJIT
TableCopyImm	Include/WAVM/IR/Operators.h	/^	struct TableCopyImm$/;"	s	namespace:WAVM::IR
TableDef	Include/WAVM/IR/Module.h	/^	struct TableDef$/;"	s	class:WAVM::IR::Opcode
TableImm	Include/WAVM/IR/Operators.h	/^	struct TableImm$/;"	s	namespace:WAVM::IR
TableImport	Include/WAVM/IR/Module.h	/^	typedef Import<TableType> TableImport;$/;"	t	class:WAVM::IR::Opcode
TableType	Include/WAVM/IR/Types.h	/^		TableType() : elementType(ReferenceType::invalid) {}$/;"	f	struct:WAVM::IR::ValueType::TableType
TableType	Include/WAVM/IR/Types.h	/^		TableType(ReferenceType inElementType, bool inIsShared, SizeConstraints inSize)$/;"	f	struct:WAVM::IR::ValueType::TableType
TableType	Include/WAVM/IR/Types.h	/^	struct TableType$/;"	s	class:WAVM::IR::ValueType
Ten_pmax	ThirdParty/dtoa/dtoa.c	/^#define Ten_pmax /;"	d	file:
TestScriptResolver	Test/RunTestScript/RunTestScript.cpp	/^	TestScriptResolver(const TestScriptState& inState) : state(inState) {}$/;"	f	struct:TestScriptResolver
TestScriptResolver	Test/RunTestScript/RunTestScript.cpp	/^struct TestScriptResolver : Resolver$/;"	s	file:
TestScriptState	Test/RunTestScript/RunTestScript.cpp	/^	TestScriptState()$/;"	f	struct:TestScriptState
TestScriptState	Test/RunTestScript/RunTestScript.cpp	/^	TestScriptState(const TestScriptState& copyee)$/;"	f	struct:TestScriptState
TestScriptState	Test/RunTestScript/RunTestScript.cpp	/^struct TestScriptState$/;"	s	file:
TextFileLocus	Include/WAVM/WASTParse/WASTParse.h	/^		TextFileLocus() : newlines(0), tabs(0), characters(0) {}$/;"	f	struct:WAVM::WAST::TextFileLocus
TextFileLocus	Include/WAVM/WASTParse/WASTParse.h	/^	struct TextFileLocus$/;"	s	namespace:WAVM::WAST
Thread	Lib/Platform/POSIX/Thread.cpp	/^struct Platform::Thread$/;"	s	class:Platform	file:
Thread	Lib/Platform/Windows/Thread.cpp	/^struct Platform::Thread$/;"	s	class:Platform	file:
Thread	Lib/ThreadTest/ThreadTest.cpp	/^	FORCENOINLINE Thread(Context* inContext, Function* inEntryFunction, const IR::Value& inArgument)$/;"	f	struct:Thread
Thread	Lib/ThreadTest/ThreadTest.cpp	/^struct Thread$/;"	s	file:
ThreadArgs	Lib/Platform/Windows/Thread.cpp	/^	ThreadArgs() : thread(nullptr) {}$/;"	f	struct:ThreadArgs
ThreadArgs	Lib/Platform/Windows/Thread.cpp	/^struct ThreadArgs$/;"	s	file:
ThreadArgs	Test/Benchmarks/invoke-bench.cpp	/^struct ThreadArgs$/;"	s	file:
ThreadEntryContext	Lib/Platform/POSIX/Thread.cpp	/^struct ThreadEntryContext$/;"	s	file:
ThreadTest	Include/WAVM/ThreadTest/ThreadTest.h	/^namespace WAVM { namespace ThreadTest {$/;"	n	namespace:WAVM
Timer	Include/WAVM/Inline/Timing.h	/^		Timer() : startTime(std::chrono::high_resolution_clock::now()), isStopped(false) {}$/;"	f	struct:WAVM::Timing::Timer
Timer	Include/WAVM/Inline/Timing.h	/^	struct Timer$/;"	s	namespace:WAVM::Timing
Timing	Include/WAVM/Inline/Timing.h	/^namespace WAVM { namespace Timing {$/;"	n	namespace:WAVM
Tiny0	ThirdParty/dtoa/dtoa.c	/^#define Tiny0 /;"	d	file:
Tiny1	ThirdParty/dtoa/dtoa.c	/^#define Tiny1 /;"	d	file:
TryContext	Lib/LLVMJIT/EmitFunctionContext.h	/^		struct TryContext$/;"	s	struct:WAVM::LLVMJIT::EmitFunctionContext
Type	Include/WAVM/Emscripten/gas-visit-context.h	/^        enum class Type : U8$/;"	c	struct:GasVisitor::ControlContext
Type	Include/WAVM/Emscripten/insert-imported-context.h	/^        enum class Type : U8$/;"	c	struct:ImportFunctionInsertVisitor::ControlContext
Type	Include/WAVM/IR/Module.h	/^		enum class Type : U16$/;"	c	class:WAVM::IR::Opcode
Type	Include/WAVM/IR/Module.h	/^		enum class Type$/;"	c	struct:WAVM::IR::Opcode::Elem
Type	Include/WAVM/Platform/Signal.h	/^		enum class Type$/;"	c	struct:WAVM::Platform::Signal
Type	Include/WAVM/WASTParse/TestScript.h	/^		enum Type$/;"	g	struct:WAVM::WAST::Command
Type	Lib/IR/Validate.cpp	/^		enum class Type : U8$/;"	c	struct:FunctionValidationContext::ControlContext	file:
Type	Lib/LLVMJIT/EmitFunctionContext.h	/^			enum class Type : U8$/;"	c	struct:WAVM::LLVMJIT::EmitFunctionContext::ControlContext
Type	Lib/WASTParse/Parse.h	/^		enum class Type$/;"	c	struct:WAVM::WAST::Reference
Type	Lib/WASTPrint/Print.cpp	/^		enum class Type : U8$/;"	c	struct:FunctionPrintContext::ControlContext	file:
TypeTuple	Include/WAVM/IR/Types.h	/^		TypeTuple() : impl(getUniqueImpl(0, nullptr)) {}$/;"	f	struct:WAVM::IR::ValueType::TypeTuple
TypeTuple	Include/WAVM/IR/Types.h	/^		TypeTuple(const Impl* inImpl) : impl(inImpl) {}$/;"	f	struct:WAVM::IR::ValueType::TypeTuple
TypeTuple	Include/WAVM/IR/Types.h	/^	struct TypeTuple$/;"	s	class:WAVM::IR::ValueType
TypeTuple	Lib/IR/Types.cpp	/^IR::TypeTuple::TypeTuple(ValueType inElem) { impl = getUniqueImpl(1, &inElem); }$/;"	f	class:IR::TypeTuple
TypeTuple	Lib/IR/Types.cpp	/^IR::TypeTuple::TypeTuple(const ValueType* inElems, Uptr numElems)$/;"	f	class:IR::TypeTuple
TypeTuple	Lib/IR/Types.cpp	/^IR::TypeTuple::TypeTuple(const std::initializer_list<ValueType>& inElems)$/;"	f	class:IR::TypeTuple
TypeTuple	Lib/IR/Types.cpp	/^IR::TypeTuple::TypeTuple(const std::vector<ValueType>& inElems)$/;"	f	class:IR::TypeTuple
TypeTupleHashPolicy	Lib/IR/Types.cpp	/^struct TypeTupleHashPolicy$/;"	s	file:
U	ThirdParty/dtoa/dtoa.c	/^typedef union { double d; ULong L[2]; } U;$/;"	t	typeref:union:__anon53	file:
U16	Include/WAVM/Inline/BasicTypes.h	/^typedef uint16_t U16;$/;"	t
U16	Include/WAVM/Inline/xxhash/xxhash.c	/^    typedef uint16_t U16;$/;"	t	file:
U16	Include/WAVM/Inline/xxhash/xxhash.c	/^    typedef unsigned short     U16;$/;"	t	file:
U32	Include/WAVM/Inline/BasicTypes.h	/^typedef uint32_t U32;$/;"	t
U32	Include/WAVM/Inline/xxhash/xxhash.c	/^    typedef uint32_t U32;$/;"	t	file:
U32	Include/WAVM/Inline/xxhash/xxhash.c	/^    typedef unsigned int       U32;$/;"	t	file:
U64	Include/WAVM/Inline/BasicTypes.h	/^typedef uint64_t U64;$/;"	t
U64	Include/WAVM/Inline/xxhash/xxhash.c	/^    typedef uint64_t U64;$/;"	t	file:
U64	Include/WAVM/Inline/xxhash/xxhash.c	/^    typedef unsigned long long U64;$/;"	t	file:
U8	Include/WAVM/Inline/BasicTypes.h	/^typedef uint8_t U8;$/;"	t
ULLong	ThirdParty/dtoa/dtoa.c	/^#define ULLong /;"	d	file:
ULLong	ThirdParty/dtoa/dtoa.c	/^#undef ULLong$/;"	d	file:
ULbits	ThirdParty/dtoa/dtoa.c	/^#define ULbits /;"	d	file:
ULong	ThirdParty/dtoa/dtoa.c	/^typedef unsigned Long ULong;$/;"	t	file:
UNARY	Include/WAVM/IR/OperatorTable.h	/^#define UNARY(/;"	d
UNLIKELY	Include/WAVM/Platform/Defines.h	/^#define UNLIKELY(/;"	d
UNWIND_ARM64_DWARF_SECTION_OFFSET	ThirdParty/libunwind/include/mach-o/compact_unwind_encoding.h	/^    UNWIND_ARM64_DWARF_SECTION_OFFSET          = 0x00FFFFFF,$/;"	e	enum:__anon78
UNWIND_ARM64_FRAMELESS_STACK_SIZE_MASK	ThirdParty/libunwind/include/mach-o/compact_unwind_encoding.h	/^    UNWIND_ARM64_FRAMELESS_STACK_SIZE_MASK     = 0x00FFF000,$/;"	e	enum:__anon78
UNWIND_ARM64_FRAME_D10_D11_PAIR	ThirdParty/libunwind/include/mach-o/compact_unwind_encoding.h	/^    UNWIND_ARM64_FRAME_D10_D11_PAIR            = 0x00000200,$/;"	e	enum:__anon78
UNWIND_ARM64_FRAME_D12_D13_PAIR	ThirdParty/libunwind/include/mach-o/compact_unwind_encoding.h	/^    UNWIND_ARM64_FRAME_D12_D13_PAIR            = 0x00000400,$/;"	e	enum:__anon78
UNWIND_ARM64_FRAME_D14_D15_PAIR	ThirdParty/libunwind/include/mach-o/compact_unwind_encoding.h	/^    UNWIND_ARM64_FRAME_D14_D15_PAIR            = 0x00000800,$/;"	e	enum:__anon78
UNWIND_ARM64_FRAME_D8_D9_PAIR	ThirdParty/libunwind/include/mach-o/compact_unwind_encoding.h	/^    UNWIND_ARM64_FRAME_D8_D9_PAIR              = 0x00000100,$/;"	e	enum:__anon78
UNWIND_ARM64_FRAME_X19_X20_PAIR	ThirdParty/libunwind/include/mach-o/compact_unwind_encoding.h	/^    UNWIND_ARM64_FRAME_X19_X20_PAIR            = 0x00000001,$/;"	e	enum:__anon78
UNWIND_ARM64_FRAME_X21_X22_PAIR	ThirdParty/libunwind/include/mach-o/compact_unwind_encoding.h	/^    UNWIND_ARM64_FRAME_X21_X22_PAIR            = 0x00000002,$/;"	e	enum:__anon78
UNWIND_ARM64_FRAME_X23_X24_PAIR	ThirdParty/libunwind/include/mach-o/compact_unwind_encoding.h	/^    UNWIND_ARM64_FRAME_X23_X24_PAIR            = 0x00000004,$/;"	e	enum:__anon78
UNWIND_ARM64_FRAME_X25_X26_PAIR	ThirdParty/libunwind/include/mach-o/compact_unwind_encoding.h	/^    UNWIND_ARM64_FRAME_X25_X26_PAIR            = 0x00000008,$/;"	e	enum:__anon78
UNWIND_ARM64_FRAME_X27_X28_PAIR	ThirdParty/libunwind/include/mach-o/compact_unwind_encoding.h	/^    UNWIND_ARM64_FRAME_X27_X28_PAIR            = 0x00000010,$/;"	e	enum:__anon78
UNWIND_ARM64_MODE_DWARF	ThirdParty/libunwind/include/mach-o/compact_unwind_encoding.h	/^    UNWIND_ARM64_MODE_DWARF                    = 0x03000000,$/;"	e	enum:__anon78
UNWIND_ARM64_MODE_FRAME	ThirdParty/libunwind/include/mach-o/compact_unwind_encoding.h	/^    UNWIND_ARM64_MODE_FRAME                    = 0x04000000,$/;"	e	enum:__anon78
UNWIND_ARM64_MODE_FRAMELESS	ThirdParty/libunwind/include/mach-o/compact_unwind_encoding.h	/^    UNWIND_ARM64_MODE_FRAMELESS                = 0x02000000,$/;"	e	enum:__anon78
UNWIND_ARM64_MODE_MASK	ThirdParty/libunwind/include/mach-o/compact_unwind_encoding.h	/^    UNWIND_ARM64_MODE_MASK                     = 0x0F000000,$/;"	e	enum:__anon78
UNWIND_ASSEMBLY_H	ThirdParty/libunwind/src/assembly.h	/^#define UNWIND_ASSEMBLY_H$/;"	d
UNWIND_HAS_LSDA	ThirdParty/libunwind/include/mach-o/compact_unwind_encoding.h	/^    UNWIND_HAS_LSDA                        = 0x40000000,$/;"	e	enum:__anon73
UNWIND_INFO_COMPRESSED_ENTRY_ENCODING_INDEX	ThirdParty/libunwind/include/mach-o/compact_unwind_encoding.h	/^#define UNWIND_INFO_COMPRESSED_ENTRY_ENCODING_INDEX(/;"	d
UNWIND_INFO_COMPRESSED_ENTRY_FUNC_OFFSET	ThirdParty/libunwind/include/mach-o/compact_unwind_encoding.h	/^#define UNWIND_INFO_COMPRESSED_ENTRY_FUNC_OFFSET(/;"	d
UNWIND_IS_NOT_FUNCTION_START	ThirdParty/libunwind/include/mach-o/compact_unwind_encoding.h	/^    UNWIND_IS_NOT_FUNCTION_START           = 0x80000000,$/;"	e	enum:__anon73
UNWIND_PERSONALITY_MASK	ThirdParty/libunwind/include/mach-o/compact_unwind_encoding.h	/^    UNWIND_PERSONALITY_MASK                = 0x30000000,$/;"	e	enum:__anon73
UNWIND_SECOND_LEVEL_COMPRESSED	ThirdParty/libunwind/include/mach-o/compact_unwind_encoding.h	/^#define UNWIND_SECOND_LEVEL_COMPRESSED /;"	d
UNWIND_SECOND_LEVEL_REGULAR	ThirdParty/libunwind/include/mach-o/compact_unwind_encoding.h	/^#define UNWIND_SECOND_LEVEL_REGULAR /;"	d
UNWIND_SECTION_VERSION	ThirdParty/libunwind/include/mach-o/compact_unwind_encoding.h	/^#define UNWIND_SECTION_VERSION /;"	d
UNWIND_X86_64_DWARF_SECTION_OFFSET	ThirdParty/libunwind/include/mach-o/compact_unwind_encoding.h	/^    UNWIND_X86_64_DWARF_SECTION_OFFSET              = 0x00FFFFFF,$/;"	e	enum:__anon76
UNWIND_X86_64_FRAMELESS_STACK_ADJUST	ThirdParty/libunwind/include/mach-o/compact_unwind_encoding.h	/^    UNWIND_X86_64_FRAMELESS_STACK_ADJUST            = 0x0000E000,$/;"	e	enum:__anon76
UNWIND_X86_64_FRAMELESS_STACK_REG_COUNT	ThirdParty/libunwind/include/mach-o/compact_unwind_encoding.h	/^    UNWIND_X86_64_FRAMELESS_STACK_REG_COUNT         = 0x00001C00,$/;"	e	enum:__anon76
UNWIND_X86_64_FRAMELESS_STACK_REG_PERMUTATION	ThirdParty/libunwind/include/mach-o/compact_unwind_encoding.h	/^    UNWIND_X86_64_FRAMELESS_STACK_REG_PERMUTATION   = 0x000003FF,$/;"	e	enum:__anon76
UNWIND_X86_64_FRAMELESS_STACK_SIZE	ThirdParty/libunwind/include/mach-o/compact_unwind_encoding.h	/^    UNWIND_X86_64_FRAMELESS_STACK_SIZE              = 0x00FF0000,$/;"	e	enum:__anon76
UNWIND_X86_64_MODE_DWARF	ThirdParty/libunwind/include/mach-o/compact_unwind_encoding.h	/^    UNWIND_X86_64_MODE_DWARF                        = 0x04000000,$/;"	e	enum:__anon76
UNWIND_X86_64_MODE_MASK	ThirdParty/libunwind/include/mach-o/compact_unwind_encoding.h	/^    UNWIND_X86_64_MODE_MASK                         = 0x0F000000,$/;"	e	enum:__anon76
UNWIND_X86_64_MODE_RBP_FRAME	ThirdParty/libunwind/include/mach-o/compact_unwind_encoding.h	/^    UNWIND_X86_64_MODE_RBP_FRAME                    = 0x01000000,$/;"	e	enum:__anon76
UNWIND_X86_64_MODE_STACK_IMMD	ThirdParty/libunwind/include/mach-o/compact_unwind_encoding.h	/^    UNWIND_X86_64_MODE_STACK_IMMD                   = 0x02000000,$/;"	e	enum:__anon76
UNWIND_X86_64_MODE_STACK_IND	ThirdParty/libunwind/include/mach-o/compact_unwind_encoding.h	/^    UNWIND_X86_64_MODE_STACK_IND                    = 0x03000000,$/;"	e	enum:__anon76
UNWIND_X86_64_RBP_FRAME_OFFSET	ThirdParty/libunwind/include/mach-o/compact_unwind_encoding.h	/^    UNWIND_X86_64_RBP_FRAME_OFFSET                  = 0x00FF0000,$/;"	e	enum:__anon76
UNWIND_X86_64_RBP_FRAME_REGISTERS	ThirdParty/libunwind/include/mach-o/compact_unwind_encoding.h	/^    UNWIND_X86_64_RBP_FRAME_REGISTERS               = 0x00007FFF,$/;"	e	enum:__anon76
UNWIND_X86_64_REG_NONE	ThirdParty/libunwind/include/mach-o/compact_unwind_encoding.h	/^    UNWIND_X86_64_REG_NONE       = 0,$/;"	e	enum:__anon77
UNWIND_X86_64_REG_R12	ThirdParty/libunwind/include/mach-o/compact_unwind_encoding.h	/^    UNWIND_X86_64_REG_R12        = 2,$/;"	e	enum:__anon77
UNWIND_X86_64_REG_R13	ThirdParty/libunwind/include/mach-o/compact_unwind_encoding.h	/^    UNWIND_X86_64_REG_R13        = 3,$/;"	e	enum:__anon77
UNWIND_X86_64_REG_R14	ThirdParty/libunwind/include/mach-o/compact_unwind_encoding.h	/^    UNWIND_X86_64_REG_R14        = 4,$/;"	e	enum:__anon77
UNWIND_X86_64_REG_R15	ThirdParty/libunwind/include/mach-o/compact_unwind_encoding.h	/^    UNWIND_X86_64_REG_R15        = 5,$/;"	e	enum:__anon77
UNWIND_X86_64_REG_RBP	ThirdParty/libunwind/include/mach-o/compact_unwind_encoding.h	/^    UNWIND_X86_64_REG_RBP        = 6,$/;"	e	enum:__anon77
UNWIND_X86_64_REG_RBX	ThirdParty/libunwind/include/mach-o/compact_unwind_encoding.h	/^    UNWIND_X86_64_REG_RBX        = 1,$/;"	e	enum:__anon77
UNWIND_X86_DWARF_SECTION_OFFSET	ThirdParty/libunwind/include/mach-o/compact_unwind_encoding.h	/^    UNWIND_X86_DWARF_SECTION_OFFSET              = 0x00FFFFFF,$/;"	e	enum:__anon74
UNWIND_X86_EBP_FRAME_OFFSET	ThirdParty/libunwind/include/mach-o/compact_unwind_encoding.h	/^    UNWIND_X86_EBP_FRAME_OFFSET                  = 0x00FF0000,$/;"	e	enum:__anon74
UNWIND_X86_EBP_FRAME_REGISTERS	ThirdParty/libunwind/include/mach-o/compact_unwind_encoding.h	/^    UNWIND_X86_EBP_FRAME_REGISTERS               = 0x00007FFF,$/;"	e	enum:__anon74
UNWIND_X86_FRAMELESS_STACK_ADJUST	ThirdParty/libunwind/include/mach-o/compact_unwind_encoding.h	/^    UNWIND_X86_FRAMELESS_STACK_ADJUST            = 0x0000E000,$/;"	e	enum:__anon74
UNWIND_X86_FRAMELESS_STACK_REG_COUNT	ThirdParty/libunwind/include/mach-o/compact_unwind_encoding.h	/^    UNWIND_X86_FRAMELESS_STACK_REG_COUNT         = 0x00001C00,$/;"	e	enum:__anon74
UNWIND_X86_FRAMELESS_STACK_REG_PERMUTATION	ThirdParty/libunwind/include/mach-o/compact_unwind_encoding.h	/^    UNWIND_X86_FRAMELESS_STACK_REG_PERMUTATION   = 0x000003FF,$/;"	e	enum:__anon74
UNWIND_X86_FRAMELESS_STACK_SIZE	ThirdParty/libunwind/include/mach-o/compact_unwind_encoding.h	/^    UNWIND_X86_FRAMELESS_STACK_SIZE              = 0x00FF0000,$/;"	e	enum:__anon74
UNWIND_X86_MODE_DWARF	ThirdParty/libunwind/include/mach-o/compact_unwind_encoding.h	/^    UNWIND_X86_MODE_DWARF                        = 0x04000000,$/;"	e	enum:__anon74
UNWIND_X86_MODE_EBP_FRAME	ThirdParty/libunwind/include/mach-o/compact_unwind_encoding.h	/^    UNWIND_X86_MODE_EBP_FRAME                    = 0x01000000,$/;"	e	enum:__anon74
UNWIND_X86_MODE_MASK	ThirdParty/libunwind/include/mach-o/compact_unwind_encoding.h	/^    UNWIND_X86_MODE_MASK                         = 0x0F000000,$/;"	e	enum:__anon74
UNWIND_X86_MODE_STACK_IMMD	ThirdParty/libunwind/include/mach-o/compact_unwind_encoding.h	/^    UNWIND_X86_MODE_STACK_IMMD                   = 0x02000000,$/;"	e	enum:__anon74
UNWIND_X86_MODE_STACK_IND	ThirdParty/libunwind/include/mach-o/compact_unwind_encoding.h	/^    UNWIND_X86_MODE_STACK_IND                    = 0x03000000,$/;"	e	enum:__anon74
UNWIND_X86_REG_EBP	ThirdParty/libunwind/include/mach-o/compact_unwind_encoding.h	/^    UNWIND_X86_REG_EBP      = 6,$/;"	e	enum:__anon75
UNWIND_X86_REG_EBX	ThirdParty/libunwind/include/mach-o/compact_unwind_encoding.h	/^    UNWIND_X86_REG_EBX      = 1,$/;"	e	enum:__anon75
UNWIND_X86_REG_ECX	ThirdParty/libunwind/include/mach-o/compact_unwind_encoding.h	/^    UNWIND_X86_REG_ECX      = 2,$/;"	e	enum:__anon75
UNWIND_X86_REG_EDI	ThirdParty/libunwind/include/mach-o/compact_unwind_encoding.h	/^    UNWIND_X86_REG_EDI      = 4,$/;"	e	enum:__anon75
UNWIND_X86_REG_EDX	ThirdParty/libunwind/include/mach-o/compact_unwind_encoding.h	/^    UNWIND_X86_REG_EDX      = 3,$/;"	e	enum:__anon75
UNWIND_X86_REG_ESI	ThirdParty/libunwind/include/mach-o/compact_unwind_encoding.h	/^    UNWIND_X86_REG_ESI      = 5,$/;"	e	enum:__anon75
UNWIND_X86_REG_NONE	ThirdParty/libunwind/include/mach-o/compact_unwind_encoding.h	/^    UNWIND_X86_REG_NONE     = 0,$/;"	e	enum:__anon75
UNW_ARM64_D0	ThirdParty/libunwind/include/libunwind.h	/^  UNW_ARM64_D0  = 64,$/;"	e	enum:__anon69
UNW_ARM64_D1	ThirdParty/libunwind/include/libunwind.h	/^  UNW_ARM64_D1  = 65,$/;"	e	enum:__anon69
UNW_ARM64_D10	ThirdParty/libunwind/include/libunwind.h	/^  UNW_ARM64_D10 = 74,$/;"	e	enum:__anon69
UNW_ARM64_D11	ThirdParty/libunwind/include/libunwind.h	/^  UNW_ARM64_D11 = 75,$/;"	e	enum:__anon69
UNW_ARM64_D12	ThirdParty/libunwind/include/libunwind.h	/^  UNW_ARM64_D12 = 76,$/;"	e	enum:__anon69
UNW_ARM64_D13	ThirdParty/libunwind/include/libunwind.h	/^  UNW_ARM64_D13 = 77,$/;"	e	enum:__anon69
UNW_ARM64_D14	ThirdParty/libunwind/include/libunwind.h	/^  UNW_ARM64_D14 = 78,$/;"	e	enum:__anon69
UNW_ARM64_D15	ThirdParty/libunwind/include/libunwind.h	/^  UNW_ARM64_D15 = 79,$/;"	e	enum:__anon69
UNW_ARM64_D16	ThirdParty/libunwind/include/libunwind.h	/^  UNW_ARM64_D16 = 80,$/;"	e	enum:__anon69
UNW_ARM64_D17	ThirdParty/libunwind/include/libunwind.h	/^  UNW_ARM64_D17 = 81,$/;"	e	enum:__anon69
UNW_ARM64_D18	ThirdParty/libunwind/include/libunwind.h	/^  UNW_ARM64_D18 = 82,$/;"	e	enum:__anon69
UNW_ARM64_D19	ThirdParty/libunwind/include/libunwind.h	/^  UNW_ARM64_D19 = 83,$/;"	e	enum:__anon69
UNW_ARM64_D2	ThirdParty/libunwind/include/libunwind.h	/^  UNW_ARM64_D2  = 66,$/;"	e	enum:__anon69
UNW_ARM64_D20	ThirdParty/libunwind/include/libunwind.h	/^  UNW_ARM64_D20 = 84,$/;"	e	enum:__anon69
UNW_ARM64_D21	ThirdParty/libunwind/include/libunwind.h	/^  UNW_ARM64_D21 = 85,$/;"	e	enum:__anon69
UNW_ARM64_D22	ThirdParty/libunwind/include/libunwind.h	/^  UNW_ARM64_D22 = 86,$/;"	e	enum:__anon69
UNW_ARM64_D23	ThirdParty/libunwind/include/libunwind.h	/^  UNW_ARM64_D23 = 87,$/;"	e	enum:__anon69
UNW_ARM64_D24	ThirdParty/libunwind/include/libunwind.h	/^  UNW_ARM64_D24 = 88,$/;"	e	enum:__anon69
UNW_ARM64_D25	ThirdParty/libunwind/include/libunwind.h	/^  UNW_ARM64_D25 = 89,$/;"	e	enum:__anon69
UNW_ARM64_D26	ThirdParty/libunwind/include/libunwind.h	/^  UNW_ARM64_D26 = 90,$/;"	e	enum:__anon69
UNW_ARM64_D27	ThirdParty/libunwind/include/libunwind.h	/^  UNW_ARM64_D27 = 91,$/;"	e	enum:__anon69
UNW_ARM64_D28	ThirdParty/libunwind/include/libunwind.h	/^  UNW_ARM64_D28 = 92,$/;"	e	enum:__anon69
UNW_ARM64_D29	ThirdParty/libunwind/include/libunwind.h	/^  UNW_ARM64_D29 = 93,$/;"	e	enum:__anon69
UNW_ARM64_D3	ThirdParty/libunwind/include/libunwind.h	/^  UNW_ARM64_D3  = 67,$/;"	e	enum:__anon69
UNW_ARM64_D30	ThirdParty/libunwind/include/libunwind.h	/^  UNW_ARM64_D30 = 94,$/;"	e	enum:__anon69
UNW_ARM64_D31	ThirdParty/libunwind/include/libunwind.h	/^  UNW_ARM64_D31 = 95,$/;"	e	enum:__anon69
UNW_ARM64_D4	ThirdParty/libunwind/include/libunwind.h	/^  UNW_ARM64_D4  = 68,$/;"	e	enum:__anon69
UNW_ARM64_D5	ThirdParty/libunwind/include/libunwind.h	/^  UNW_ARM64_D5  = 69,$/;"	e	enum:__anon69
UNW_ARM64_D6	ThirdParty/libunwind/include/libunwind.h	/^  UNW_ARM64_D6  = 70,$/;"	e	enum:__anon69
UNW_ARM64_D7	ThirdParty/libunwind/include/libunwind.h	/^  UNW_ARM64_D7  = 71,$/;"	e	enum:__anon69
UNW_ARM64_D8	ThirdParty/libunwind/include/libunwind.h	/^  UNW_ARM64_D8  = 72,$/;"	e	enum:__anon69
UNW_ARM64_D9	ThirdParty/libunwind/include/libunwind.h	/^  UNW_ARM64_D9  = 73,$/;"	e	enum:__anon69
UNW_ARM64_FP	ThirdParty/libunwind/include/libunwind.h	/^  UNW_ARM64_FP  = 29,$/;"	e	enum:__anon69
UNW_ARM64_LR	ThirdParty/libunwind/include/libunwind.h	/^  UNW_ARM64_LR  = 30,$/;"	e	enum:__anon69
UNW_ARM64_SP	ThirdParty/libunwind/include/libunwind.h	/^  UNW_ARM64_SP  = 31,$/;"	e	enum:__anon69
UNW_ARM64_X0	ThirdParty/libunwind/include/libunwind.h	/^  UNW_ARM64_X0  = 0,$/;"	e	enum:__anon69
UNW_ARM64_X1	ThirdParty/libunwind/include/libunwind.h	/^  UNW_ARM64_X1  = 1,$/;"	e	enum:__anon69
UNW_ARM64_X10	ThirdParty/libunwind/include/libunwind.h	/^  UNW_ARM64_X10 = 10,$/;"	e	enum:__anon69
UNW_ARM64_X11	ThirdParty/libunwind/include/libunwind.h	/^  UNW_ARM64_X11 = 11,$/;"	e	enum:__anon69
UNW_ARM64_X12	ThirdParty/libunwind/include/libunwind.h	/^  UNW_ARM64_X12 = 12,$/;"	e	enum:__anon69
UNW_ARM64_X13	ThirdParty/libunwind/include/libunwind.h	/^  UNW_ARM64_X13 = 13,$/;"	e	enum:__anon69
UNW_ARM64_X14	ThirdParty/libunwind/include/libunwind.h	/^  UNW_ARM64_X14 = 14,$/;"	e	enum:__anon69
UNW_ARM64_X15	ThirdParty/libunwind/include/libunwind.h	/^  UNW_ARM64_X15 = 15,$/;"	e	enum:__anon69
UNW_ARM64_X16	ThirdParty/libunwind/include/libunwind.h	/^  UNW_ARM64_X16 = 16,$/;"	e	enum:__anon69
UNW_ARM64_X17	ThirdParty/libunwind/include/libunwind.h	/^  UNW_ARM64_X17 = 17,$/;"	e	enum:__anon69
UNW_ARM64_X18	ThirdParty/libunwind/include/libunwind.h	/^  UNW_ARM64_X18 = 18,$/;"	e	enum:__anon69
UNW_ARM64_X19	ThirdParty/libunwind/include/libunwind.h	/^  UNW_ARM64_X19 = 19,$/;"	e	enum:__anon69
UNW_ARM64_X2	ThirdParty/libunwind/include/libunwind.h	/^  UNW_ARM64_X2  = 2,$/;"	e	enum:__anon69
UNW_ARM64_X20	ThirdParty/libunwind/include/libunwind.h	/^  UNW_ARM64_X20 = 20,$/;"	e	enum:__anon69
UNW_ARM64_X21	ThirdParty/libunwind/include/libunwind.h	/^  UNW_ARM64_X21 = 21,$/;"	e	enum:__anon69
UNW_ARM64_X22	ThirdParty/libunwind/include/libunwind.h	/^  UNW_ARM64_X22 = 22,$/;"	e	enum:__anon69
UNW_ARM64_X23	ThirdParty/libunwind/include/libunwind.h	/^  UNW_ARM64_X23 = 23,$/;"	e	enum:__anon69
UNW_ARM64_X24	ThirdParty/libunwind/include/libunwind.h	/^  UNW_ARM64_X24 = 24,$/;"	e	enum:__anon69
UNW_ARM64_X25	ThirdParty/libunwind/include/libunwind.h	/^  UNW_ARM64_X25 = 25,$/;"	e	enum:__anon69
UNW_ARM64_X26	ThirdParty/libunwind/include/libunwind.h	/^  UNW_ARM64_X26 = 26,$/;"	e	enum:__anon69
UNW_ARM64_X27	ThirdParty/libunwind/include/libunwind.h	/^  UNW_ARM64_X27 = 27,$/;"	e	enum:__anon69
UNW_ARM64_X28	ThirdParty/libunwind/include/libunwind.h	/^  UNW_ARM64_X28 = 28,$/;"	e	enum:__anon69
UNW_ARM64_X29	ThirdParty/libunwind/include/libunwind.h	/^  UNW_ARM64_X29 = 29,$/;"	e	enum:__anon69
UNW_ARM64_X3	ThirdParty/libunwind/include/libunwind.h	/^  UNW_ARM64_X3  = 3,$/;"	e	enum:__anon69
UNW_ARM64_X30	ThirdParty/libunwind/include/libunwind.h	/^  UNW_ARM64_X30 = 30,$/;"	e	enum:__anon69
UNW_ARM64_X31	ThirdParty/libunwind/include/libunwind.h	/^  UNW_ARM64_X31 = 31,$/;"	e	enum:__anon69
UNW_ARM64_X4	ThirdParty/libunwind/include/libunwind.h	/^  UNW_ARM64_X4  = 4,$/;"	e	enum:__anon69
UNW_ARM64_X5	ThirdParty/libunwind/include/libunwind.h	/^  UNW_ARM64_X5  = 5,$/;"	e	enum:__anon69
UNW_ARM64_X6	ThirdParty/libunwind/include/libunwind.h	/^  UNW_ARM64_X6  = 6,$/;"	e	enum:__anon69
UNW_ARM64_X7	ThirdParty/libunwind/include/libunwind.h	/^  UNW_ARM64_X7  = 7,$/;"	e	enum:__anon69
UNW_ARM64_X8	ThirdParty/libunwind/include/libunwind.h	/^  UNW_ARM64_X8  = 8,$/;"	e	enum:__anon69
UNW_ARM64_X9	ThirdParty/libunwind/include/libunwind.h	/^  UNW_ARM64_X9  = 9,$/;"	e	enum:__anon69
UNW_ARM_D0	ThirdParty/libunwind/include/libunwind.h	/^  UNW_ARM_D0  = 256,$/;"	e	enum:__anon70
UNW_ARM_D1	ThirdParty/libunwind/include/libunwind.h	/^  UNW_ARM_D1  = 257,$/;"	e	enum:__anon70
UNW_ARM_D10	ThirdParty/libunwind/include/libunwind.h	/^  UNW_ARM_D10 = 266,$/;"	e	enum:__anon70
UNW_ARM_D11	ThirdParty/libunwind/include/libunwind.h	/^  UNW_ARM_D11 = 267,$/;"	e	enum:__anon70
UNW_ARM_D12	ThirdParty/libunwind/include/libunwind.h	/^  UNW_ARM_D12 = 268,$/;"	e	enum:__anon70
UNW_ARM_D13	ThirdParty/libunwind/include/libunwind.h	/^  UNW_ARM_D13 = 269,$/;"	e	enum:__anon70
UNW_ARM_D14	ThirdParty/libunwind/include/libunwind.h	/^  UNW_ARM_D14 = 270,$/;"	e	enum:__anon70
UNW_ARM_D15	ThirdParty/libunwind/include/libunwind.h	/^  UNW_ARM_D15 = 271,$/;"	e	enum:__anon70
UNW_ARM_D16	ThirdParty/libunwind/include/libunwind.h	/^  UNW_ARM_D16 = 272,$/;"	e	enum:__anon70
UNW_ARM_D17	ThirdParty/libunwind/include/libunwind.h	/^  UNW_ARM_D17 = 273,$/;"	e	enum:__anon70
UNW_ARM_D18	ThirdParty/libunwind/include/libunwind.h	/^  UNW_ARM_D18 = 274,$/;"	e	enum:__anon70
UNW_ARM_D19	ThirdParty/libunwind/include/libunwind.h	/^  UNW_ARM_D19 = 275,$/;"	e	enum:__anon70
UNW_ARM_D2	ThirdParty/libunwind/include/libunwind.h	/^  UNW_ARM_D2  = 258,$/;"	e	enum:__anon70
UNW_ARM_D20	ThirdParty/libunwind/include/libunwind.h	/^  UNW_ARM_D20 = 276,$/;"	e	enum:__anon70
UNW_ARM_D21	ThirdParty/libunwind/include/libunwind.h	/^  UNW_ARM_D21 = 277,$/;"	e	enum:__anon70
UNW_ARM_D22	ThirdParty/libunwind/include/libunwind.h	/^  UNW_ARM_D22 = 278,$/;"	e	enum:__anon70
UNW_ARM_D23	ThirdParty/libunwind/include/libunwind.h	/^  UNW_ARM_D23 = 279,$/;"	e	enum:__anon70
UNW_ARM_D24	ThirdParty/libunwind/include/libunwind.h	/^  UNW_ARM_D24 = 280,$/;"	e	enum:__anon70
UNW_ARM_D25	ThirdParty/libunwind/include/libunwind.h	/^  UNW_ARM_D25 = 281,$/;"	e	enum:__anon70
UNW_ARM_D26	ThirdParty/libunwind/include/libunwind.h	/^  UNW_ARM_D26 = 282,$/;"	e	enum:__anon70
UNW_ARM_D27	ThirdParty/libunwind/include/libunwind.h	/^  UNW_ARM_D27 = 283,$/;"	e	enum:__anon70
UNW_ARM_D28	ThirdParty/libunwind/include/libunwind.h	/^  UNW_ARM_D28 = 284,$/;"	e	enum:__anon70
UNW_ARM_D29	ThirdParty/libunwind/include/libunwind.h	/^  UNW_ARM_D29 = 285,$/;"	e	enum:__anon70
UNW_ARM_D3	ThirdParty/libunwind/include/libunwind.h	/^  UNW_ARM_D3  = 259,$/;"	e	enum:__anon70
UNW_ARM_D30	ThirdParty/libunwind/include/libunwind.h	/^  UNW_ARM_D30 = 286,$/;"	e	enum:__anon70
UNW_ARM_D31	ThirdParty/libunwind/include/libunwind.h	/^  UNW_ARM_D31 = 287,$/;"	e	enum:__anon70
UNW_ARM_D4	ThirdParty/libunwind/include/libunwind.h	/^  UNW_ARM_D4  = 260,$/;"	e	enum:__anon70
UNW_ARM_D5	ThirdParty/libunwind/include/libunwind.h	/^  UNW_ARM_D5  = 261,$/;"	e	enum:__anon70
UNW_ARM_D6	ThirdParty/libunwind/include/libunwind.h	/^  UNW_ARM_D6  = 262,$/;"	e	enum:__anon70
UNW_ARM_D7	ThirdParty/libunwind/include/libunwind.h	/^  UNW_ARM_D7  = 263,$/;"	e	enum:__anon70
UNW_ARM_D8	ThirdParty/libunwind/include/libunwind.h	/^  UNW_ARM_D8  = 264,$/;"	e	enum:__anon70
UNW_ARM_D9	ThirdParty/libunwind/include/libunwind.h	/^  UNW_ARM_D9  = 265,$/;"	e	enum:__anon70
UNW_ARM_IP	ThirdParty/libunwind/include/libunwind.h	/^  UNW_ARM_IP  = 15,  \/\/ Logical alias for UNW_REG_IP$/;"	e	enum:__anon70
UNW_ARM_LR	ThirdParty/libunwind/include/libunwind.h	/^  UNW_ARM_LR  = 14,$/;"	e	enum:__anon70
UNW_ARM_R0	ThirdParty/libunwind/include/libunwind.h	/^  UNW_ARM_R0  = 0,$/;"	e	enum:__anon70
UNW_ARM_R1	ThirdParty/libunwind/include/libunwind.h	/^  UNW_ARM_R1  = 1,$/;"	e	enum:__anon70
UNW_ARM_R10	ThirdParty/libunwind/include/libunwind.h	/^  UNW_ARM_R10 = 10,$/;"	e	enum:__anon70
UNW_ARM_R11	ThirdParty/libunwind/include/libunwind.h	/^  UNW_ARM_R11 = 11,$/;"	e	enum:__anon70
UNW_ARM_R12	ThirdParty/libunwind/include/libunwind.h	/^  UNW_ARM_R12 = 12,$/;"	e	enum:__anon70
UNW_ARM_R13	ThirdParty/libunwind/include/libunwind.h	/^  UNW_ARM_R13 = 13,$/;"	e	enum:__anon70
UNW_ARM_R14	ThirdParty/libunwind/include/libunwind.h	/^  UNW_ARM_R14 = 14,$/;"	e	enum:__anon70
UNW_ARM_R15	ThirdParty/libunwind/include/libunwind.h	/^  UNW_ARM_R15 = 15,$/;"	e	enum:__anon70
UNW_ARM_R2	ThirdParty/libunwind/include/libunwind.h	/^  UNW_ARM_R2  = 2,$/;"	e	enum:__anon70
UNW_ARM_R3	ThirdParty/libunwind/include/libunwind.h	/^  UNW_ARM_R3  = 3,$/;"	e	enum:__anon70
UNW_ARM_R4	ThirdParty/libunwind/include/libunwind.h	/^  UNW_ARM_R4  = 4,$/;"	e	enum:__anon70
UNW_ARM_R5	ThirdParty/libunwind/include/libunwind.h	/^  UNW_ARM_R5  = 5,$/;"	e	enum:__anon70
UNW_ARM_R6	ThirdParty/libunwind/include/libunwind.h	/^  UNW_ARM_R6  = 6,$/;"	e	enum:__anon70
UNW_ARM_R7	ThirdParty/libunwind/include/libunwind.h	/^  UNW_ARM_R7  = 7,$/;"	e	enum:__anon70
UNW_ARM_R8	ThirdParty/libunwind/include/libunwind.h	/^  UNW_ARM_R8  = 8,$/;"	e	enum:__anon70
UNW_ARM_R9	ThirdParty/libunwind/include/libunwind.h	/^  UNW_ARM_R9  = 9,$/;"	e	enum:__anon70
UNW_ARM_S0	ThirdParty/libunwind/include/libunwind.h	/^  UNW_ARM_S0  = 64,$/;"	e	enum:__anon70
UNW_ARM_S1	ThirdParty/libunwind/include/libunwind.h	/^  UNW_ARM_S1  = 65,$/;"	e	enum:__anon70
UNW_ARM_S10	ThirdParty/libunwind/include/libunwind.h	/^  UNW_ARM_S10 = 74,$/;"	e	enum:__anon70
UNW_ARM_S11	ThirdParty/libunwind/include/libunwind.h	/^  UNW_ARM_S11 = 75,$/;"	e	enum:__anon70
UNW_ARM_S12	ThirdParty/libunwind/include/libunwind.h	/^  UNW_ARM_S12 = 76,$/;"	e	enum:__anon70
UNW_ARM_S13	ThirdParty/libunwind/include/libunwind.h	/^  UNW_ARM_S13 = 77,$/;"	e	enum:__anon70
UNW_ARM_S14	ThirdParty/libunwind/include/libunwind.h	/^  UNW_ARM_S14 = 78,$/;"	e	enum:__anon70
UNW_ARM_S15	ThirdParty/libunwind/include/libunwind.h	/^  UNW_ARM_S15 = 79,$/;"	e	enum:__anon70
UNW_ARM_S16	ThirdParty/libunwind/include/libunwind.h	/^  UNW_ARM_S16 = 80,$/;"	e	enum:__anon70
UNW_ARM_S17	ThirdParty/libunwind/include/libunwind.h	/^  UNW_ARM_S17 = 81,$/;"	e	enum:__anon70
UNW_ARM_S18	ThirdParty/libunwind/include/libunwind.h	/^  UNW_ARM_S18 = 82,$/;"	e	enum:__anon70
UNW_ARM_S19	ThirdParty/libunwind/include/libunwind.h	/^  UNW_ARM_S19 = 83,$/;"	e	enum:__anon70
UNW_ARM_S2	ThirdParty/libunwind/include/libunwind.h	/^  UNW_ARM_S2  = 66,$/;"	e	enum:__anon70
UNW_ARM_S20	ThirdParty/libunwind/include/libunwind.h	/^  UNW_ARM_S20 = 84,$/;"	e	enum:__anon70
UNW_ARM_S21	ThirdParty/libunwind/include/libunwind.h	/^  UNW_ARM_S21 = 85,$/;"	e	enum:__anon70
UNW_ARM_S22	ThirdParty/libunwind/include/libunwind.h	/^  UNW_ARM_S22 = 86,$/;"	e	enum:__anon70
UNW_ARM_S23	ThirdParty/libunwind/include/libunwind.h	/^  UNW_ARM_S23 = 87,$/;"	e	enum:__anon70
UNW_ARM_S24	ThirdParty/libunwind/include/libunwind.h	/^  UNW_ARM_S24 = 88,$/;"	e	enum:__anon70
UNW_ARM_S25	ThirdParty/libunwind/include/libunwind.h	/^  UNW_ARM_S25 = 89,$/;"	e	enum:__anon70
UNW_ARM_S26	ThirdParty/libunwind/include/libunwind.h	/^  UNW_ARM_S26 = 90,$/;"	e	enum:__anon70
UNW_ARM_S27	ThirdParty/libunwind/include/libunwind.h	/^  UNW_ARM_S27 = 91,$/;"	e	enum:__anon70
UNW_ARM_S28	ThirdParty/libunwind/include/libunwind.h	/^  UNW_ARM_S28 = 92,$/;"	e	enum:__anon70
UNW_ARM_S29	ThirdParty/libunwind/include/libunwind.h	/^  UNW_ARM_S29 = 93,$/;"	e	enum:__anon70
UNW_ARM_S3	ThirdParty/libunwind/include/libunwind.h	/^  UNW_ARM_S3  = 67,$/;"	e	enum:__anon70
UNW_ARM_S30	ThirdParty/libunwind/include/libunwind.h	/^  UNW_ARM_S30 = 94,$/;"	e	enum:__anon70
UNW_ARM_S31	ThirdParty/libunwind/include/libunwind.h	/^  UNW_ARM_S31 = 95,$/;"	e	enum:__anon70
UNW_ARM_S4	ThirdParty/libunwind/include/libunwind.h	/^  UNW_ARM_S4  = 68,$/;"	e	enum:__anon70
UNW_ARM_S5	ThirdParty/libunwind/include/libunwind.h	/^  UNW_ARM_S5  = 69,$/;"	e	enum:__anon70
UNW_ARM_S6	ThirdParty/libunwind/include/libunwind.h	/^  UNW_ARM_S6  = 70,$/;"	e	enum:__anon70
UNW_ARM_S7	ThirdParty/libunwind/include/libunwind.h	/^  UNW_ARM_S7  = 71,$/;"	e	enum:__anon70
UNW_ARM_S8	ThirdParty/libunwind/include/libunwind.h	/^  UNW_ARM_S8  = 72,$/;"	e	enum:__anon70
UNW_ARM_S9	ThirdParty/libunwind/include/libunwind.h	/^  UNW_ARM_S9  = 73,$/;"	e	enum:__anon70
UNW_ARM_SP	ThirdParty/libunwind/include/libunwind.h	/^  UNW_ARM_SP  = 13,  \/\/ Logical alias for UNW_REG_SP$/;"	e	enum:__anon70
UNW_ARM_WC0	ThirdParty/libunwind/include/libunwind.h	/^  UNW_ARM_WC0 = 192,$/;"	e	enum:__anon70
UNW_ARM_WC1	ThirdParty/libunwind/include/libunwind.h	/^  UNW_ARM_WC1 = 193,$/;"	e	enum:__anon70
UNW_ARM_WC2	ThirdParty/libunwind/include/libunwind.h	/^  UNW_ARM_WC2 = 194,$/;"	e	enum:__anon70
UNW_ARM_WC3	ThirdParty/libunwind/include/libunwind.h	/^  UNW_ARM_WC3 = 195,$/;"	e	enum:__anon70
UNW_ARM_WR0	ThirdParty/libunwind/include/libunwind.h	/^  UNW_ARM_WR0 = 112,$/;"	e	enum:__anon70
UNW_ARM_WR1	ThirdParty/libunwind/include/libunwind.h	/^  UNW_ARM_WR1 = 113,$/;"	e	enum:__anon70
UNW_ARM_WR10	ThirdParty/libunwind/include/libunwind.h	/^  UNW_ARM_WR10 = 122,$/;"	e	enum:__anon70
UNW_ARM_WR11	ThirdParty/libunwind/include/libunwind.h	/^  UNW_ARM_WR11 = 123,$/;"	e	enum:__anon70
UNW_ARM_WR12	ThirdParty/libunwind/include/libunwind.h	/^  UNW_ARM_WR12 = 124,$/;"	e	enum:__anon70
UNW_ARM_WR13	ThirdParty/libunwind/include/libunwind.h	/^  UNW_ARM_WR13 = 125,$/;"	e	enum:__anon70
UNW_ARM_WR14	ThirdParty/libunwind/include/libunwind.h	/^  UNW_ARM_WR14 = 126,$/;"	e	enum:__anon70
UNW_ARM_WR15	ThirdParty/libunwind/include/libunwind.h	/^  UNW_ARM_WR15 = 127,$/;"	e	enum:__anon70
UNW_ARM_WR2	ThirdParty/libunwind/include/libunwind.h	/^  UNW_ARM_WR2 = 114,$/;"	e	enum:__anon70
UNW_ARM_WR3	ThirdParty/libunwind/include/libunwind.h	/^  UNW_ARM_WR3 = 115,$/;"	e	enum:__anon70
UNW_ARM_WR4	ThirdParty/libunwind/include/libunwind.h	/^  UNW_ARM_WR4 = 116,$/;"	e	enum:__anon70
UNW_ARM_WR5	ThirdParty/libunwind/include/libunwind.h	/^  UNW_ARM_WR5 = 117,$/;"	e	enum:__anon70
UNW_ARM_WR6	ThirdParty/libunwind/include/libunwind.h	/^  UNW_ARM_WR6 = 118,$/;"	e	enum:__anon70
UNW_ARM_WR7	ThirdParty/libunwind/include/libunwind.h	/^  UNW_ARM_WR7 = 119,$/;"	e	enum:__anon70
UNW_ARM_WR8	ThirdParty/libunwind/include/libunwind.h	/^  UNW_ARM_WR8 = 120,$/;"	e	enum:__anon70
UNW_ARM_WR9	ThirdParty/libunwind/include/libunwind.h	/^  UNW_ARM_WR9 = 121,$/;"	e	enum:__anon70
UNW_EBADFRAME	ThirdParty/libunwind/include/libunwind.h	/^  UNW_EBADFRAME     = -6546, \/* bad frame *\/$/;"	e	enum:__anon63
UNW_EBADREG	ThirdParty/libunwind/include/libunwind.h	/^  UNW_EBADREG       = -6542, \/* bad register number *\/$/;"	e	enum:__anon63
UNW_EBADVERSION	ThirdParty/libunwind/include/libunwind.h	/^  UNW_EBADVERSION   = -6548, \/* unwind info has unsupported version *\/$/;"	e	enum:__anon63
UNW_EINVAL	ThirdParty/libunwind/include/libunwind.h	/^  UNW_EINVAL        = -6547, \/* unsupported operation or bad value *\/$/;"	e	enum:__anon63
UNW_EINVALIDIP	ThirdParty/libunwind/include/libunwind.h	/^  UNW_EINVALIDIP    = -6545, \/* invalid IP *\/$/;"	e	enum:__anon63
UNW_ENOINFO	ThirdParty/libunwind/include/libunwind.h	/^  UNW_ENOINFO       = -6549  \/* no unwind info found *\/$/;"	e	enum:__anon63
UNW_ENOMEM	ThirdParty/libunwind/include/libunwind.h	/^  UNW_ENOMEM        = -6541, \/* out of memory *\/$/;"	e	enum:__anon63
UNW_EREADONLYREG	ThirdParty/libunwind/include/libunwind.h	/^  UNW_EREADONLYREG  = -6543, \/* attempt to write read-only register *\/$/;"	e	enum:__anon63
UNW_ESTOPUNWIND	ThirdParty/libunwind/include/libunwind.h	/^  UNW_ESTOPUNWIND   = -6544, \/* stop unwinding *\/$/;"	e	enum:__anon63
UNW_ESUCCESS	ThirdParty/libunwind/include/libunwind.h	/^  UNW_ESUCCESS      = 0,     \/* no error *\/$/;"	e	enum:__anon63
UNW_EUNSPEC	ThirdParty/libunwind/include/libunwind.h	/^  UNW_EUNSPEC       = -6540, \/* unspecified (general) error *\/$/;"	e	enum:__anon63
UNW_EXIDX_CANTUNWIND	ThirdParty/libunwind/src/Unwind-EHABI.h	/^#define UNW_EXIDX_CANTUNWIND /;"	d
UNW_LOCAL_ONLY	Lib/Platform/POSIX/Diagnostics.cpp	/^#define UNW_LOCAL_ONLY$/;"	d	file:
UNW_MIPS_HI	ThirdParty/libunwind/include/libunwind.h	/^  UNW_MIPS_HI = 64,$/;"	e	enum:__anon72
UNW_MIPS_LO	ThirdParty/libunwind/include/libunwind.h	/^  UNW_MIPS_LO = 65,$/;"	e	enum:__anon72
UNW_MIPS_R0	ThirdParty/libunwind/include/libunwind.h	/^  UNW_MIPS_R0  = 0,$/;"	e	enum:__anon72
UNW_MIPS_R1	ThirdParty/libunwind/include/libunwind.h	/^  UNW_MIPS_R1  = 1,$/;"	e	enum:__anon72
UNW_MIPS_R10	ThirdParty/libunwind/include/libunwind.h	/^  UNW_MIPS_R10 = 10,$/;"	e	enum:__anon72
UNW_MIPS_R11	ThirdParty/libunwind/include/libunwind.h	/^  UNW_MIPS_R11 = 11,$/;"	e	enum:__anon72
UNW_MIPS_R12	ThirdParty/libunwind/include/libunwind.h	/^  UNW_MIPS_R12 = 12,$/;"	e	enum:__anon72
UNW_MIPS_R13	ThirdParty/libunwind/include/libunwind.h	/^  UNW_MIPS_R13 = 13,$/;"	e	enum:__anon72
UNW_MIPS_R14	ThirdParty/libunwind/include/libunwind.h	/^  UNW_MIPS_R14 = 14,$/;"	e	enum:__anon72
UNW_MIPS_R15	ThirdParty/libunwind/include/libunwind.h	/^  UNW_MIPS_R15 = 15,$/;"	e	enum:__anon72
UNW_MIPS_R16	ThirdParty/libunwind/include/libunwind.h	/^  UNW_MIPS_R16 = 16,$/;"	e	enum:__anon72
UNW_MIPS_R17	ThirdParty/libunwind/include/libunwind.h	/^  UNW_MIPS_R17 = 17,$/;"	e	enum:__anon72
UNW_MIPS_R18	ThirdParty/libunwind/include/libunwind.h	/^  UNW_MIPS_R18 = 18,$/;"	e	enum:__anon72
UNW_MIPS_R19	ThirdParty/libunwind/include/libunwind.h	/^  UNW_MIPS_R19 = 19,$/;"	e	enum:__anon72
UNW_MIPS_R2	ThirdParty/libunwind/include/libunwind.h	/^  UNW_MIPS_R2  = 2,$/;"	e	enum:__anon72
UNW_MIPS_R20	ThirdParty/libunwind/include/libunwind.h	/^  UNW_MIPS_R20 = 20,$/;"	e	enum:__anon72
UNW_MIPS_R21	ThirdParty/libunwind/include/libunwind.h	/^  UNW_MIPS_R21 = 21,$/;"	e	enum:__anon72
UNW_MIPS_R22	ThirdParty/libunwind/include/libunwind.h	/^  UNW_MIPS_R22 = 22,$/;"	e	enum:__anon72
UNW_MIPS_R23	ThirdParty/libunwind/include/libunwind.h	/^  UNW_MIPS_R23 = 23,$/;"	e	enum:__anon72
UNW_MIPS_R24	ThirdParty/libunwind/include/libunwind.h	/^  UNW_MIPS_R24 = 24,$/;"	e	enum:__anon72
UNW_MIPS_R25	ThirdParty/libunwind/include/libunwind.h	/^  UNW_MIPS_R25 = 25,$/;"	e	enum:__anon72
UNW_MIPS_R26	ThirdParty/libunwind/include/libunwind.h	/^  UNW_MIPS_R26 = 26,$/;"	e	enum:__anon72
UNW_MIPS_R27	ThirdParty/libunwind/include/libunwind.h	/^  UNW_MIPS_R27 = 27,$/;"	e	enum:__anon72
UNW_MIPS_R28	ThirdParty/libunwind/include/libunwind.h	/^  UNW_MIPS_R28 = 28,$/;"	e	enum:__anon72
UNW_MIPS_R29	ThirdParty/libunwind/include/libunwind.h	/^  UNW_MIPS_R29 = 29,$/;"	e	enum:__anon72
UNW_MIPS_R3	ThirdParty/libunwind/include/libunwind.h	/^  UNW_MIPS_R3  = 3,$/;"	e	enum:__anon72
UNW_MIPS_R30	ThirdParty/libunwind/include/libunwind.h	/^  UNW_MIPS_R30 = 30,$/;"	e	enum:__anon72
UNW_MIPS_R31	ThirdParty/libunwind/include/libunwind.h	/^  UNW_MIPS_R31 = 31,$/;"	e	enum:__anon72
UNW_MIPS_R4	ThirdParty/libunwind/include/libunwind.h	/^  UNW_MIPS_R4  = 4,$/;"	e	enum:__anon72
UNW_MIPS_R5	ThirdParty/libunwind/include/libunwind.h	/^  UNW_MIPS_R5  = 5,$/;"	e	enum:__anon72
UNW_MIPS_R6	ThirdParty/libunwind/include/libunwind.h	/^  UNW_MIPS_R6  = 6,$/;"	e	enum:__anon72
UNW_MIPS_R7	ThirdParty/libunwind/include/libunwind.h	/^  UNW_MIPS_R7  = 7,$/;"	e	enum:__anon72
UNW_MIPS_R8	ThirdParty/libunwind/include/libunwind.h	/^  UNW_MIPS_R8  = 8,$/;"	e	enum:__anon72
UNW_MIPS_R9	ThirdParty/libunwind/include/libunwind.h	/^  UNW_MIPS_R9  = 9,$/;"	e	enum:__anon72
UNW_OR1K_R0	ThirdParty/libunwind/include/libunwind.h	/^  UNW_OR1K_R0  = 0,$/;"	e	enum:__anon71
UNW_OR1K_R1	ThirdParty/libunwind/include/libunwind.h	/^  UNW_OR1K_R1  = 1,$/;"	e	enum:__anon71
UNW_OR1K_R10	ThirdParty/libunwind/include/libunwind.h	/^  UNW_OR1K_R10 = 10,$/;"	e	enum:__anon71
UNW_OR1K_R11	ThirdParty/libunwind/include/libunwind.h	/^  UNW_OR1K_R11 = 11,$/;"	e	enum:__anon71
UNW_OR1K_R12	ThirdParty/libunwind/include/libunwind.h	/^  UNW_OR1K_R12 = 12,$/;"	e	enum:__anon71
UNW_OR1K_R13	ThirdParty/libunwind/include/libunwind.h	/^  UNW_OR1K_R13 = 13,$/;"	e	enum:__anon71
UNW_OR1K_R14	ThirdParty/libunwind/include/libunwind.h	/^  UNW_OR1K_R14 = 14,$/;"	e	enum:__anon71
UNW_OR1K_R15	ThirdParty/libunwind/include/libunwind.h	/^  UNW_OR1K_R15 = 15,$/;"	e	enum:__anon71
UNW_OR1K_R16	ThirdParty/libunwind/include/libunwind.h	/^  UNW_OR1K_R16 = 16,$/;"	e	enum:__anon71
UNW_OR1K_R17	ThirdParty/libunwind/include/libunwind.h	/^  UNW_OR1K_R17 = 17,$/;"	e	enum:__anon71
UNW_OR1K_R18	ThirdParty/libunwind/include/libunwind.h	/^  UNW_OR1K_R18 = 18,$/;"	e	enum:__anon71
UNW_OR1K_R19	ThirdParty/libunwind/include/libunwind.h	/^  UNW_OR1K_R19 = 19,$/;"	e	enum:__anon71
UNW_OR1K_R2	ThirdParty/libunwind/include/libunwind.h	/^  UNW_OR1K_R2  = 2,$/;"	e	enum:__anon71
UNW_OR1K_R20	ThirdParty/libunwind/include/libunwind.h	/^  UNW_OR1K_R20 = 20,$/;"	e	enum:__anon71
UNW_OR1K_R21	ThirdParty/libunwind/include/libunwind.h	/^  UNW_OR1K_R21 = 21,$/;"	e	enum:__anon71
UNW_OR1K_R22	ThirdParty/libunwind/include/libunwind.h	/^  UNW_OR1K_R22 = 22,$/;"	e	enum:__anon71
UNW_OR1K_R23	ThirdParty/libunwind/include/libunwind.h	/^  UNW_OR1K_R23 = 23,$/;"	e	enum:__anon71
UNW_OR1K_R24	ThirdParty/libunwind/include/libunwind.h	/^  UNW_OR1K_R24 = 24,$/;"	e	enum:__anon71
UNW_OR1K_R25	ThirdParty/libunwind/include/libunwind.h	/^  UNW_OR1K_R25 = 25,$/;"	e	enum:__anon71
UNW_OR1K_R26	ThirdParty/libunwind/include/libunwind.h	/^  UNW_OR1K_R26 = 26,$/;"	e	enum:__anon71
UNW_OR1K_R27	ThirdParty/libunwind/include/libunwind.h	/^  UNW_OR1K_R27 = 27,$/;"	e	enum:__anon71
UNW_OR1K_R28	ThirdParty/libunwind/include/libunwind.h	/^  UNW_OR1K_R28 = 28,$/;"	e	enum:__anon71
UNW_OR1K_R29	ThirdParty/libunwind/include/libunwind.h	/^  UNW_OR1K_R29 = 29,$/;"	e	enum:__anon71
UNW_OR1K_R3	ThirdParty/libunwind/include/libunwind.h	/^  UNW_OR1K_R3  = 3,$/;"	e	enum:__anon71
UNW_OR1K_R30	ThirdParty/libunwind/include/libunwind.h	/^  UNW_OR1K_R30 = 30,$/;"	e	enum:__anon71
UNW_OR1K_R31	ThirdParty/libunwind/include/libunwind.h	/^  UNW_OR1K_R31 = 31,$/;"	e	enum:__anon71
UNW_OR1K_R4	ThirdParty/libunwind/include/libunwind.h	/^  UNW_OR1K_R4  = 4,$/;"	e	enum:__anon71
UNW_OR1K_R5	ThirdParty/libunwind/include/libunwind.h	/^  UNW_OR1K_R5  = 5,$/;"	e	enum:__anon71
UNW_OR1K_R6	ThirdParty/libunwind/include/libunwind.h	/^  UNW_OR1K_R6  = 6,$/;"	e	enum:__anon71
UNW_OR1K_R7	ThirdParty/libunwind/include/libunwind.h	/^  UNW_OR1K_R7  = 7,$/;"	e	enum:__anon71
UNW_OR1K_R8	ThirdParty/libunwind/include/libunwind.h	/^  UNW_OR1K_R8  = 8,$/;"	e	enum:__anon71
UNW_OR1K_R9	ThirdParty/libunwind/include/libunwind.h	/^  UNW_OR1K_R9  = 9,$/;"	e	enum:__anon71
UNW_PPC64_CR0	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC64_CR0     = 68,$/;"	e	enum:__anon68
UNW_PPC64_CR1	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC64_CR1     = 69,$/;"	e	enum:__anon68
UNW_PPC64_CR2	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC64_CR2     = 70,$/;"	e	enum:__anon68
UNW_PPC64_CR3	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC64_CR3     = 71,$/;"	e	enum:__anon68
UNW_PPC64_CR4	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC64_CR4     = 72,$/;"	e	enum:__anon68
UNW_PPC64_CR5	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC64_CR5     = 73,$/;"	e	enum:__anon68
UNW_PPC64_CR6	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC64_CR6     = 74,$/;"	e	enum:__anon68
UNW_PPC64_CR7	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC64_CR7     = 75,$/;"	e	enum:__anon68
UNW_PPC64_CTR	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC64_CTR     = 66,$/;"	e	enum:__anon68
UNW_PPC64_F0	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC64_F0      = 32,$/;"	e	enum:__anon68
UNW_PPC64_F1	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC64_F1      = 33,$/;"	e	enum:__anon68
UNW_PPC64_F10	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC64_F10     = 42,$/;"	e	enum:__anon68
UNW_PPC64_F11	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC64_F11     = 43,$/;"	e	enum:__anon68
UNW_PPC64_F12	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC64_F12     = 44,$/;"	e	enum:__anon68
UNW_PPC64_F13	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC64_F13     = 45,$/;"	e	enum:__anon68
UNW_PPC64_F14	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC64_F14     = 46,$/;"	e	enum:__anon68
UNW_PPC64_F15	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC64_F15     = 47,$/;"	e	enum:__anon68
UNW_PPC64_F16	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC64_F16     = 48,$/;"	e	enum:__anon68
UNW_PPC64_F17	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC64_F17     = 49,$/;"	e	enum:__anon68
UNW_PPC64_F18	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC64_F18     = 50,$/;"	e	enum:__anon68
UNW_PPC64_F19	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC64_F19     = 51,$/;"	e	enum:__anon68
UNW_PPC64_F2	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC64_F2      = 34,$/;"	e	enum:__anon68
UNW_PPC64_F20	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC64_F20     = 52,$/;"	e	enum:__anon68
UNW_PPC64_F21	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC64_F21     = 53,$/;"	e	enum:__anon68
UNW_PPC64_F22	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC64_F22     = 54,$/;"	e	enum:__anon68
UNW_PPC64_F23	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC64_F23     = 55,$/;"	e	enum:__anon68
UNW_PPC64_F24	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC64_F24     = 56,$/;"	e	enum:__anon68
UNW_PPC64_F25	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC64_F25     = 57,$/;"	e	enum:__anon68
UNW_PPC64_F26	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC64_F26     = 58,$/;"	e	enum:__anon68
UNW_PPC64_F27	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC64_F27     = 59,$/;"	e	enum:__anon68
UNW_PPC64_F28	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC64_F28     = 60,$/;"	e	enum:__anon68
UNW_PPC64_F29	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC64_F29     = 61,$/;"	e	enum:__anon68
UNW_PPC64_F3	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC64_F3      = 35,$/;"	e	enum:__anon68
UNW_PPC64_F30	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC64_F30     = 62,$/;"	e	enum:__anon68
UNW_PPC64_F31	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC64_F31     = 63,$/;"	e	enum:__anon68
UNW_PPC64_F4	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC64_F4      = 36,$/;"	e	enum:__anon68
UNW_PPC64_F5	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC64_F5      = 37,$/;"	e	enum:__anon68
UNW_PPC64_F6	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC64_F6      = 38,$/;"	e	enum:__anon68
UNW_PPC64_F7	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC64_F7      = 39,$/;"	e	enum:__anon68
UNW_PPC64_F8	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC64_F8      = 40,$/;"	e	enum:__anon68
UNW_PPC64_F9	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC64_F9      = 41,$/;"	e	enum:__anon68
UNW_PPC64_LR	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC64_LR      = 65,$/;"	e	enum:__anon68
UNW_PPC64_R0	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC64_R0      = 0,$/;"	e	enum:__anon68
UNW_PPC64_R1	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC64_R1      = 1,$/;"	e	enum:__anon68
UNW_PPC64_R10	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC64_R10     = 10,$/;"	e	enum:__anon68
UNW_PPC64_R11	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC64_R11     = 11,$/;"	e	enum:__anon68
UNW_PPC64_R12	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC64_R12     = 12,$/;"	e	enum:__anon68
UNW_PPC64_R13	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC64_R13     = 13,$/;"	e	enum:__anon68
UNW_PPC64_R14	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC64_R14     = 14,$/;"	e	enum:__anon68
UNW_PPC64_R15	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC64_R15     = 15,$/;"	e	enum:__anon68
UNW_PPC64_R16	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC64_R16     = 16,$/;"	e	enum:__anon68
UNW_PPC64_R17	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC64_R17     = 17,$/;"	e	enum:__anon68
UNW_PPC64_R18	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC64_R18     = 18,$/;"	e	enum:__anon68
UNW_PPC64_R19	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC64_R19     = 19,$/;"	e	enum:__anon68
UNW_PPC64_R2	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC64_R2      = 2,$/;"	e	enum:__anon68
UNW_PPC64_R20	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC64_R20     = 20,$/;"	e	enum:__anon68
UNW_PPC64_R21	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC64_R21     = 21,$/;"	e	enum:__anon68
UNW_PPC64_R22	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC64_R22     = 22,$/;"	e	enum:__anon68
UNW_PPC64_R23	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC64_R23     = 23,$/;"	e	enum:__anon68
UNW_PPC64_R24	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC64_R24     = 24,$/;"	e	enum:__anon68
UNW_PPC64_R25	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC64_R25     = 25,$/;"	e	enum:__anon68
UNW_PPC64_R26	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC64_R26     = 26,$/;"	e	enum:__anon68
UNW_PPC64_R27	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC64_R27     = 27,$/;"	e	enum:__anon68
UNW_PPC64_R28	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC64_R28     = 28,$/;"	e	enum:__anon68
UNW_PPC64_R29	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC64_R29     = 29,$/;"	e	enum:__anon68
UNW_PPC64_R3	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC64_R3      = 3,$/;"	e	enum:__anon68
UNW_PPC64_R30	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC64_R30     = 30,$/;"	e	enum:__anon68
UNW_PPC64_R31	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC64_R31     = 31,$/;"	e	enum:__anon68
UNW_PPC64_R4	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC64_R4      = 4,$/;"	e	enum:__anon68
UNW_PPC64_R5	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC64_R5      = 5,$/;"	e	enum:__anon68
UNW_PPC64_R6	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC64_R6      = 6,$/;"	e	enum:__anon68
UNW_PPC64_R7	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC64_R7      = 7,$/;"	e	enum:__anon68
UNW_PPC64_R8	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC64_R8      = 8,$/;"	e	enum:__anon68
UNW_PPC64_R9	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC64_R9      = 9,$/;"	e	enum:__anon68
UNW_PPC64_TEXASR	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC64_TEXASR  = 116,$/;"	e	enum:__anon68
UNW_PPC64_TFHAR	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC64_TFHAR   = 114,$/;"	e	enum:__anon68
UNW_PPC64_TFIAR	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC64_TFIAR   = 115,$/;"	e	enum:__anon68
UNW_PPC64_V0	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC64_V0      = 77,$/;"	e	enum:__anon68
UNW_PPC64_V1	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC64_V1      = 78,$/;"	e	enum:__anon68
UNW_PPC64_V10	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC64_V10     = 87,$/;"	e	enum:__anon68
UNW_PPC64_V11	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC64_V11     = 88,$/;"	e	enum:__anon68
UNW_PPC64_V12	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC64_V12     = 89,$/;"	e	enum:__anon68
UNW_PPC64_V13	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC64_V13     = 90,$/;"	e	enum:__anon68
UNW_PPC64_V14	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC64_V14     = 91,$/;"	e	enum:__anon68
UNW_PPC64_V15	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC64_V15     = 92,$/;"	e	enum:__anon68
UNW_PPC64_V16	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC64_V16     = 93,$/;"	e	enum:__anon68
UNW_PPC64_V17	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC64_V17     = 94,$/;"	e	enum:__anon68
UNW_PPC64_V18	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC64_V18     = 95,$/;"	e	enum:__anon68
UNW_PPC64_V19	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC64_V19     = 96,$/;"	e	enum:__anon68
UNW_PPC64_V2	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC64_V2      = 79,$/;"	e	enum:__anon68
UNW_PPC64_V20	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC64_V20     = 97,$/;"	e	enum:__anon68
UNW_PPC64_V21	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC64_V21     = 98,$/;"	e	enum:__anon68
UNW_PPC64_V22	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC64_V22     = 99,$/;"	e	enum:__anon68
UNW_PPC64_V23	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC64_V23     = 100,$/;"	e	enum:__anon68
UNW_PPC64_V24	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC64_V24     = 101,$/;"	e	enum:__anon68
UNW_PPC64_V25	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC64_V25     = 102,$/;"	e	enum:__anon68
UNW_PPC64_V26	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC64_V26     = 103,$/;"	e	enum:__anon68
UNW_PPC64_V27	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC64_V27     = 104,$/;"	e	enum:__anon68
UNW_PPC64_V28	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC64_V28     = 105,$/;"	e	enum:__anon68
UNW_PPC64_V29	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC64_V29     = 106,$/;"	e	enum:__anon68
UNW_PPC64_V3	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC64_V3      = 80,$/;"	e	enum:__anon68
UNW_PPC64_V30	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC64_V30     = 107,$/;"	e	enum:__anon68
UNW_PPC64_V31	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC64_V31     = 108,$/;"	e	enum:__anon68
UNW_PPC64_V4	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC64_V4      = 81,$/;"	e	enum:__anon68
UNW_PPC64_V5	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC64_V5      = 82,$/;"	e	enum:__anon68
UNW_PPC64_V6	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC64_V6      = 83,$/;"	e	enum:__anon68
UNW_PPC64_V7	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC64_V7      = 84,$/;"	e	enum:__anon68
UNW_PPC64_V8	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC64_V8      = 85,$/;"	e	enum:__anon68
UNW_PPC64_V9	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC64_V9      = 86,$/;"	e	enum:__anon68
UNW_PPC64_VRSAVE	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC64_VRSAVE  = 109,$/;"	e	enum:__anon68
UNW_PPC64_VS0	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC64_VS0     = UNW_PPC64_F0,$/;"	e	enum:__anon68
UNW_PPC64_VS1	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC64_VS1     = UNW_PPC64_F1,$/;"	e	enum:__anon68
UNW_PPC64_VS10	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC64_VS10    = UNW_PPC64_F10,$/;"	e	enum:__anon68
UNW_PPC64_VS11	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC64_VS11    = UNW_PPC64_F11,$/;"	e	enum:__anon68
UNW_PPC64_VS12	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC64_VS12    = UNW_PPC64_F12,$/;"	e	enum:__anon68
UNW_PPC64_VS13	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC64_VS13    = UNW_PPC64_F13,$/;"	e	enum:__anon68
UNW_PPC64_VS14	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC64_VS14    = UNW_PPC64_F14,$/;"	e	enum:__anon68
UNW_PPC64_VS15	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC64_VS15    = UNW_PPC64_F15,$/;"	e	enum:__anon68
UNW_PPC64_VS16	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC64_VS16    = UNW_PPC64_F16,$/;"	e	enum:__anon68
UNW_PPC64_VS17	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC64_VS17    = UNW_PPC64_F17,$/;"	e	enum:__anon68
UNW_PPC64_VS18	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC64_VS18    = UNW_PPC64_F18,$/;"	e	enum:__anon68
UNW_PPC64_VS19	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC64_VS19    = UNW_PPC64_F19,$/;"	e	enum:__anon68
UNW_PPC64_VS2	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC64_VS2     = UNW_PPC64_F2,$/;"	e	enum:__anon68
UNW_PPC64_VS20	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC64_VS20    = UNW_PPC64_F20,$/;"	e	enum:__anon68
UNW_PPC64_VS21	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC64_VS21    = UNW_PPC64_F21,$/;"	e	enum:__anon68
UNW_PPC64_VS22	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC64_VS22    = UNW_PPC64_F22,$/;"	e	enum:__anon68
UNW_PPC64_VS23	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC64_VS23    = UNW_PPC64_F23,$/;"	e	enum:__anon68
UNW_PPC64_VS24	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC64_VS24    = UNW_PPC64_F24,$/;"	e	enum:__anon68
UNW_PPC64_VS25	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC64_VS25    = UNW_PPC64_F25,$/;"	e	enum:__anon68
UNW_PPC64_VS26	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC64_VS26    = UNW_PPC64_F26,$/;"	e	enum:__anon68
UNW_PPC64_VS27	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC64_VS27    = UNW_PPC64_F27,$/;"	e	enum:__anon68
UNW_PPC64_VS28	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC64_VS28    = UNW_PPC64_F28,$/;"	e	enum:__anon68
UNW_PPC64_VS29	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC64_VS29    = UNW_PPC64_F29,$/;"	e	enum:__anon68
UNW_PPC64_VS3	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC64_VS3     = UNW_PPC64_F3,$/;"	e	enum:__anon68
UNW_PPC64_VS30	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC64_VS30    = UNW_PPC64_F30,$/;"	e	enum:__anon68
UNW_PPC64_VS31	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC64_VS31    = UNW_PPC64_F31,$/;"	e	enum:__anon68
UNW_PPC64_VS32	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC64_VS32    = UNW_PPC64_V0,$/;"	e	enum:__anon68
UNW_PPC64_VS33	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC64_VS33    = UNW_PPC64_V1,$/;"	e	enum:__anon68
UNW_PPC64_VS34	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC64_VS34    = UNW_PPC64_V2,$/;"	e	enum:__anon68
UNW_PPC64_VS35	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC64_VS35    = UNW_PPC64_V3,$/;"	e	enum:__anon68
UNW_PPC64_VS36	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC64_VS36    = UNW_PPC64_V4,$/;"	e	enum:__anon68
UNW_PPC64_VS37	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC64_VS37    = UNW_PPC64_V5,$/;"	e	enum:__anon68
UNW_PPC64_VS38	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC64_VS38    = UNW_PPC64_V6,$/;"	e	enum:__anon68
UNW_PPC64_VS39	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC64_VS39    = UNW_PPC64_V7,$/;"	e	enum:__anon68
UNW_PPC64_VS4	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC64_VS4     = UNW_PPC64_F4,$/;"	e	enum:__anon68
UNW_PPC64_VS40	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC64_VS40    = UNW_PPC64_V8,$/;"	e	enum:__anon68
UNW_PPC64_VS41	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC64_VS41    = UNW_PPC64_V9,$/;"	e	enum:__anon68
UNW_PPC64_VS42	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC64_VS42    = UNW_PPC64_V10,$/;"	e	enum:__anon68
UNW_PPC64_VS43	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC64_VS43    = UNW_PPC64_V11,$/;"	e	enum:__anon68
UNW_PPC64_VS44	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC64_VS44    = UNW_PPC64_V12,$/;"	e	enum:__anon68
UNW_PPC64_VS45	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC64_VS45    = UNW_PPC64_V13,$/;"	e	enum:__anon68
UNW_PPC64_VS46	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC64_VS46    = UNW_PPC64_V14,$/;"	e	enum:__anon68
UNW_PPC64_VS47	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC64_VS47    = UNW_PPC64_V15,$/;"	e	enum:__anon68
UNW_PPC64_VS48	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC64_VS48    = UNW_PPC64_V16,$/;"	e	enum:__anon68
UNW_PPC64_VS49	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC64_VS49    = UNW_PPC64_V17,$/;"	e	enum:__anon68
UNW_PPC64_VS5	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC64_VS5     = UNW_PPC64_F5,$/;"	e	enum:__anon68
UNW_PPC64_VS50	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC64_VS50    = UNW_PPC64_V18,$/;"	e	enum:__anon68
UNW_PPC64_VS51	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC64_VS51    = UNW_PPC64_V19,$/;"	e	enum:__anon68
UNW_PPC64_VS52	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC64_VS52    = UNW_PPC64_V20,$/;"	e	enum:__anon68
UNW_PPC64_VS53	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC64_VS53    = UNW_PPC64_V21,$/;"	e	enum:__anon68
UNW_PPC64_VS54	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC64_VS54    = UNW_PPC64_V22,$/;"	e	enum:__anon68
UNW_PPC64_VS55	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC64_VS55    = UNW_PPC64_V23,$/;"	e	enum:__anon68
UNW_PPC64_VS56	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC64_VS56    = UNW_PPC64_V24,$/;"	e	enum:__anon68
UNW_PPC64_VS57	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC64_VS57    = UNW_PPC64_V25,$/;"	e	enum:__anon68
UNW_PPC64_VS58	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC64_VS58    = UNW_PPC64_V26,$/;"	e	enum:__anon68
UNW_PPC64_VS59	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC64_VS59    = UNW_PPC64_V27,$/;"	e	enum:__anon68
UNW_PPC64_VS6	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC64_VS6     = UNW_PPC64_F6,$/;"	e	enum:__anon68
UNW_PPC64_VS60	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC64_VS60    = UNW_PPC64_V28,$/;"	e	enum:__anon68
UNW_PPC64_VS61	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC64_VS61    = UNW_PPC64_V29,$/;"	e	enum:__anon68
UNW_PPC64_VS62	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC64_VS62    = UNW_PPC64_V30,$/;"	e	enum:__anon68
UNW_PPC64_VS63	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC64_VS63    = UNW_PPC64_V31$/;"	e	enum:__anon68
UNW_PPC64_VS7	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC64_VS7     = UNW_PPC64_F7,$/;"	e	enum:__anon68
UNW_PPC64_VS8	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC64_VS8     = UNW_PPC64_F8,$/;"	e	enum:__anon68
UNW_PPC64_VS9	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC64_VS9     = UNW_PPC64_F9,$/;"	e	enum:__anon68
UNW_PPC64_VSCR	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC64_VSCR    = 110,$/;"	e	enum:__anon68
UNW_PPC64_XER	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC64_XER     = 76,$/;"	e	enum:__anon68
UNW_PPC_AP	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC_AP  = 67,$/;"	e	enum:__anon67
UNW_PPC_CR0	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC_CR0 = 68,$/;"	e	enum:__anon67
UNW_PPC_CR1	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC_CR1 = 69,$/;"	e	enum:__anon67
UNW_PPC_CR2	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC_CR2 = 70,$/;"	e	enum:__anon67
UNW_PPC_CR3	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC_CR3 = 71,$/;"	e	enum:__anon67
UNW_PPC_CR4	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC_CR4 = 72,$/;"	e	enum:__anon67
UNW_PPC_CR5	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC_CR5 = 73,$/;"	e	enum:__anon67
UNW_PPC_CR6	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC_CR6 = 74,$/;"	e	enum:__anon67
UNW_PPC_CR7	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC_CR7 = 75,$/;"	e	enum:__anon67
UNW_PPC_CTR	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC_CTR = 66,$/;"	e	enum:__anon67
UNW_PPC_F0	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC_F0  = 32,$/;"	e	enum:__anon67
UNW_PPC_F1	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC_F1  = 33,$/;"	e	enum:__anon67
UNW_PPC_F10	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC_F10 = 42,$/;"	e	enum:__anon67
UNW_PPC_F11	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC_F11 = 43,$/;"	e	enum:__anon67
UNW_PPC_F12	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC_F12 = 44,$/;"	e	enum:__anon67
UNW_PPC_F13	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC_F13 = 45,$/;"	e	enum:__anon67
UNW_PPC_F14	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC_F14 = 46,$/;"	e	enum:__anon67
UNW_PPC_F15	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC_F15 = 47,$/;"	e	enum:__anon67
UNW_PPC_F16	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC_F16 = 48,$/;"	e	enum:__anon67
UNW_PPC_F17	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC_F17 = 49,$/;"	e	enum:__anon67
UNW_PPC_F18	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC_F18 = 50,$/;"	e	enum:__anon67
UNW_PPC_F19	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC_F19 = 51,$/;"	e	enum:__anon67
UNW_PPC_F2	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC_F2  = 34,$/;"	e	enum:__anon67
UNW_PPC_F20	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC_F20 = 52,$/;"	e	enum:__anon67
UNW_PPC_F21	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC_F21 = 53,$/;"	e	enum:__anon67
UNW_PPC_F22	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC_F22 = 54,$/;"	e	enum:__anon67
UNW_PPC_F23	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC_F23 = 55,$/;"	e	enum:__anon67
UNW_PPC_F24	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC_F24 = 56,$/;"	e	enum:__anon67
UNW_PPC_F25	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC_F25 = 57,$/;"	e	enum:__anon67
UNW_PPC_F26	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC_F26 = 58,$/;"	e	enum:__anon67
UNW_PPC_F27	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC_F27 = 59,$/;"	e	enum:__anon67
UNW_PPC_F28	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC_F28 = 60,$/;"	e	enum:__anon67
UNW_PPC_F29	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC_F29 = 61,$/;"	e	enum:__anon67
UNW_PPC_F3	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC_F3  = 35,$/;"	e	enum:__anon67
UNW_PPC_F30	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC_F30 = 62,$/;"	e	enum:__anon67
UNW_PPC_F31	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC_F31 = 63,$/;"	e	enum:__anon67
UNW_PPC_F4	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC_F4  = 36,$/;"	e	enum:__anon67
UNW_PPC_F5	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC_F5  = 37,$/;"	e	enum:__anon67
UNW_PPC_F6	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC_F6  = 38,$/;"	e	enum:__anon67
UNW_PPC_F7	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC_F7  = 39,$/;"	e	enum:__anon67
UNW_PPC_F8	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC_F8  = 40,$/;"	e	enum:__anon67
UNW_PPC_F9	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC_F9  = 41,$/;"	e	enum:__anon67
UNW_PPC_LR	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC_LR  = 65,$/;"	e	enum:__anon67
UNW_PPC_MQ	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC_MQ  = 64,$/;"	e	enum:__anon67
UNW_PPC_R0	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC_R0  = 0,$/;"	e	enum:__anon67
UNW_PPC_R1	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC_R1  = 1,$/;"	e	enum:__anon67
UNW_PPC_R10	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC_R10 = 10,$/;"	e	enum:__anon67
UNW_PPC_R11	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC_R11 = 11,$/;"	e	enum:__anon67
UNW_PPC_R12	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC_R12 = 12,$/;"	e	enum:__anon67
UNW_PPC_R13	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC_R13 = 13,$/;"	e	enum:__anon67
UNW_PPC_R14	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC_R14 = 14,$/;"	e	enum:__anon67
UNW_PPC_R15	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC_R15 = 15,$/;"	e	enum:__anon67
UNW_PPC_R16	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC_R16 = 16,$/;"	e	enum:__anon67
UNW_PPC_R17	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC_R17 = 17,$/;"	e	enum:__anon67
UNW_PPC_R18	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC_R18 = 18,$/;"	e	enum:__anon67
UNW_PPC_R19	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC_R19 = 19,$/;"	e	enum:__anon67
UNW_PPC_R2	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC_R2  = 2,$/;"	e	enum:__anon67
UNW_PPC_R20	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC_R20 = 20,$/;"	e	enum:__anon67
UNW_PPC_R21	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC_R21 = 21,$/;"	e	enum:__anon67
UNW_PPC_R22	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC_R22 = 22,$/;"	e	enum:__anon67
UNW_PPC_R23	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC_R23 = 23,$/;"	e	enum:__anon67
UNW_PPC_R24	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC_R24 = 24,$/;"	e	enum:__anon67
UNW_PPC_R25	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC_R25 = 25,$/;"	e	enum:__anon67
UNW_PPC_R26	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC_R26 = 26,$/;"	e	enum:__anon67
UNW_PPC_R27	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC_R27 = 27,$/;"	e	enum:__anon67
UNW_PPC_R28	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC_R28 = 28,$/;"	e	enum:__anon67
UNW_PPC_R29	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC_R29 = 29,$/;"	e	enum:__anon67
UNW_PPC_R3	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC_R3  = 3,$/;"	e	enum:__anon67
UNW_PPC_R30	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC_R30 = 30,$/;"	e	enum:__anon67
UNW_PPC_R31	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC_R31 = 31,$/;"	e	enum:__anon67
UNW_PPC_R4	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC_R4  = 4,$/;"	e	enum:__anon67
UNW_PPC_R5	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC_R5  = 5,$/;"	e	enum:__anon67
UNW_PPC_R6	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC_R6  = 6,$/;"	e	enum:__anon67
UNW_PPC_R7	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC_R7  = 7,$/;"	e	enum:__anon67
UNW_PPC_R8	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC_R8  = 8,$/;"	e	enum:__anon67
UNW_PPC_R9	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC_R9  = 9,$/;"	e	enum:__anon67
UNW_PPC_SPEFSCR	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC_SPEFSCR = 112$/;"	e	enum:__anon67
UNW_PPC_SPE_ACC	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC_SPE_ACC = 111,$/;"	e	enum:__anon67
UNW_PPC_V0	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC_V0  = 77,$/;"	e	enum:__anon67
UNW_PPC_V1	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC_V1  = 78,$/;"	e	enum:__anon67
UNW_PPC_V10	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC_V10 = 87,$/;"	e	enum:__anon67
UNW_PPC_V11	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC_V11 = 88,$/;"	e	enum:__anon67
UNW_PPC_V12	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC_V12 = 89,$/;"	e	enum:__anon67
UNW_PPC_V13	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC_V13 = 90,$/;"	e	enum:__anon67
UNW_PPC_V14	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC_V14 = 91,$/;"	e	enum:__anon67
UNW_PPC_V15	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC_V15 = 92,$/;"	e	enum:__anon67
UNW_PPC_V16	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC_V16 = 93,$/;"	e	enum:__anon67
UNW_PPC_V17	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC_V17 = 94,$/;"	e	enum:__anon67
UNW_PPC_V18	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC_V18 = 95,$/;"	e	enum:__anon67
UNW_PPC_V19	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC_V19 = 96,$/;"	e	enum:__anon67
UNW_PPC_V2	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC_V2  = 79,$/;"	e	enum:__anon67
UNW_PPC_V20	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC_V20 = 97,$/;"	e	enum:__anon67
UNW_PPC_V21	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC_V21 = 98,$/;"	e	enum:__anon67
UNW_PPC_V22	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC_V22 = 99,$/;"	e	enum:__anon67
UNW_PPC_V23	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC_V23 = 100,$/;"	e	enum:__anon67
UNW_PPC_V24	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC_V24 = 101,$/;"	e	enum:__anon67
UNW_PPC_V25	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC_V25 = 102,$/;"	e	enum:__anon67
UNW_PPC_V26	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC_V26 = 103,$/;"	e	enum:__anon67
UNW_PPC_V27	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC_V27 = 104,$/;"	e	enum:__anon67
UNW_PPC_V28	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC_V28 = 105,$/;"	e	enum:__anon67
UNW_PPC_V29	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC_V29 = 106,$/;"	e	enum:__anon67
UNW_PPC_V3	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC_V3  = 80,$/;"	e	enum:__anon67
UNW_PPC_V30	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC_V30 = 107,$/;"	e	enum:__anon67
UNW_PPC_V31	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC_V31 = 108,$/;"	e	enum:__anon67
UNW_PPC_V4	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC_V4  = 81,$/;"	e	enum:__anon67
UNW_PPC_V5	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC_V5  = 82,$/;"	e	enum:__anon67
UNW_PPC_V6	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC_V6  = 83,$/;"	e	enum:__anon67
UNW_PPC_V7	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC_V7  = 84,$/;"	e	enum:__anon67
UNW_PPC_V8	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC_V8  = 85,$/;"	e	enum:__anon67
UNW_PPC_V9	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC_V9  = 86,$/;"	e	enum:__anon67
UNW_PPC_VRSAVE	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC_VRSAVE  = 109,$/;"	e	enum:__anon67
UNW_PPC_VSCR	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC_VSCR    = 110,$/;"	e	enum:__anon67
UNW_PPC_XER	ThirdParty/libunwind/include/libunwind.h	/^  UNW_PPC_XER = 76,$/;"	e	enum:__anon67
UNW_REG_IP	ThirdParty/libunwind/include/libunwind.h	/^  UNW_REG_IP = -1, \/\/ instruction pointer$/;"	e	enum:__anon64
UNW_REG_SP	ThirdParty/libunwind/include/libunwind.h	/^  UNW_REG_SP = -2, \/\/ stack pointer$/;"	e	enum:__anon64
UNW_STEP_END	ThirdParty/libunwind/src/libunwind_ext.h	/^#define UNW_STEP_END /;"	d
UNW_STEP_SUCCESS	ThirdParty/libunwind/src/libunwind_ext.h	/^#define UNW_STEP_SUCCESS /;"	d
UNW_X86_64_R10	ThirdParty/libunwind/include/libunwind.h	/^  UNW_X86_64_R10 = 10,$/;"	e	enum:__anon66
UNW_X86_64_R11	ThirdParty/libunwind/include/libunwind.h	/^  UNW_X86_64_R11 = 11,$/;"	e	enum:__anon66
UNW_X86_64_R12	ThirdParty/libunwind/include/libunwind.h	/^  UNW_X86_64_R12 = 12,$/;"	e	enum:__anon66
UNW_X86_64_R13	ThirdParty/libunwind/include/libunwind.h	/^  UNW_X86_64_R13 = 13,$/;"	e	enum:__anon66
UNW_X86_64_R14	ThirdParty/libunwind/include/libunwind.h	/^  UNW_X86_64_R14 = 14,$/;"	e	enum:__anon66
UNW_X86_64_R15	ThirdParty/libunwind/include/libunwind.h	/^  UNW_X86_64_R15 = 15,$/;"	e	enum:__anon66
UNW_X86_64_R8	ThirdParty/libunwind/include/libunwind.h	/^  UNW_X86_64_R8  = 8,$/;"	e	enum:__anon66
UNW_X86_64_R9	ThirdParty/libunwind/include/libunwind.h	/^  UNW_X86_64_R9  = 9,$/;"	e	enum:__anon66
UNW_X86_64_RAX	ThirdParty/libunwind/include/libunwind.h	/^  UNW_X86_64_RAX = 0,$/;"	e	enum:__anon66
UNW_X86_64_RBP	ThirdParty/libunwind/include/libunwind.h	/^  UNW_X86_64_RBP = 6,$/;"	e	enum:__anon66
UNW_X86_64_RBX	ThirdParty/libunwind/include/libunwind.h	/^  UNW_X86_64_RBX = 3,$/;"	e	enum:__anon66
UNW_X86_64_RCX	ThirdParty/libunwind/include/libunwind.h	/^  UNW_X86_64_RCX = 2,$/;"	e	enum:__anon66
UNW_X86_64_RDI	ThirdParty/libunwind/include/libunwind.h	/^  UNW_X86_64_RDI = 5,$/;"	e	enum:__anon66
UNW_X86_64_RDX	ThirdParty/libunwind/include/libunwind.h	/^  UNW_X86_64_RDX = 1,$/;"	e	enum:__anon66
UNW_X86_64_RIP	ThirdParty/libunwind/include/libunwind.h	/^  UNW_X86_64_RIP = 16,$/;"	e	enum:__anon66
UNW_X86_64_RSI	ThirdParty/libunwind/include/libunwind.h	/^  UNW_X86_64_RSI = 4,$/;"	e	enum:__anon66
UNW_X86_64_RSP	ThirdParty/libunwind/include/libunwind.h	/^  UNW_X86_64_RSP = 7,$/;"	e	enum:__anon66
UNW_X86_64_XMM0	ThirdParty/libunwind/include/libunwind.h	/^  UNW_X86_64_XMM0 = 17,$/;"	e	enum:__anon66
UNW_X86_64_XMM1	ThirdParty/libunwind/include/libunwind.h	/^  UNW_X86_64_XMM1 = 18,$/;"	e	enum:__anon66
UNW_X86_64_XMM10	ThirdParty/libunwind/include/libunwind.h	/^  UNW_X86_64_XMM10 = 27,$/;"	e	enum:__anon66
UNW_X86_64_XMM11	ThirdParty/libunwind/include/libunwind.h	/^  UNW_X86_64_XMM11 = 28,$/;"	e	enum:__anon66
UNW_X86_64_XMM12	ThirdParty/libunwind/include/libunwind.h	/^  UNW_X86_64_XMM12 = 29,$/;"	e	enum:__anon66
UNW_X86_64_XMM13	ThirdParty/libunwind/include/libunwind.h	/^  UNW_X86_64_XMM13 = 30,$/;"	e	enum:__anon66
UNW_X86_64_XMM14	ThirdParty/libunwind/include/libunwind.h	/^  UNW_X86_64_XMM14 = 31,$/;"	e	enum:__anon66
UNW_X86_64_XMM15	ThirdParty/libunwind/include/libunwind.h	/^  UNW_X86_64_XMM15 = 32,$/;"	e	enum:__anon66
UNW_X86_64_XMM2	ThirdParty/libunwind/include/libunwind.h	/^  UNW_X86_64_XMM2 = 19,$/;"	e	enum:__anon66
UNW_X86_64_XMM3	ThirdParty/libunwind/include/libunwind.h	/^  UNW_X86_64_XMM3 = 20,$/;"	e	enum:__anon66
UNW_X86_64_XMM4	ThirdParty/libunwind/include/libunwind.h	/^  UNW_X86_64_XMM4 = 21,$/;"	e	enum:__anon66
UNW_X86_64_XMM5	ThirdParty/libunwind/include/libunwind.h	/^  UNW_X86_64_XMM5 = 22,$/;"	e	enum:__anon66
UNW_X86_64_XMM6	ThirdParty/libunwind/include/libunwind.h	/^  UNW_X86_64_XMM6 = 23,$/;"	e	enum:__anon66
UNW_X86_64_XMM7	ThirdParty/libunwind/include/libunwind.h	/^  UNW_X86_64_XMM7 = 24,$/;"	e	enum:__anon66
UNW_X86_64_XMM8	ThirdParty/libunwind/include/libunwind.h	/^  UNW_X86_64_XMM8 = 25,$/;"	e	enum:__anon66
UNW_X86_64_XMM9	ThirdParty/libunwind/include/libunwind.h	/^  UNW_X86_64_XMM9 = 26,$/;"	e	enum:__anon66
UNW_X86_EAX	ThirdParty/libunwind/include/libunwind.h	/^  UNW_X86_EAX = 0,$/;"	e	enum:__anon65
UNW_X86_EBP	ThirdParty/libunwind/include/libunwind.h	/^  UNW_X86_EBP = 4,$/;"	e	enum:__anon65
UNW_X86_EBX	ThirdParty/libunwind/include/libunwind.h	/^  UNW_X86_EBX = 3,$/;"	e	enum:__anon65
UNW_X86_ECX	ThirdParty/libunwind/include/libunwind.h	/^  UNW_X86_ECX = 1,$/;"	e	enum:__anon65
UNW_X86_EDI	ThirdParty/libunwind/include/libunwind.h	/^  UNW_X86_EDI = 7$/;"	e	enum:__anon65
UNW_X86_EDX	ThirdParty/libunwind/include/libunwind.h	/^  UNW_X86_EDX = 2,$/;"	e	enum:__anon65
UNW_X86_ESI	ThirdParty/libunwind/include/libunwind.h	/^  UNW_X86_ESI = 6,$/;"	e	enum:__anon65
UNW_X86_ESP	ThirdParty/libunwind/include/libunwind.h	/^  UNW_X86_ESP = 5,$/;"	e	enum:__anon65
USC	ThirdParty/dtoa/dtoa.c	/^#define USC /;"	d	file:
USE_WINDOWS_SEH	Lib/LLVMJIT/LLVMJITPrivate.h	/^#define USE_WINDOWS_SEH /;"	d
UWOP_ALLOC_LARGE	Lib/LLVMJIT/Win64EH.cpp	/^	UWOP_ALLOC_LARGE = 1,$/;"	e	enum:UnwindOpcode	file:
UWOP_ALLOC_SMALL	Lib/LLVMJIT/Win64EH.cpp	/^	UWOP_ALLOC_SMALL = 2,$/;"	e	enum:UnwindOpcode	file:
UWOP_PUSH_MACHFRAME	Lib/LLVMJIT/Win64EH.cpp	/^	UWOP_PUSH_MACHFRAME = 8$/;"	e	enum:UnwindOpcode	file:
UWOP_PUSH_NONVOL	Lib/LLVMJIT/Win64EH.cpp	/^	UWOP_PUSH_NONVOL = 0,$/;"	e	enum:UnwindOpcode	file:
UWOP_SAVE_NONVOL	Lib/LLVMJIT/Win64EH.cpp	/^	UWOP_SAVE_NONVOL = 4,$/;"	e	enum:UnwindOpcode	file:
UWOP_SAVE_NONVOL_FAR	Lib/LLVMJIT/Win64EH.cpp	/^	UWOP_SAVE_NONVOL_FAR = 5,$/;"	e	enum:UnwindOpcode	file:
UWOP_SAVE_XMM128	Lib/LLVMJIT/Win64EH.cpp	/^	UWOP_SAVE_XMM128 = 6,$/;"	e	enum:UnwindOpcode	file:
UWOP_SAVE_XMM128_FAR	Lib/LLVMJIT/Win64EH.cpp	/^	UWOP_SAVE_XMM128_FAR = 7,$/;"	e	enum:UnwindOpcode	file:
UWOP_SET_FPREG	Lib/LLVMJIT/Win64EH.cpp	/^	UWOP_SET_FPREG = 3,$/;"	e	enum:UnwindOpcode	file:
Unary	Lib/RegExp/RegExp.cpp	/^	Unary(Node* inChild) : Node(inType), child(inChild) {}$/;"	f	struct:Unary
Unary	Lib/RegExp/RegExp.cpp	/^template<NodeType inType> struct Unary : Node$/;"	s	file:
Unicode	Include/WAVM/Inline/Unicode.h	/^namespace WAVM { namespace Unicode {$/;"	n	namespace:WAVM
UnreachableOpVisitor	Lib/LLVMJIT/EmitFunction.cpp	/^	UnreachableOpVisitor(EmitFunctionContext& inContext)$/;"	f	struct:UnreachableOpVisitor
UnreachableOpVisitor	Lib/LLVMJIT/EmitFunction.cpp	/^struct UnreachableOpVisitor$/;"	s	file:
UnresolvedError	Lib/WASTParse/Parse.h	/^		UnresolvedError(Uptr inCharOffset, std::string&& inMessage)$/;"	f	struct:WAVM::WAST::UnresolvedError
UnresolvedError	Lib/WASTParse/Parse.h	/^	struct UnresolvedError$/;"	s	namespace:WAVM::WAST
UnresolvedFunctionType	Lib/WASTParse/Parse.h	/^	struct UnresolvedFunctionType$/;"	s	namespace:WAVM::WAST
UnresolvedInitializerExpression	Lib/WASTParse/ParseModule.cpp	/^typedef InitializerExpressionBase<Reference> UnresolvedInitializerExpression;$/;"	t	file:
UntaggedValue	Include/WAVM/IR/Value.h	/^		UntaggedValue() { memset(this, 0, sizeof(*this)); }$/;"	f	struct:WAVM::IR::UntaggedValue
UntaggedValue	Include/WAVM/IR/Value.h	/^		UntaggedValue(F32 inF32) { f32 = inF32; }$/;"	f	struct:WAVM::IR::UntaggedValue
UntaggedValue	Include/WAVM/IR/Value.h	/^		UntaggedValue(F64 inF64) { f64 = inF64; }$/;"	f	struct:WAVM::IR::UntaggedValue
UntaggedValue	Include/WAVM/IR/Value.h	/^		UntaggedValue(I32 inI32) { i32 = inI32; }$/;"	f	struct:WAVM::IR::UntaggedValue
UntaggedValue	Include/WAVM/IR/Value.h	/^		UntaggedValue(I64 inI64) { i64 = inI64; }$/;"	f	struct:WAVM::IR::UntaggedValue
UntaggedValue	Include/WAVM/IR/Value.h	/^		UntaggedValue(Runtime::Function* inFunction) { function = inFunction; }$/;"	f	struct:WAVM::IR::UntaggedValue
UntaggedValue	Include/WAVM/IR/Value.h	/^		UntaggedValue(Runtime::Object* inObject) { object = inObject; }$/;"	f	struct:WAVM::IR::UntaggedValue
UntaggedValue	Include/WAVM/IR/Value.h	/^		UntaggedValue(U32 inU32) { u32 = inU32; }$/;"	f	struct:WAVM::IR::UntaggedValue
UntaggedValue	Include/WAVM/IR/Value.h	/^		UntaggedValue(U64 inU64) { u64 = inU64; }$/;"	f	struct:WAVM::IR::UntaggedValue
UntaggedValue	Include/WAVM/IR/Value.h	/^		UntaggedValue(V128 inV128) { v128 = inV128; }$/;"	f	struct:WAVM::IR::UntaggedValue
UntaggedValue	Include/WAVM/IR/Value.h	/^	struct UntaggedValue$/;"	s	namespace:WAVM::IR
UnwindCursor	ThirdParty/libunwind/src/UnwindCursor.hpp	/^UnwindCursor<A, R>::UnwindCursor(A &as, void *)$/;"	f	class:libunwind::UnwindCursor
UnwindCursor	ThirdParty/libunwind/src/UnwindCursor.hpp	/^UnwindCursor<A, R>::UnwindCursor(unw_context_t *context, A &as)$/;"	f	class:libunwind::UnwindCursor
UnwindCursor	ThirdParty/libunwind/src/UnwindCursor.hpp	/^class UnwindCursor : public AbstractUnwindCursor{$/;"	c	namespace:libunwind
UnwindInfoFlags	Lib/LLVMJIT/Win64EH.cpp	/^namespace UnwindInfoFlags {$/;"	n	file:
UnwindInfoSections	ThirdParty/libunwind/src/AddressSpace.hpp	/^struct UnwindInfoSections {$/;"	s	namespace:libunwind
UnwindOpcode	Lib/LLVMJIT/Win64EH.cpp	/^enum UnwindOpcode$/;"	g	file:
UnwindSectionCompressedArray	ThirdParty/libunwind/src/UnwindCursor.hpp	/^  UnwindSectionCompressedArray(A &addressSpace, typename A::pint_t addr)$/;"	f	class:libunwind::UnwindSectionCompressedArray
UnwindSectionCompressedArray	ThirdParty/libunwind/src/UnwindCursor.hpp	/^template <typename A> class UnwindSectionCompressedArray {$/;"	c	namespace:libunwind
UnwindSectionCompressedPageHeader	ThirdParty/libunwind/src/UnwindCursor.hpp	/^  UnwindSectionCompressedPageHeader(A &addressSpace, typename A::pint_t addr)$/;"	f	class:libunwind::UnwindSectionCompressedPageHeader
UnwindSectionCompressedPageHeader	ThirdParty/libunwind/src/UnwindCursor.hpp	/^template <typename A> class UnwindSectionCompressedPageHeader {$/;"	c	namespace:libunwind
UnwindSectionHeader	ThirdParty/libunwind/src/UnwindCursor.hpp	/^  UnwindSectionHeader(A &addressSpace, typename A::pint_t addr)$/;"	f	class:libunwind::UnwindSectionHeader
UnwindSectionHeader	ThirdParty/libunwind/src/UnwindCursor.hpp	/^template <typename A> class UnwindSectionHeader {$/;"	c	namespace:libunwind
UnwindSectionIndexArray	ThirdParty/libunwind/src/UnwindCursor.hpp	/^  UnwindSectionIndexArray(A &addressSpace, typename A::pint_t addr)$/;"	f	class:libunwind::UnwindSectionIndexArray
UnwindSectionIndexArray	ThirdParty/libunwind/src/UnwindCursor.hpp	/^template <typename A> class UnwindSectionIndexArray {$/;"	c	namespace:libunwind
UnwindSectionLsdaArray	ThirdParty/libunwind/src/UnwindCursor.hpp	/^  UnwindSectionLsdaArray(A &addressSpace, typename A::pint_t addr)$/;"	f	class:libunwind::UnwindSectionLsdaArray
UnwindSectionLsdaArray	ThirdParty/libunwind/src/UnwindCursor.hpp	/^template <typename A> class UnwindSectionLsdaArray {$/;"	c	namespace:libunwind
UnwindSectionRegularArray	ThirdParty/libunwind/src/UnwindCursor.hpp	/^  UnwindSectionRegularArray(A &addressSpace, typename A::pint_t addr)$/;"	f	class:libunwind::UnwindSectionRegularArray
UnwindSectionRegularArray	ThirdParty/libunwind/src/UnwindCursor.hpp	/^template <typename A> class UnwindSectionRegularArray {$/;"	c	namespace:libunwind
UnwindSectionRegularPageHeader	ThirdParty/libunwind/src/UnwindCursor.hpp	/^  UnwindSectionRegularPageHeader(A &addressSpace, typename A::pint_t addr)$/;"	f	class:libunwind::UnwindSectionRegularPageHeader
UnwindSectionRegularPageHeader	ThirdParty/libunwind/src/UnwindCursor.hpp	/^template <typename A> class UnwindSectionRegularPageHeader {$/;"	c	namespace:libunwind
Uptr	Include/WAVM/IR/Types.h	/^	static_assert(Uptr(ValueType::anyref) == Uptr(ReferenceType::anyref),$/;"	m	class:WAVM::IR::ValueType
Uptr	Include/WAVM/IR/Types.h	/^	static_assert(Uptr(ValueType::funcref) == Uptr(ReferenceType::funcref),$/;"	m	class:WAVM::IR::ValueType
Uptr	Include/WAVM/Inline/BasicTypes.h	/^typedef U32 Uptr;$/;"	t
Uptr	Include/WAVM/Inline/BasicTypes.h	/^typedef U64 Uptr;$/;"	t
Uptr	Include/WAVM/Inline/BasicTypes.h	/^typedef uintptr_t Uptr;$/;"	t
Uptr	Include/WAVM/Runtime/RuntimeData.h	/^	static_assert(Uptr(IR::ExternKind::exceptionType) == Uptr(ObjectKind::exceptionType),$/;"	m	namespace:WAVM::Runtime
Uptr	Include/WAVM/Runtime/RuntimeData.h	/^	static_assert(Uptr(IR::ExternKind::function) == Uptr(ObjectKind::function),$/;"	m	namespace:WAVM::Runtime
Uptr	Include/WAVM/Runtime/RuntimeData.h	/^	static_assert(Uptr(IR::ExternKind::global) == Uptr(ObjectKind::global),$/;"	m	namespace:WAVM::Runtime
Uptr	Include/WAVM/Runtime/RuntimeData.h	/^	static_assert(Uptr(IR::ExternKind::memory) == Uptr(ObjectKind::memory),$/;"	m	namespace:WAVM::Runtime
Uptr	Include/WAVM/Runtime/RuntimeData.h	/^	static_assert(Uptr(IR::ExternKind::table) == Uptr(ObjectKind::table),$/;"	m	namespace:WAVM::Runtime
UserSection	Include/WAVM/IR/Module.h	/^	struct UserSection$/;"	s	struct:WAVM::IR::Opcode::Elem
VALIDATE_AS_PRINTF	Include/WAVM/Platform/Defines.h	/^#define VALIDATE_AS_PRINTF(/;"	d
VALIDATE_FEATURE	Lib/IR/Validate.cpp	/^#define VALIDATE_FEATURE(/;"	d	file:
VALIDATE_INDEX	Lib/IR/Validate.cpp	/^#define VALIDATE_INDEX(/;"	d	file:
VALIDATE_OP	Lib/IR/Validate.cpp	/^#define VALIDATE_OP(/;"	d	file:
VALIDATE_OP	Lib/IR/Validate.cpp	/^#undef VALIDATE_OP$/;"	d	file:
VALIDATE_OP	Lib/WASTPrint/Print.cpp	/^#undef VALIDATE_OP$/;"	d	file:
VALIDATE_UNLESS	Lib/IR/Validate.cpp	/^#define VALIDATE_UNLESS(/;"	d	file:
VAX	ThirdParty/dtoa/dtoa.c	/^Exactly one of IEEE_8087, IEEE_MC68k, VAX, or IBM should be defined.$/;"	v
VECTORSELECT	Include/WAVM/IR/OperatorTable.h	/^#define VECTORSELECT(/;"	d
VERIFY_MODULE	Lib/LLVMJIT/LLVMCompile.cpp	/^#define VERIFY_MODULE /;"	d	file:
VISIT_LEGACY_OPERATOR_ALIAS	Lib/WASTParse/Lexer.cpp	/^	#define VISIT_LEGACY_OPERATOR_ALIAS(/;"	d	file:
VISIT_LEGACY_OPERATOR_ALIAS	Lib/WASTParse/Lexer.cpp	/^	#undef VISIT_LEGACY_OPERATOR_ALIAS$/;"	d	file:
VISIT_LITERAL_TOKEN	Lib/WASTParse/Lexer.h	/^#define VISIT_LITERAL_TOKEN(/;"	d
VISIT_OP	Include/WAVM/Emscripten/gas-visit-context.h	/^#define VISIT_OP(/;"	d
VISIT_OP	Include/WAVM/Emscripten/gas-visit-context.h	/^#undef VISIT_OP$/;"	d
VISIT_OP	Include/WAVM/IR/Operators.h	/^#define VISIT_OP(/;"	d
VISIT_OP	Include/WAVM/IR/Operators.h	/^#undef VISIT_OP$/;"	d
VISIT_OP	Lib/IR/Operators.cpp	/^#define VISIT_OP(/;"	d	file:
VISIT_OP	Lib/IR/Operators.cpp	/^#undef VISIT_OP$/;"	d	file:
VISIT_OP	Lib/LLVMJIT/EmitFunction.cpp	/^#define VISIT_OP(/;"	d	file:
VISIT_OP	Lib/LLVMJIT/EmitFunction.cpp	/^#undef VISIT_OP$/;"	d	file:
VISIT_OP	Lib/WASTParse/ParseFunction.cpp	/^#define VISIT_OP(/;"	d	file:
VISIT_OP	Lib/WASTParse/ParseFunction.cpp	/^#undef VISIT_OP$/;"	d	file:
VISIT_OP	Test/fuzz/fuzz-compile-model.cpp	/^#define VISIT_OP(/;"	d	file:
VISIT_OP	Test/fuzz/fuzz-compile-model.cpp	/^#undef VISIT_OP$/;"	d	file:
VISIT_OPCODE	Include/WAVM/Emscripten/insert-imported-context.h	/^#define VISIT_OPCODE(/;"	d
VISIT_OPCODE	Include/WAVM/Emscripten/insert-imported-context.h	/^#undef VISIT_OPCODE$/;"	d
VISIT_OPCODE	Include/WAVM/IR/OperatorPrinter.h	/^#define VISIT_OPCODE(/;"	d
VISIT_OPCODE	Include/WAVM/IR/OperatorPrinter.h	/^#undef VISIT_OPCODE$/;"	d
VISIT_OPCODE	Include/WAVM/IR/Operators.h	/^#define VISIT_OPCODE(/;"	d
VISIT_OPCODE	Include/WAVM/IR/Operators.h	/^#undef VISIT_OPCODE$/;"	d
VISIT_OPCODE	Include/WAVM/IR/Validate.h	/^#define VISIT_OPCODE(/;"	d
VISIT_OPCODE	Include/WAVM/IR/Validate.h	/^#undef VISIT_OPCODE$/;"	d
VISIT_OPCODE	Lib/IR/Operators.cpp	/^#define VISIT_OPCODE(/;"	d	file:
VISIT_OPCODE	Lib/IR/Operators.cpp	/^#undef VISIT_OPCODE$/;"	d	file:
VISIT_OPCODE	Lib/IR/Validate.cpp	/^#define VISIT_OPCODE(/;"	d	file:
VISIT_OPCODE	Lib/IR/Validate.cpp	/^#undef VISIT_OPCODE$/;"	d	file:
VISIT_OPCODE	Lib/LLVMJIT/EmitFunctionContext.h	/^#define VISIT_OPCODE(/;"	d
VISIT_OPCODE	Lib/LLVMJIT/EmitFunctionContext.h	/^#undef VISIT_OPCODE$/;"	d
VISIT_OPCODE	Lib/WASM/WASMSerialization.cpp	/^#define VISIT_OPCODE(/;"	d	file:
VISIT_OPCODE	Lib/WASM/WASMSerialization.cpp	/^#undef VISIT_OPCODE$/;"	d	file:
VISIT_OPCODE	Test/fuzz/ModuleMatcher.h	/^#define VISIT_OPCODE(/;"	d
VISIT_OPCODE	Test/fuzz/ModuleMatcher.h	/^#undef VISIT_OPCODE$/;"	d
VISIT_OPERATOR_TOKEN	Lib/WASTParse/Lexer.cpp	/^	#define VISIT_OPERATOR_TOKEN(/;"	d	file:
VISIT_OPERATOR_TOKEN	Lib/WASTParse/Lexer.cpp	/^	#undef VISIT_OPERATOR_TOKEN$/;"	d	file:
VISIT_OPERATOR_TOKEN	Lib/WASTParse/Lexer.h	/^#define VISIT_OPERATOR_TOKEN(/;"	d
VISIT_TOKEN	Lib/WASTParse/Lexer.cpp	/^	#define VISIT_TOKEN(/;"	d	file:
VISIT_TOKEN	Lib/WASTParse/Lexer.cpp	/^	#undef VISIT_TOKEN$/;"	d	file:
VISIT_TOKEN	Lib/WASTParse/Lexer.cpp	/^#define VISIT_TOKEN(/;"	d	file:
VISIT_TOKEN	Lib/WASTParse/Lexer.cpp	/^#undef VISIT_TOKEN$/;"	d	file:
VISIT_TOKEN	Lib/WASTParse/Lexer.h	/^#define VISIT_TOKEN(/;"	d
VISIT_TOKEN	Lib/WASTParse/Lexer.h	/^#undef VISIT_TOKEN$/;"	d
V_VS	Include/WAVM/IR/OperatorTable.h	/^#define V_VS(/;"	d
ValidationException	Include/WAVM/IR/Validate.h	/^		ValidationException(std::string&& inMessage) : message(inMessage) {}$/;"	f	struct:WAVM::IR::ValidationException
ValidationException	Include/WAVM/IR/Validate.h	/^	struct ValidationException$/;"	s	namespace:WAVM::IR
Value	Include/WAVM/IR/Value.h	/^		Value() : type(ValueType::any) {}$/;"	f	struct:WAVM::IR::Value
Value	Include/WAVM/IR/Value.h	/^		Value(F32 inF32) : UntaggedValue(inF32), type(ValueType::f32) {}$/;"	f	struct:WAVM::IR::Value
Value	Include/WAVM/IR/Value.h	/^		Value(F64 inF64) : UntaggedValue(inF64), type(ValueType::f64) {}$/;"	f	struct:WAVM::IR::Value
Value	Include/WAVM/IR/Value.h	/^		Value(I32 inI32) : UntaggedValue(inI32), type(ValueType::i32) {}$/;"	f	struct:WAVM::IR::Value
Value	Include/WAVM/IR/Value.h	/^		Value(I64 inI64) : UntaggedValue(inI64), type(ValueType::i64) {}$/;"	f	struct:WAVM::IR::Value
Value	Include/WAVM/IR/Value.h	/^		Value(Runtime::Function* inFunction) : UntaggedValue(inFunction), type(ValueType::funcref)$/;"	f	struct:WAVM::IR::Value
Value	Include/WAVM/IR/Value.h	/^		Value(Runtime::Object* inObject) : UntaggedValue(inObject), type(ValueType::anyref) {}$/;"	f	struct:WAVM::IR::Value
Value	Include/WAVM/IR/Value.h	/^		Value(U32 inU32) : UntaggedValue(inU32), type(ValueType::i32) {}$/;"	f	struct:WAVM::IR::Value
Value	Include/WAVM/IR/Value.h	/^		Value(U64 inU64) : UntaggedValue(inU64), type(ValueType::i64) {}$/;"	f	struct:WAVM::IR::Value
Value	Include/WAVM/IR/Value.h	/^		Value(ValueType inType, UntaggedValue inValue) : UntaggedValue(inValue), type(inType) {}$/;"	f	struct:WAVM::IR::Value
Value	Include/WAVM/IR/Value.h	/^		Value(const V128& inV128) : UntaggedValue(inV128), type(ValueType::v128) {}$/;"	f	struct:WAVM::IR::Value
Value	Include/WAVM/IR/Value.h	/^		Value(std::nullptr_t) : UntaggedValue((Runtime::Object*)nullptr), type(ValueType::nullref)$/;"	f	struct:WAVM::IR::Value
Value	Include/WAVM/IR/Value.h	/^	struct Value : UntaggedValue$/;"	s	namespace:WAVM::IR
ValueAsBitPattern	ThirdParty/libunwind/src/Unwind-EHABI.cpp	/^static uint64_t ValueAsBitPattern(_Unwind_VRS_DataRepresentation representation,$/;"	f	file:
ValueTuple	Include/WAVM/IR/Value.h	/^		ValueTuple() {}$/;"	f	struct:WAVM::IR::ValueTuple
ValueTuple	Include/WAVM/IR/Value.h	/^		ValueTuple(TypeTuple types, UntaggedValue* inValues)$/;"	f	struct:WAVM::IR::ValueTuple
ValueTuple	Include/WAVM/IR/Value.h	/^		ValueTuple(ValueType inType, UntaggedValue inValue) : values({Value(inType, inValue)}) {}$/;"	f	struct:WAVM::IR::ValueTuple
ValueTuple	Include/WAVM/IR/Value.h	/^		ValueTuple(const Value& inValue) : values({inValue}) {}$/;"	f	struct:WAVM::IR::ValueTuple
ValueTuple	Include/WAVM/IR/Value.h	/^	struct ValueTuple$/;"	s	namespace:WAVM::IR
ValueType	Include/WAVM/IR/Types.h	/^	enum class ValueType : U8$/;"	c	namespace:WAVM::IR
ValueVector	Lib/LLVMJIT/LLVMJITPrivate.h	/^	typedef llvm::SmallVector<llvm::Value*, 1> ValueVector;$/;"	t	namespace:WAVM::LLVMJIT
WAIT	Include/WAVM/IR/OperatorTable.h	/^#define WAIT(/;"	d
WASI	Include/WAVM/WASI/WASI.h	/^namespace WAVM { namespace WASI {$/;"	n	namespace:WAVM
WASI	Lib/WASI/WASI.cpp	/^namespace WAVM { namespace WASI {$/;"	n	namespace:WAVM	file:
WASIADDRESS_FORMAT	Lib/WASI/WASI.cpp	/^#define WASIADDRESS_FORMAT /;"	d	file:
WASIADDRESS_MAX	Lib/WASI/WASI.cpp	/^#define WASIADDRESS_MAX /;"	d	file:
WASIAddress	Lib/WASI/WASI.cpp	/^typedef U32 WASIAddress;$/;"	t	file:
WASM	Include/WAVM/WASM/WASM.h	/^namespace WAVM { namespace WASM {$/;"	n	namespace:WAVM
WAST	Include/WAVM/WASTParse/TestScript.h	/^namespace WAVM { namespace WAST {$/;"	n	namespace:WAVM
WAST	Include/WAVM/WASTParse/WASTParse.h	/^namespace WAVM { namespace WAST {$/;"	n	namespace:WAVM
WAST	Include/WAVM/WASTPrint/WASTPrint.h	/^namespace WAVM { namespace WAST {$/;"	n	namespace:WAVM
WAST	Lib/WASTParse/Lexer.cpp	/^namespace WAVM { namespace WAST {$/;"	n	namespace:WAVM	file:
WAST	Lib/WASTParse/Lexer.h	/^namespace WAVM { namespace WAST {$/;"	n	namespace:WAVM
WAST	Lib/WASTParse/Parse.h	/^namespace WAVM { namespace WAST {$/;"	n	namespace:WAVM
WAST	Lib/WASTParse/ParseFunction.cpp	/^namespace WAVM { namespace WAST {$/;"	n	namespace:WAVM	file:
WAVM	Include/WAVM/Emscripten/Emscripten.h	/^namespace WAVM { namespace Emscripten {$/;"	n
WAVM	Include/WAVM/Emscripten/Emscripten.h	/^namespace WAVM { namespace IR {$/;"	n
WAVM	Include/WAVM/Emscripten/xchain-service.h	/^namespace WAVM { namespace Runtime {$/;"	n
WAVM	Include/WAVM/IR/IR.h	/^namespace WAVM { namespace IR {$/;"	n
WAVM	Include/WAVM/IR/Module.h	/^namespace WAVM { namespace IR {$/;"	n
WAVM	Include/WAVM/IR/OperatorPrinter.h	/^namespace WAVM { namespace IR {$/;"	n
WAVM	Include/WAVM/IR/Operators.h	/^namespace WAVM { namespace IR {$/;"	n
WAVM	Include/WAVM/IR/Types.h	/^namespace WAVM { namespace IR {$/;"	n
WAVM	Include/WAVM/IR/Types.h	/^namespace WAVM { namespace Runtime {$/;"	n
WAVM	Include/WAVM/IR/Validate.h	/^namespace WAVM { namespace IR {$/;"	n
WAVM	Include/WAVM/IR/Value.h	/^namespace WAVM { namespace IR {$/;"	n
WAVM	Include/WAVM/IR/Value.h	/^namespace WAVM { namespace Runtime {$/;"	n
WAVM	Include/WAVM/Inline/CLI.h	/^namespace WAVM {$/;"	n
WAVM	Include/WAVM/Inline/ConcurrentHashMap.h	/^namespace WAVM {$/;"	n
WAVM	Include/WAVM/Inline/DenseStaticIntSet.h	/^namespace WAVM {$/;"	n
WAVM	Include/WAVM/Inline/Errors.h	/^namespace WAVM { namespace Errors {$/;"	n
WAVM	Include/WAVM/Inline/FloatComponents.h	/^namespace WAVM {$/;"	n
WAVM	Include/WAVM/Inline/Hash.h	/^namespace WAVM {$/;"	n
WAVM	Include/WAVM/Inline/HashMap.h	/^namespace WAVM {$/;"	n
WAVM	Include/WAVM/Inline/HashSet.h	/^namespace WAVM {$/;"	n
WAVM	Include/WAVM/Inline/HashTable.h	/^namespace WAVM {$/;"	n
WAVM	Include/WAVM/Inline/IndexMap.h	/^namespace WAVM {$/;"	n
WAVM	Include/WAVM/Inline/IntrusiveSharedPtr.h	/^namespace WAVM {$/;"	n
WAVM	Include/WAVM/Inline/IsNameChar.h	/^namespace WAVM {$/;"	n
WAVM	Include/WAVM/Inline/Lock.h	/^namespace WAVM {$/;"	n
WAVM	Include/WAVM/Inline/OptionalStorage.h	/^namespace WAVM {$/;"	n
WAVM	Include/WAVM/Inline/Serialization.h	/^namespace WAVM { namespace Serialization {$/;"	n
WAVM	Include/WAVM/Inline/Timing.h	/^namespace WAVM { namespace Timing {$/;"	n
WAVM	Include/WAVM/Inline/Unicode.h	/^namespace WAVM { namespace Unicode {$/;"	n
WAVM	Include/WAVM/LLVMJIT/LLVMJIT.h	/^namespace WAVM { namespace IR {$/;"	n
WAVM	Include/WAVM/LLVMJIT/LLVMJIT.h	/^namespace WAVM { namespace LLVMJIT {$/;"	n
WAVM	Include/WAVM/LLVMJIT/LLVMJIT.h	/^namespace WAVM { namespace Runtime {$/;"	n
WAVM	Include/WAVM/Logging/Logging.h	/^namespace WAVM { namespace Log {$/;"	n
WAVM	Include/WAVM/NFA/NFA.h	/^namespace WAVM { namespace NFA {$/;"	n
WAVM	Include/WAVM/Platform/Clock.h	/^namespace WAVM { namespace Platform {$/;"	n
WAVM	Include/WAVM/Platform/Diagnostics.h	/^namespace WAVM { namespace Platform {$/;"	n
WAVM	Include/WAVM/Platform/Event.h	/^namespace WAVM { namespace Platform {$/;"	n
WAVM	Include/WAVM/Platform/File.h	/^namespace WAVM { namespace Platform {$/;"	n
WAVM	Include/WAVM/Platform/Intrinsic.h	/^namespace WAVM { namespace Platform {$/;"	n
WAVM	Include/WAVM/Platform/Memory.h	/^namespace WAVM { namespace Platform {$/;"	n
WAVM	Include/WAVM/Platform/Mutex.h	/^namespace WAVM { namespace Platform {$/;"	n
WAVM	Include/WAVM/Platform/Signal.h	/^namespace WAVM { namespace Platform {$/;"	n
WAVM	Include/WAVM/Platform/Thread.h	/^namespace WAVM { namespace Platform {$/;"	n
WAVM	Include/WAVM/RegExp/RegExp.h	/^namespace WAVM { namespace RegExp {$/;"	n
WAVM	Include/WAVM/Runtime/Intrinsics.h	/^namespace WAVM { namespace Intrinsics {$/;"	n
WAVM	Include/WAVM/Runtime/Intrinsics.h	/^namespace WAVM { namespace Runtime {$/;"	n
WAVM	Include/WAVM/Runtime/Linker.h	/^namespace WAVM { namespace Runtime {$/;"	n
WAVM	Include/WAVM/Runtime/Runtime.h	/^namespace WAVM { namespace IR {$/;"	n
WAVM	Include/WAVM/Runtime/Runtime.h	/^namespace WAVM { namespace Runtime {$/;"	n
WAVM	Include/WAVM/Runtime/RuntimeData.h	/^namespace WAVM { namespace LLVMJIT {$/;"	n
WAVM	Include/WAVM/Runtime/RuntimeData.h	/^namespace WAVM { namespace Runtime {$/;"	n
WAVM	Include/WAVM/ThreadTest/ThreadTest.h	/^namespace WAVM { namespace Runtime {$/;"	n
WAVM	Include/WAVM/ThreadTest/ThreadTest.h	/^namespace WAVM { namespace ThreadTest {$/;"	n
WAVM	Include/WAVM/WASI/WASI.h	/^namespace WAVM { namespace WASI {$/;"	n
WAVM	Include/WAVM/WASM/WASM.h	/^namespace WAVM { namespace IR {$/;"	n
WAVM	Include/WAVM/WASM/WASM.h	/^namespace WAVM { namespace Serialization {$/;"	n
WAVM	Include/WAVM/WASM/WASM.h	/^namespace WAVM { namespace WASM {$/;"	n
WAVM	Include/WAVM/WASTParse/TestScript.h	/^namespace WAVM { namespace WAST {$/;"	n
WAVM	Include/WAVM/WASTParse/WASTParse.h	/^namespace WAVM { namespace IR {$/;"	n
WAVM	Include/WAVM/WASTParse/WASTParse.h	/^namespace WAVM { namespace WAST {$/;"	n
WAVM	Include/WAVM/WASTPrint/WASTPrint.h	/^namespace WAVM { namespace IR {$/;"	n
WAVM	Include/WAVM/WASTPrint/WASTPrint.h	/^namespace WAVM { namespace WAST {$/;"	n
WAVM	Lib/IR/Validate.cpp	/^namespace WAVM { namespace IR {$/;"	n	file:
WAVM	Lib/LLVMJIT/EmitContext.h	/^namespace WAVM { namespace LLVMJIT {$/;"	n
WAVM	Lib/LLVMJIT/EmitFunctionContext.h	/^namespace WAVM { namespace LLVMJIT {$/;"	n
WAVM	Lib/LLVMJIT/EmitModuleContext.h	/^namespace WAVM { namespace LLVMJIT {$/;"	n
WAVM	Lib/LLVMJIT/LLVMJITPrivate.h	/^namespace WAVM { namespace LLVMJIT {$/;"	n
WAVM	Lib/LLVMJIT/LLVMModule.cpp	/^namespace WAVM { namespace Runtime {$/;"	n	file:
WAVM	Lib/NFA/NFA.cpp	/^namespace WAVM { namespace NFA {$/;"	n	file:
WAVM	Lib/Platform/POSIX/POSIXPrivate.h	/^namespace WAVM { namespace Platform {$/;"	n
WAVM	Lib/Platform/Windows/WindowsPrivate.h	/^namespace WAVM { namespace Platform {$/;"	n
WAVM	Lib/Runtime/Intrinsics.cpp	/^namespace WAVM { namespace Intrinsics {$/;"	n	file:
WAVM	Lib/Runtime/RuntimePrivate.h	/^namespace WAVM { namespace Intrinsics {$/;"	n
WAVM	Lib/Runtime/RuntimePrivate.h	/^namespace WAVM { namespace Runtime {$/;"	n
WAVM	Lib/Runtime/WAVMIntrinsics.cpp	/^namespace WAVM { namespace Runtime {$/;"	n	file:
WAVM	Lib/WASI/WASI.cpp	/^namespace WAVM { namespace WASI {$/;"	n	file:
WAVM	Lib/WASM/WASMSerialization.cpp	/^namespace WAVM { namespace IR {$/;"	n	file:
WAVM	Lib/WASTParse/Lexer.cpp	/^namespace WAVM { namespace WAST {$/;"	n	file:
WAVM	Lib/WASTParse/Lexer.h	/^namespace WAVM { namespace WAST {$/;"	n
WAVM	Lib/WASTParse/Parse.h	/^namespace WAVM { namespace WAST {$/;"	n
WAVM	Lib/WASTParse/ParseFunction.cpp	/^namespace WAVM { namespace WAST {$/;"	n	file:
WAVM	Test/fuzz/ModuleMatcher.h	/^namespace WAVM {$/;"	n
WAVM_DEBUG	Include/WAVM/Platform/Defines.h	/^#define WAVM_DEBUG /;"	d
WAVM_ENABLE_ASAN	output/Include/WAVM/Inline/Config.h	/^#define WAVM_ENABLE_ASAN /;"	d
WAVM_ENABLE_LIBFUZZER	output/Include/WAVM/Inline/Config.h	/^#define WAVM_ENABLE_LIBFUZZER /;"	d
WAVM_ENABLE_RELEASE_ASSERTS	output/Include/WAVM/Inline/Config.h	/^#define WAVM_ENABLE_RELEASE_ASSERTS /;"	d
WAVM_ENABLE_RUNTIME	output/Include/WAVM/Inline/Config.h	/^#define WAVM_ENABLE_RUNTIME /;"	d
WAVM_ENABLE_STATIC_LINKING	output/Include/WAVM/Inline/Config.h	/^#define WAVM_ENABLE_STATIC_LINKING /;"	d
WAVM_ENABLE_UBSAN	output/Include/WAVM/Inline/Config.h	/^#define WAVM_ENABLE_UBSAN /;"	d
WAVM_METRICS_OUTPUT	output/Include/WAVM/Inline/Config.h	/^#define WAVM_METRICS_OUTPUT /;"	d
WaitList	Lib/Runtime/Atomics.cpp	/^	WaitList() : numReferences(1) {}$/;"	f	struct:WaitList
WaitList	Lib/Runtime/Atomics.cpp	/^struct WaitList$/;"	s	file:
XBridgeChainService	Include/WAVM/Emscripten/xchain-service.h	/^    struct XBridgeChainService {$/;"	s	namespace:xchain
XChainServiceClient	ThirdParty/bridge/rpc_inproc.cpp	/^XChainServiceClient::XChainServiceClient(callback_call_method ccm, callback_fetch_response cfr)$/;"	f	class:xchain::XChainServiceClient
XChainServiceClient	ThirdParty/bridge/rpc_inproc.h	/^class XChainServiceClient{$/;"	c	namespace:xchain
XXH	Include/WAVM/Inline/Hash.h	/^	template<> inline U32 XXH<U32>(const void* data, Uptr numBytes, U32 seed)$/;"	f	namespace:WAVM
XXH	Include/WAVM/Inline/Hash.h	/^	template<> inline U64 XXH<U64>(const void* data, Uptr numBytes, U64 seed)$/;"	f	namespace:WAVM
XXH32	Include/WAVM/Inline/xxhash/xxhash.c	/^XXH_PUBLIC_API unsigned int XXH32 (const void* input, size_t len, unsigned int seed)$/;"	f
XXH32	Include/WAVM/Inline/xxhash/xxhash.h	/^#  define XXH32 /;"	d
XXH32_avalanche	Include/WAVM/Inline/xxhash/xxhash.c	/^FORCE_INLINE U32 XXH32_avalanche(U32 h32)$/;"	f
XXH32_canonicalFromHash	Include/WAVM/Inline/xxhash/xxhash.c	/^XXH_PUBLIC_API void XXH32_canonicalFromHash(XXH32_canonical_t* dst, XXH32_hash_t hash)$/;"	f
XXH32_canonicalFromHash	Include/WAVM/Inline/xxhash/xxhash.h	/^#  define XXH32_canonicalFromHash /;"	d
XXH32_canonical_t	Include/WAVM/Inline/xxhash/xxhash.h	/^typedef struct { unsigned char digest[4]; } XXH32_canonical_t;$/;"	t	typeref:struct:__anon34
XXH32_copyState	Include/WAVM/Inline/xxhash/xxhash.c	/^XXH_PUBLIC_API void XXH32_copyState(XXH32_state_t* dstState, const XXH32_state_t* srcState)$/;"	f
XXH32_copyState	Include/WAVM/Inline/xxhash/xxhash.h	/^#  define XXH32_copyState /;"	d
XXH32_createState	Include/WAVM/Inline/xxhash/xxhash.c	/^XXH_PUBLIC_API XXH32_state_t* XXH32_createState(void)$/;"	f
XXH32_createState	Include/WAVM/Inline/xxhash/xxhash.h	/^#  define XXH32_createState /;"	d
XXH32_digest	Include/WAVM/Inline/xxhash/xxhash.c	/^XXH_PUBLIC_API unsigned int XXH32_digest (const XXH32_state_t* state_in)$/;"	f
XXH32_digest	Include/WAVM/Inline/xxhash/xxhash.h	/^#  define XXH32_digest /;"	d
XXH32_digest_endian	Include/WAVM/Inline/xxhash/xxhash.c	/^XXH32_digest_endian (const XXH32_state_t* state, XXH_endianess endian)$/;"	f
XXH32_endian_align	Include/WAVM/Inline/xxhash/xxhash.c	/^XXH32_endian_align(const void* input, size_t len, U32 seed,$/;"	f
XXH32_finalize	Include/WAVM/Inline/xxhash/xxhash.c	/^XXH32_finalize(U32 h32, const void* ptr, size_t len,$/;"	f
XXH32_fixed	Include/WAVM/Inline/Hash.h	/^	inline U32 XXH32_fixed(U32 data, U32 seed)$/;"	f	namespace:WAVM
XXH32_freeState	Include/WAVM/Inline/xxhash/xxhash.c	/^XXH_PUBLIC_API XXH_errorcode XXH32_freeState(XXH32_state_t* statePtr)$/;"	f
XXH32_freeState	Include/WAVM/Inline/xxhash/xxhash.h	/^#  define XXH32_freeState /;"	d
XXH32_hashFromCanonical	Include/WAVM/Inline/xxhash/xxhash.c	/^XXH_PUBLIC_API XXH32_hash_t XXH32_hashFromCanonical(const XXH32_canonical_t* src)$/;"	f
XXH32_hashFromCanonical	Include/WAVM/Inline/xxhash/xxhash.h	/^#  define XXH32_hashFromCanonical /;"	d
XXH32_hash_t	Include/WAVM/Inline/xxhash/xxhash.h	/^typedef unsigned int XXH32_hash_t;$/;"	t
XXH32_reset	Include/WAVM/Inline/xxhash/xxhash.c	/^XXH_PUBLIC_API XXH_errorcode XXH32_reset(XXH32_state_t* statePtr, unsigned int seed)$/;"	f
XXH32_reset	Include/WAVM/Inline/xxhash/xxhash.h	/^#  define XXH32_reset /;"	d
XXH32_round	Include/WAVM/Inline/xxhash/xxhash.c	/^FORCE_INLINE U32 XXH32_round(U32 seed, U32 input)$/;"	f
XXH32_state_s	Include/WAVM/Inline/xxhash/xxhash.h	/^struct XXH32_state_s {$/;"	s
XXH32_state_t	Include/WAVM/Inline/xxhash/xxhash.h	/^typedef struct XXH32_state_s XXH32_state_t;   \/* incomplete type *\/$/;"	t	typeref:struct:XXH32_state_s
XXH32_update	Include/WAVM/Inline/xxhash/xxhash.c	/^XXH_PUBLIC_API XXH_errorcode XXH32_update (XXH32_state_t* state_in, const void* input, size_t len)$/;"	f
XXH32_update	Include/WAVM/Inline/xxhash/xxhash.h	/^#  define XXH32_update /;"	d
XXH32_update_endian	Include/WAVM/Inline/xxhash/xxhash.c	/^XXH_errorcode XXH32_update_endian (XXH32_state_t* state, const void* input, size_t len, XXH_endianess endian)$/;"	f
XXH64	Include/WAVM/Inline/xxhash/xxhash.c	/^XXH_PUBLIC_API unsigned long long XXH64 (const void* input, size_t len, unsigned long long seed)$/;"	f
XXH64	Include/WAVM/Inline/xxhash/xxhash.h	/^#  define XXH64 /;"	d
XXH64_avalanche	Include/WAVM/Inline/xxhash/xxhash.c	/^FORCE_INLINE U64 XXH64_avalanche(U64 h64)$/;"	f
XXH64_canonicalFromHash	Include/WAVM/Inline/xxhash/xxhash.c	/^XXH_PUBLIC_API void XXH64_canonicalFromHash(XXH64_canonical_t* dst, XXH64_hash_t hash)$/;"	f
XXH64_canonicalFromHash	Include/WAVM/Inline/xxhash/xxhash.h	/^#  define XXH64_canonicalFromHash /;"	d
XXH64_canonical_t	Include/WAVM/Inline/xxhash/xxhash.h	/^typedef struct { unsigned char digest[8]; } XXH64_canonical_t;$/;"	t	typeref:struct:__anon35
XXH64_copyState	Include/WAVM/Inline/xxhash/xxhash.c	/^XXH_PUBLIC_API void XXH64_copyState(XXH64_state_t* dstState, const XXH64_state_t* srcState)$/;"	f
XXH64_copyState	Include/WAVM/Inline/xxhash/xxhash.h	/^#  define XXH64_copyState /;"	d
XXH64_createState	Include/WAVM/Inline/xxhash/xxhash.c	/^XXH_PUBLIC_API XXH64_state_t* XXH64_createState(void)$/;"	f
XXH64_createState	Include/WAVM/Inline/xxhash/xxhash.h	/^#  define XXH64_createState /;"	d
XXH64_digest	Include/WAVM/Inline/xxhash/xxhash.c	/^XXH_PUBLIC_API unsigned long long XXH64_digest (const XXH64_state_t* state_in)$/;"	f
XXH64_digest	Include/WAVM/Inline/xxhash/xxhash.h	/^#  define XXH64_digest /;"	d
XXH64_digest_endian	Include/WAVM/Inline/xxhash/xxhash.c	/^FORCE_INLINE U64 XXH64_digest_endian (const XXH64_state_t* state, XXH_endianess endian)$/;"	f
XXH64_endian_align	Include/WAVM/Inline/xxhash/xxhash.c	/^XXH64_endian_align(const void* input, size_t len, U64 seed,$/;"	f
XXH64_finalize	Include/WAVM/Inline/xxhash/xxhash.c	/^XXH64_finalize(U64 h64, const void* ptr, size_t len,$/;"	f
XXH64_fixed	Include/WAVM/Inline/Hash.h	/^	inline U64 XXH64_fixed(U64 data, U64 seed)$/;"	f	namespace:WAVM
XXH64_freeState	Include/WAVM/Inline/xxhash/xxhash.c	/^XXH_PUBLIC_API XXH_errorcode XXH64_freeState(XXH64_state_t* statePtr)$/;"	f
XXH64_freeState	Include/WAVM/Inline/xxhash/xxhash.h	/^#  define XXH64_freeState /;"	d
XXH64_hashFromCanonical	Include/WAVM/Inline/xxhash/xxhash.c	/^XXH_PUBLIC_API XXH64_hash_t XXH64_hashFromCanonical(const XXH64_canonical_t* src)$/;"	f
XXH64_hashFromCanonical	Include/WAVM/Inline/xxhash/xxhash.h	/^#  define XXH64_hashFromCanonical /;"	d
XXH64_hash_t	Include/WAVM/Inline/xxhash/xxhash.h	/^typedef unsigned long long XXH64_hash_t;$/;"	t
XXH64_mergeRound	Include/WAVM/Inline/xxhash/xxhash.c	/^FORCE_INLINE U64 XXH64_mergeRound(U64 acc, U64 val)$/;"	f
XXH64_reset	Include/WAVM/Inline/xxhash/xxhash.c	/^XXH_PUBLIC_API XXH_errorcode XXH64_reset(XXH64_state_t* statePtr, unsigned long long seed)$/;"	f
XXH64_reset	Include/WAVM/Inline/xxhash/xxhash.h	/^#  define XXH64_reset /;"	d
XXH64_round	Include/WAVM/Inline/xxhash/xxhash.c	/^FORCE_INLINE U64 XXH64_round(U64 acc, U64 input)$/;"	f
XXH64_state_s	Include/WAVM/Inline/xxhash/xxhash.h	/^struct XXH64_state_s {$/;"	s
XXH64_state_t	Include/WAVM/Inline/xxhash/xxhash.h	/^typedef struct XXH64_state_s XXH64_state_t;   \/* incomplete type *\/$/;"	t	typeref:struct:XXH64_state_s
XXH64_update	Include/WAVM/Inline/xxhash/xxhash.c	/^XXH_PUBLIC_API XXH_errorcode XXH64_update (XXH64_state_t* state_in, const void* input, size_t len)$/;"	f
XXH64_update	Include/WAVM/Inline/xxhash/xxhash.h	/^#  define XXH64_update /;"	d
XXH64_update_endian	Include/WAVM/Inline/xxhash/xxhash.c	/^XXH_errorcode XXH64_update_endian (XXH64_state_t* state, const void* input, size_t len, XXH_endianess endian)$/;"	f
XXHASH_H_5627135585666179	Include/WAVM/Inline/xxhash/xxhash.h	/^#define XXHASH_H_5627135585666179 /;"	d
XXH_ACCEPT_NULL_INPUT_POINTER	Include/WAVM/Inline/xxhash/xxhash.c	/^#  define XXH_ACCEPT_NULL_INPUT_POINTER /;"	d	file:
XXH_CAT	Include/WAVM/Inline/xxhash/xxhash.h	/^#  define XXH_CAT(/;"	d
XXH_CPU_LITTLE_ENDIAN	Include/WAVM/Inline/xxhash/xxhash.c	/^#   define XXH_CPU_LITTLE_ENDIAN /;"	d	file:
XXH_ERROR	Include/WAVM/Inline/xxhash/xxhash.h	/^typedef enum { XXH_OK=0, XXH_ERROR } XXH_errorcode;$/;"	e	enum:__anon33
XXH_FORCE_ALIGN_CHECK	Include/WAVM/Inline/xxhash/xxhash.c	/^#    define XXH_FORCE_ALIGN_CHECK /;"	d	file:
XXH_FORCE_MEMORY_ACCESS	Include/WAVM/Inline/xxhash/xxhash.c	/^#    define XXH_FORCE_MEMORY_ACCESS /;"	d	file:
XXH_FORCE_NATIVE_FORMAT	Include/WAVM/Inline/Hash.h	/^#define XXH_FORCE_NATIVE_FORMAT /;"	d
XXH_FORCE_NATIVE_FORMAT	Include/WAVM/Inline/xxhash/xxhash.c	/^#  define XXH_FORCE_NATIVE_FORMAT /;"	d	file:
XXH_GCC_VERSION	Include/WAVM/Inline/xxhash/xxhash.c	/^#define XXH_GCC_VERSION /;"	d	file:
XXH_INLINE_ALL	Include/WAVM/Inline/Hash.h	/^#define XXH_INLINE_ALL$/;"	d
XXH_NAME2	Include/WAVM/Inline/xxhash/xxhash.h	/^#  define XXH_NAME2(/;"	d
XXH_OK	Include/WAVM/Inline/xxhash/xxhash.h	/^typedef enum { XXH_OK=0, XXH_ERROR } XXH_errorcode;$/;"	e	enum:__anon33
XXH_PUBLIC_API	Include/WAVM/Inline/xxhash/xxhash.h	/^#    define XXH_PUBLIC_API /;"	d
XXH_PUBLIC_API	Include/WAVM/Inline/xxhash/xxhash.h	/^#  define XXH_PUBLIC_API /;"	d
XXH_STATIC_ASSERT	Include/WAVM/Inline/xxhash/xxhash.c	/^#define XXH_STATIC_ASSERT(/;"	d	file:
XXH_STATIC_LINKING_ONLY	Include/WAVM/Inline/xxhash/xxhash.c	/^#define XXH_STATIC_LINKING_ONLY$/;"	d	file:
XXH_STATIC_LINKING_ONLY	Include/WAVM/Inline/xxhash/xxhash.h	/^#    define XXH_STATIC_LINKING_ONLY$/;"	d
XXH_VERSION_MAJOR	Include/WAVM/Inline/xxhash/xxhash.h	/^#define XXH_VERSION_MAJOR /;"	d
XXH_VERSION_MINOR	Include/WAVM/Inline/xxhash/xxhash.h	/^#define XXH_VERSION_MINOR /;"	d
XXH_VERSION_NUMBER	Include/WAVM/Inline/xxhash/xxhash.h	/^#define XXH_VERSION_NUMBER /;"	d
XXH_VERSION_RELEASE	Include/WAVM/Inline/xxhash/xxhash.h	/^#define XXH_VERSION_RELEASE /;"	d
XXH_aligned	Include/WAVM/Inline/xxhash/xxhash.c	/^typedef enum { XXH_aligned, XXH_unaligned } XXH_alignment;$/;"	e	enum:__anon38	file:
XXH_alignment	Include/WAVM/Inline/xxhash/xxhash.c	/^typedef enum { XXH_aligned, XXH_unaligned } XXH_alignment;$/;"	t	typeref:enum:__anon38	file:
XXH_bigEndian	Include/WAVM/Inline/xxhash/xxhash.c	/^typedef enum { XXH_bigEndian=0, XXH_littleEndian=1 } XXH_endianess;$/;"	e	enum:__anon37	file:
XXH_endianess	Include/WAVM/Inline/xxhash/xxhash.c	/^typedef enum { XXH_bigEndian=0, XXH_littleEndian=1 } XXH_endianess;$/;"	t	typeref:enum:__anon37	file:
XXH_errorcode	Include/WAVM/Inline/xxhash/xxhash.h	/^typedef enum { XXH_OK=0, XXH_ERROR } XXH_errorcode;$/;"	t	typeref:enum:__anon33
XXH_free	Include/WAVM/Inline/xxhash/xxhash.c	/^static void  XXH_free  (void* p)  { free(p); }$/;"	f	file:
XXH_get32bits	Include/WAVM/Inline/xxhash/xxhash.c	/^#define XXH_get32bits(/;"	d	file:
XXH_get64bits	Include/WAVM/Inline/xxhash/xxhash.c	/^#define XXH_get64bits(/;"	d	file:
XXH_isLittleEndian	Include/WAVM/Inline/xxhash/xxhash.c	/^FORCE_INLINE int XXH_isLittleEndian(void)$/;"	f
XXH_littleEndian	Include/WAVM/Inline/xxhash/xxhash.c	/^typedef enum { XXH_bigEndian=0, XXH_littleEndian=1 } XXH_endianess;$/;"	e	enum:__anon37	file:
XXH_malloc	Include/WAVM/Inline/xxhash/xxhash.c	/^static void* XXH_malloc(size_t s) { return malloc(s); }$/;"	f	file:
XXH_memcpy	Include/WAVM/Inline/xxhash/xxhash.c	/^static void* XXH_memcpy(void* dest, const void* src, size_t size) { return memcpy(dest,src,size); }$/;"	f	file:
XXH_read32	Include/WAVM/Inline/xxhash/xxhash.c	/^FORCE_INLINE U32 XXH_read32(const void* memPtr) { return *(const U32*) memPtr; }$/;"	f
XXH_read32	Include/WAVM/Inline/xxhash/xxhash.c	/^FORCE_INLINE U32 XXH_read32(const void* memPtr)$/;"	f
XXH_read32	Include/WAVM/Inline/xxhash/xxhash.c	/^FORCE_INLINE U32 XXH_read32(const void* ptr) { return ((const unalign*)ptr)->u32; }$/;"	f
XXH_read64	Include/WAVM/Inline/xxhash/xxhash.c	/^	FORCE_INLINE U64 XXH_read64(const void* memPtr) { return *(const U64*) memPtr; }$/;"	f
XXH_read64	Include/WAVM/Inline/xxhash/xxhash.c	/^FORCE_INLINE U64 XXH_read64(const void* memPtr)$/;"	f
XXH_read64	Include/WAVM/Inline/xxhash/xxhash.c	/^FORCE_INLINE U64 XXH_read64(const void* ptr) { return ((const unalign64*)ptr)->u64; }$/;"	f
XXH_readBE32	Include/WAVM/Inline/xxhash/xxhash.c	/^FORCE_INLINE U32 XXH_readBE32(const void* ptr)$/;"	f
XXH_readBE64	Include/WAVM/Inline/xxhash/xxhash.c	/^FORCE_INLINE U64 XXH_readBE64(const void* ptr)$/;"	f
XXH_readLE32	Include/WAVM/Inline/xxhash/xxhash.c	/^FORCE_INLINE U32 XXH_readLE32(const void* ptr, XXH_endianess endian)$/;"	f
XXH_readLE32_align	Include/WAVM/Inline/xxhash/xxhash.c	/^FORCE_INLINE U32 XXH_readLE32_align(const void* ptr, XXH_endianess endian, XXH_alignment align)$/;"	f
XXH_readLE64	Include/WAVM/Inline/xxhash/xxhash.c	/^FORCE_INLINE U64 XXH_readLE64(const void* ptr, XXH_endianess endian)$/;"	f
XXH_readLE64_align	Include/WAVM/Inline/xxhash/xxhash.c	/^FORCE_INLINE U64 XXH_readLE64_align(const void* ptr, XXH_endianess endian, XXH_alignment align)$/;"	f
XXH_rotl32	Include/WAVM/Inline/xxhash/xxhash.c	/^#  define XXH_rotl32(/;"	d	file:
XXH_rotl64	Include/WAVM/Inline/xxhash/xxhash.c	/^#  define XXH_rotl64(/;"	d	file:
XXH_swap32	Include/WAVM/Inline/xxhash/xxhash.c	/^#  define XXH_swap32 /;"	d	file:
XXH_swap32	Include/WAVM/Inline/xxhash/xxhash.c	/^FORCE_INLINE U32 XXH_swap32 (U32 x)$/;"	f
XXH_swap64	Include/WAVM/Inline/xxhash/xxhash.c	/^#  define XXH_swap64 /;"	d	file:
XXH_swap64	Include/WAVM/Inline/xxhash/xxhash.c	/^FORCE_INLINE U64 XXH_swap64 (U64 x)$/;"	f
XXH_unaligned	Include/WAVM/Inline/xxhash/xxhash.c	/^typedef enum { XXH_aligned, XXH_unaligned } XXH_alignment;$/;"	e	enum:__anon38	file:
XXH_versionNumber	Include/WAVM/Inline/xxhash/xxhash.c	/^XXH_PUBLIC_API unsigned XXH_versionNumber (void) { return XXH_VERSION_NUMBER; }$/;"	f
XXH_versionNumber	Include/WAVM/Inline/xxhash/xxhash.h	/^#  define XXH_versionNumber /;"	d
ZeroOrMore	Lib/RegExp/RegExp.cpp	/^typedef Unary<NodeType::zeroOrMore> ZeroOrMore;$/;"	t	file:
_LIBUNWIND_ABORT	ThirdParty/libunwind/src/config.h	/^#define _LIBUNWIND_ABORT(/;"	d
_LIBUNWIND_ARM_EHABI	ThirdParty/libunwind/include/__libunwind_config.h	/^#define _LIBUNWIND_ARM_EHABI$/;"	d
_LIBUNWIND_BUILD_SJLJ_APIS	ThirdParty/libunwind/src/config.h	/^#define _LIBUNWIND_BUILD_SJLJ_APIS$/;"	d
_LIBUNWIND_BUILD_ZERO_COST_APIS	ThirdParty/libunwind/src/config.h	/^#define _LIBUNWIND_BUILD_ZERO_COST_APIS$/;"	d
_LIBUNWIND_CONTEXT_SIZE	ThirdParty/libunwind/include/__libunwind_config.h	/^#    define _LIBUNWIND_CONTEXT_SIZE /;"	d
_LIBUNWIND_CONTEXT_SIZE	ThirdParty/libunwind/include/__libunwind_config.h	/^#  define _LIBUNWIND_CONTEXT_SIZE /;"	d
_LIBUNWIND_CONTEXT_SIZE	ThirdParty/libunwind/include/__libunwind_config.h	/^# define _LIBUNWIND_CONTEXT_SIZE /;"	d
_LIBUNWIND_CURSOR_SIZE	ThirdParty/libunwind/include/__libunwind_config.h	/^#    define _LIBUNWIND_CURSOR_SIZE /;"	d
_LIBUNWIND_CURSOR_SIZE	ThirdParty/libunwind/include/__libunwind_config.h	/^#  define _LIBUNWIND_CURSOR_SIZE /;"	d
_LIBUNWIND_CURSOR_SIZE	ThirdParty/libunwind/include/__libunwind_config.h	/^# define _LIBUNWIND_CURSOR_SIZE /;"	d
_LIBUNWIND_DEBUG_LOG	ThirdParty/libunwind/src/config.h	/^  #define _LIBUNWIND_DEBUG_LOG(/;"	d
_LIBUNWIND_EXPORT	ThirdParty/libunwind/src/config.h	/^    #define _LIBUNWIND_EXPORT /;"	d
_LIBUNWIND_EXPORT	ThirdParty/libunwind/src/config.h	/^  #define _LIBUNWIND_EXPORT$/;"	d
_LIBUNWIND_EXPORT_UNWIND_LEVEL1	ThirdParty/libunwind/include/unwind.h	/^#define _LIBUNWIND_EXPORT_UNWIND_LEVEL1 /;"	d
_LIBUNWIND_HIDDEN	ThirdParty/libunwind/src/config.h	/^    #define _LIBUNWIND_HIDDEN /;"	d
_LIBUNWIND_HIDDEN	ThirdParty/libunwind/src/config.h	/^    #define _LIBUNWIND_HIDDEN$/;"	d
_LIBUNWIND_HIDDEN	ThirdParty/libunwind/src/config.h	/^  #define _LIBUNWIND_HIDDEN$/;"	d
_LIBUNWIND_HIGHEST_DWARF_REGISTER	ThirdParty/libunwind/include/__libunwind_config.h	/^#  define _LIBUNWIND_HIGHEST_DWARF_REGISTER /;"	d
_LIBUNWIND_HIGHEST_DWARF_REGISTER	ThirdParty/libunwind/include/__libunwind_config.h	/^# define _LIBUNWIND_HIGHEST_DWARF_REGISTER /;"	d
_LIBUNWIND_HIGHEST_DWARF_REGISTER_ARM	ThirdParty/libunwind/include/__libunwind_config.h	/^#define _LIBUNWIND_HIGHEST_DWARF_REGISTER_ARM /;"	d
_LIBUNWIND_HIGHEST_DWARF_REGISTER_ARM64	ThirdParty/libunwind/include/__libunwind_config.h	/^#define _LIBUNWIND_HIGHEST_DWARF_REGISTER_ARM64 /;"	d
_LIBUNWIND_HIGHEST_DWARF_REGISTER_MIPS	ThirdParty/libunwind/include/__libunwind_config.h	/^#define _LIBUNWIND_HIGHEST_DWARF_REGISTER_MIPS /;"	d
_LIBUNWIND_HIGHEST_DWARF_REGISTER_OR1K	ThirdParty/libunwind/include/__libunwind_config.h	/^#define _LIBUNWIND_HIGHEST_DWARF_REGISTER_OR1K /;"	d
_LIBUNWIND_HIGHEST_DWARF_REGISTER_PPC	ThirdParty/libunwind/include/__libunwind_config.h	/^#define _LIBUNWIND_HIGHEST_DWARF_REGISTER_PPC /;"	d
_LIBUNWIND_HIGHEST_DWARF_REGISTER_PPC64	ThirdParty/libunwind/include/__libunwind_config.h	/^#define _LIBUNWIND_HIGHEST_DWARF_REGISTER_PPC64 /;"	d
_LIBUNWIND_HIGHEST_DWARF_REGISTER_X86	ThirdParty/libunwind/include/__libunwind_config.h	/^#define _LIBUNWIND_HIGHEST_DWARF_REGISTER_X86 /;"	d
_LIBUNWIND_HIGHEST_DWARF_REGISTER_X86_64	ThirdParty/libunwind/include/__libunwind_config.h	/^#define _LIBUNWIND_HIGHEST_DWARF_REGISTER_X86_64 /;"	d
_LIBUNWIND_LOG	ThirdParty/libunwind/src/config.h	/^#define _LIBUNWIND_LOG(/;"	d
_LIBUNWIND_LOG0	ThirdParty/libunwind/src/config.h	/^#define _LIBUNWIND_LOG0(/;"	d
_LIBUNWIND_LOG_IF_FALSE	ThirdParty/libunwind/src/config.h	/^  #define _LIBUNWIND_LOG_IF_FALSE(/;"	d
_LIBUNWIND_SUPPORT_COMPACT_UNWIND	ThirdParty/libunwind/src/config.h	/^    #define _LIBUNWIND_SUPPORT_COMPACT_UNWIND$/;"	d
_LIBUNWIND_SUPPORT_DWARF_INDEX	ThirdParty/libunwind/src/config.h	/^    #define _LIBUNWIND_SUPPORT_DWARF_INDEX /;"	d
_LIBUNWIND_SUPPORT_DWARF_UNWIND	ThirdParty/libunwind/src/config.h	/^    #define _LIBUNWIND_SUPPORT_DWARF_UNWIND /;"	d
_LIBUNWIND_SUPPORT_DWARF_UNWIND	ThirdParty/libunwind/src/config.h	/^  #define _LIBUNWIND_SUPPORT_DWARF_UNWIND /;"	d
_LIBUNWIND_SUPPORT_FRAME_APIS	ThirdParty/libunwind/src/config.h	/^#define _LIBUNWIND_SUPPORT_FRAME_APIS$/;"	d
_LIBUNWIND_TARGET_AARCH64	ThirdParty/libunwind/include/__libunwind_config.h	/^#  define _LIBUNWIND_TARGET_AARCH64 /;"	d
_LIBUNWIND_TARGET_AARCH64	ThirdParty/libunwind/include/__libunwind_config.h	/^# define _LIBUNWIND_TARGET_AARCH64 /;"	d
_LIBUNWIND_TARGET_ARM	ThirdParty/libunwind/include/__libunwind_config.h	/^#  define _LIBUNWIND_TARGET_ARM /;"	d
_LIBUNWIND_TARGET_ARM	ThirdParty/libunwind/include/__libunwind_config.h	/^# define _LIBUNWIND_TARGET_ARM /;"	d
_LIBUNWIND_TARGET_I386	ThirdParty/libunwind/include/__libunwind_config.h	/^#  define _LIBUNWIND_TARGET_I386$/;"	d
_LIBUNWIND_TARGET_I386	ThirdParty/libunwind/include/__libunwind_config.h	/^# define _LIBUNWIND_TARGET_I386$/;"	d
_LIBUNWIND_TARGET_MIPS_NEWABI	ThirdParty/libunwind/include/__libunwind_config.h	/^#    define _LIBUNWIND_TARGET_MIPS_NEWABI /;"	d
_LIBUNWIND_TARGET_MIPS_NEWABI	ThirdParty/libunwind/include/__libunwind_config.h	/^# define _LIBUNWIND_TARGET_MIPS_NEWABI /;"	d
_LIBUNWIND_TARGET_MIPS_O32	ThirdParty/libunwind/include/__libunwind_config.h	/^#    define _LIBUNWIND_TARGET_MIPS_O32 /;"	d
_LIBUNWIND_TARGET_MIPS_O32	ThirdParty/libunwind/include/__libunwind_config.h	/^# define _LIBUNWIND_TARGET_MIPS_O32 /;"	d
_LIBUNWIND_TARGET_OR1K	ThirdParty/libunwind/include/__libunwind_config.h	/^#  define _LIBUNWIND_TARGET_OR1K /;"	d
_LIBUNWIND_TARGET_OR1K	ThirdParty/libunwind/include/__libunwind_config.h	/^# define _LIBUNWIND_TARGET_OR1K /;"	d
_LIBUNWIND_TARGET_PPC	ThirdParty/libunwind/include/__libunwind_config.h	/^#  define _LIBUNWIND_TARGET_PPC /;"	d
_LIBUNWIND_TARGET_PPC	ThirdParty/libunwind/include/__libunwind_config.h	/^# define _LIBUNWIND_TARGET_PPC /;"	d
_LIBUNWIND_TARGET_PPC64	ThirdParty/libunwind/include/__libunwind_config.h	/^#  define _LIBUNWIND_TARGET_PPC64 /;"	d
_LIBUNWIND_TARGET_PPC64	ThirdParty/libunwind/include/__libunwind_config.h	/^# define _LIBUNWIND_TARGET_PPC64 /;"	d
_LIBUNWIND_TARGET_X86_64	ThirdParty/libunwind/include/__libunwind_config.h	/^#  define _LIBUNWIND_TARGET_X86_64 /;"	d
_LIBUNWIND_TARGET_X86_64	ThirdParty/libunwind/include/__libunwind_config.h	/^# define _LIBUNWIND_TARGET_X86_64 /;"	d
_LIBUNWIND_THREAD_LOCAL	ThirdParty/libunwind/src/Unwind-sjlj.c	/^#  define _LIBUNWIND_THREAD_LOCAL /;"	d	file:
_LIBUNWIND_THREAD_LOCAL	ThirdParty/libunwind/src/Unwind-sjlj.c	/^# define _LIBUNWIND_THREAD_LOCAL$/;"	d	file:
_LIBUNWIND_TRACE_API	ThirdParty/libunwind/src/config.h	/^  #define _LIBUNWIND_TRACE_API(/;"	d
_LIBUNWIND_TRACE_DWARF	ThirdParty/libunwind/src/config.h	/^  #define _LIBUNWIND_TRACE_DWARF(/;"	d
_LIBUNWIND_TRACE_UNWINDING	ThirdParty/libunwind/src/config.h	/^  #define _LIBUNWIND_TRACE_UNWINDING(/;"	d
_LIBUNWIND_TRACING_DWARF	ThirdParty/libunwind/src/config.h	/^  #define _LIBUNWIND_TRACING_DWARF /;"	d
_LIBUNWIND_TRACING_UNWINDING	ThirdParty/libunwind/src/config.h	/^  #define _LIBUNWIND_TRACING_UNWINDING /;"	d
_LIBUNWIND_UNWIND_LEVEL1_EXTERNAL_LINKAGE	ThirdParty/libunwind/src/UnwindLevel1.c	/^#define _LIBUNWIND_UNWIND_LEVEL1_EXTERNAL_LINKAGE /;"	d	file:
_Self	ThirdParty/libunwind/src/UnwindCursor.hpp	/^  typedef EHABISectionIterator _Self;$/;"	t	struct:libunwind::EHABISectionIterator
_UA_CLEANUP_PHASE	ThirdParty/libunwind/include/unwind.h	/^  _UA_CLEANUP_PHASE = 2,$/;"	e	enum:__anon55
_UA_END_OF_STACK	ThirdParty/libunwind/include/unwind.h	/^  _UA_END_OF_STACK = 16 \/\/ gcc extension to C++ ABI$/;"	e	enum:__anon55
_UA_FORCE_UNWIND	ThirdParty/libunwind/include/unwind.h	/^  _UA_FORCE_UNWIND = 8,$/;"	e	enum:__anon55
_UA_HANDLER_FRAME	ThirdParty/libunwind/include/unwind.h	/^  _UA_HANDLER_FRAME = 4,$/;"	e	enum:__anon55
_UA_SEARCH_PHASE	ThirdParty/libunwind/include/unwind.h	/^  _UA_SEARCH_PHASE = 1,$/;"	e	enum:__anon55
_URC_CONTINUE_UNWIND	ThirdParty/libunwind/include/unwind.h	/^  _URC_CONTINUE_UNWIND = 8,$/;"	e	enum:__anon54
_URC_END_OF_STACK	ThirdParty/libunwind/include/unwind.h	/^  _URC_END_OF_STACK = 5,$/;"	e	enum:__anon54
_URC_FAILURE	ThirdParty/libunwind/include/unwind.h	/^  _URC_FAILURE = 9$/;"	e	enum:__anon54
_URC_FATAL_PHASE1_ERROR	ThirdParty/libunwind/include/unwind.h	/^  _URC_FATAL_PHASE1_ERROR = 3,$/;"	e	enum:__anon54
_URC_FATAL_PHASE2_ERROR	ThirdParty/libunwind/include/unwind.h	/^  _URC_FATAL_PHASE2_ERROR = 2,$/;"	e	enum:__anon54
_URC_FOREIGN_EXCEPTION_CAUGHT	ThirdParty/libunwind/include/unwind.h	/^  _URC_FOREIGN_EXCEPTION_CAUGHT = 1,$/;"	e	enum:__anon54
_URC_HANDLER_FOUND	ThirdParty/libunwind/include/unwind.h	/^  _URC_HANDLER_FOUND = 6,$/;"	e	enum:__anon54
_URC_INSTALL_CONTEXT	ThirdParty/libunwind/include/unwind.h	/^  _URC_INSTALL_CONTEXT = 7,$/;"	e	enum:__anon54
_URC_NORMAL_STOP	ThirdParty/libunwind/include/unwind.h	/^  _URC_NORMAL_STOP = 4,$/;"	e	enum:__anon54
_URC_NO_REASON	ThirdParty/libunwind/include/unwind.h	/^  _URC_NO_REASON = 0,$/;"	e	enum:__anon54
_URC_OK	ThirdParty/libunwind/include/unwind.h	/^  _URC_OK = 0,$/;"	e	enum:__anon54
_US_ACTION_MASK	ThirdParty/libunwind/include/unwind.h	/^static const _Unwind_State _US_ACTION_MASK            = 3;$/;"	v
_US_FORCE_UNWIND	ThirdParty/libunwind/include/unwind.h	/^static const _Unwind_State _US_FORCE_UNWIND           = 8;$/;"	v
_US_UNWIND_FRAME_RESUME	ThirdParty/libunwind/include/unwind.h	/^static const _Unwind_State _US_UNWIND_FRAME_RESUME    = 2;$/;"	v
_US_UNWIND_FRAME_STARTING	ThirdParty/libunwind/include/unwind.h	/^static const _Unwind_State _US_UNWIND_FRAME_STARTING  = 1;$/;"	v
_US_VIRTUAL_UNWIND_FRAME	ThirdParty/libunwind/include/unwind.h	/^static const _Unwind_State _US_VIRTUAL_UNWIND_FRAME   = 0;$/;"	v
_UVRSC_CORE	ThirdParty/libunwind/include/unwind.h	/^  _UVRSC_CORE = 0, \/* integer register *\/$/;"	e	enum:__anon60
_UVRSC_VFP	ThirdParty/libunwind/include/unwind.h	/^  _UVRSC_VFP = 1, \/* vfp *\/$/;"	e	enum:__anon60
_UVRSC_WMMXC	ThirdParty/libunwind/include/unwind.h	/^  _UVRSC_WMMXC = 4 \/* Intel WMMX control register *\/$/;"	e	enum:__anon60
_UVRSC_WMMXD	ThirdParty/libunwind/include/unwind.h	/^  _UVRSC_WMMXD = 3, \/* Intel WMMX data register *\/$/;"	e	enum:__anon60
_UVRSD_DOUBLE	ThirdParty/libunwind/include/unwind.h	/^  _UVRSD_DOUBLE = 5$/;"	e	enum:__anon61
_UVRSD_FLOAT	ThirdParty/libunwind/include/unwind.h	/^  _UVRSD_FLOAT = 4,$/;"	e	enum:__anon61
_UVRSD_UINT32	ThirdParty/libunwind/include/unwind.h	/^  _UVRSD_UINT32 = 0,$/;"	e	enum:__anon61
_UVRSD_UINT64	ThirdParty/libunwind/include/unwind.h	/^  _UVRSD_UINT64 = 3,$/;"	e	enum:__anon61
_UVRSD_VFPX	ThirdParty/libunwind/include/unwind.h	/^  _UVRSD_VFPX = 1,$/;"	e	enum:__anon61
_UVRSR_FAILED	ThirdParty/libunwind/include/unwind.h	/^  _UVRSR_FAILED = 2$/;"	e	enum:__anon62
_UVRSR_NOT_IMPLEMENTED	ThirdParty/libunwind/include/unwind.h	/^  _UVRSR_NOT_IMPLEMENTED = 1,$/;"	e	enum:__anon62
_UVRSR_OK	ThirdParty/libunwind/include/unwind.h	/^  _UVRSR_OK = 0,$/;"	e	enum:__anon62
_Unwind_Action	ThirdParty/libunwind/include/unwind.h	/^} _Unwind_Action;$/;"	t	typeref:enum:__anon55
_Unwind_Backtrace	ThirdParty/libunwind/src/UnwindLevel1-gcc-ext.c	/^_Unwind_Backtrace(_Unwind_Trace_Fn callback, void *ref) {$/;"	f
_Unwind_Complete	ThirdParty/libunwind/src/Unwind-EHABI.cpp	/^_LIBUNWIND_EXPORT void _Unwind_Complete(_Unwind_Exception* exception_object) {$/;"	f
_Unwind_Context	ThirdParty/libunwind/include/unwind.h	/^typedef struct _Unwind_Context _Unwind_Context;   \/\/ opaque$/;"	t	typeref:struct:_Unwind_Context
_Unwind_Control_Block	ThirdParty/libunwind/include/unwind.h	/^struct _Unwind_Control_Block {$/;"	s
_Unwind_Control_Block	ThirdParty/libunwind/include/unwind.h	/^typedef struct _Unwind_Control_Block _Unwind_Control_Block;$/;"	t	typeref:struct:_Unwind_Control_Block
_Unwind_DeleteException	ThirdParty/libunwind/src/Unwind-EHABI.cpp	/^_Unwind_DeleteException(_Unwind_Exception *exception_object) {$/;"	f
_Unwind_DeleteException	ThirdParty/libunwind/src/Unwind-sjlj.c	/^_Unwind_DeleteException(struct _Unwind_Exception *exception_object) {$/;"	f
_Unwind_DeleteException	ThirdParty/libunwind/src/UnwindLevel1.c	/^_Unwind_DeleteException(_Unwind_Exception *exception_object) {$/;"	f
_Unwind_EHT_Header	ThirdParty/libunwind/include/unwind.h	/^typedef uint32_t _Unwind_EHT_Header;$/;"	t
_Unwind_Exception	ThirdParty/libunwind/include/unwind.h	/^struct _Unwind_Exception {$/;"	s
_Unwind_Exception	ThirdParty/libunwind/include/unwind.h	/^typedef struct _Unwind_Control_Block _Unwind_Exception; \/* Alias *\/$/;"	t	typeref:struct:_Unwind_Control_Block
_Unwind_Exception	ThirdParty/libunwind/include/unwind.h	/^typedef struct _Unwind_Exception _Unwind_Exception;$/;"	t	typeref:struct:_Unwind_Exception
_Unwind_FindEnclosingFunction	ThirdParty/libunwind/src/UnwindLevel1-gcc-ext.c	/^_LIBUNWIND_EXPORT void *_Unwind_FindEnclosingFunction(void *pc) {$/;"	f
_Unwind_Find_FDE	ThirdParty/libunwind/src/UnwindLevel1-gcc-ext.c	/^_LIBUNWIND_EXPORT const void *_Unwind_Find_FDE(const void *pc,$/;"	f
_Unwind_ForcedUnwind	ThirdParty/libunwind/src/UnwindLevel1.c	/^_Unwind_ForcedUnwind(_Unwind_Exception *exception_object,$/;"	f
_Unwind_FunctionContext	ThirdParty/libunwind/src/Unwind-sjlj.c	/^struct _Unwind_FunctionContext {$/;"	s	file:
_Unwind_FunctionContext_t	ThirdParty/libunwind/include/unwind.h	/^typedef struct _Unwind_FunctionContext *_Unwind_FunctionContext_t;$/;"	t	typeref:struct:_Unwind_FunctionContext
_Unwind_GetCFA	ThirdParty/libunwind/src/Unwind-sjlj.c	/^_LIBUNWIND_EXPORT uintptr_t _Unwind_GetCFA(struct _Unwind_Context *context) {$/;"	f
_Unwind_GetCFA	ThirdParty/libunwind/src/UnwindLevel1-gcc-ext.c	/^_LIBUNWIND_EXPORT uintptr_t _Unwind_GetCFA(struct _Unwind_Context *context) {$/;"	f
_Unwind_GetDataRelBase	ThirdParty/libunwind/src/Unwind-sjlj.c	/^_Unwind_GetDataRelBase(struct _Unwind_Context *context) {$/;"	f
_Unwind_GetDataRelBase	ThirdParty/libunwind/src/UnwindLevel1-gcc-ext.c	/^_Unwind_GetDataRelBase(struct _Unwind_Context *context) {$/;"	f
_Unwind_GetGR	ThirdParty/libunwind/include/unwind.h	/^uintptr_t _Unwind_GetGR(struct _Unwind_Context *context, int index) {$/;"	f
_Unwind_GetGR	ThirdParty/libunwind/src/Unwind-sjlj.c	/^_LIBUNWIND_EXPORT uintptr_t _Unwind_GetGR(struct _Unwind_Context *context,$/;"	f
_Unwind_GetGR	ThirdParty/libunwind/src/UnwindLevel1.c	/^_Unwind_GetGR(struct _Unwind_Context *context, int index) {$/;"	f
_Unwind_GetIP	ThirdParty/libunwind/include/unwind.h	/^uintptr_t _Unwind_GetIP(struct _Unwind_Context *context) {$/;"	f
_Unwind_GetIP	ThirdParty/libunwind/src/Unwind-sjlj.c	/^_LIBUNWIND_EXPORT uintptr_t _Unwind_GetIP(struct _Unwind_Context *context) {$/;"	f
_Unwind_GetIP	ThirdParty/libunwind/src/UnwindLevel1.c	/^_LIBUNWIND_EXPORT uintptr_t _Unwind_GetIP(struct _Unwind_Context *context) {$/;"	f
_Unwind_GetIPInfo	ThirdParty/libunwind/src/Unwind-sjlj.c	/^_LIBUNWIND_EXPORT uintptr_t _Unwind_GetIPInfo(struct _Unwind_Context *context,$/;"	f
_Unwind_GetIPInfo	ThirdParty/libunwind/src/UnwindLevel1-gcc-ext.c	/^_LIBUNWIND_EXPORT uintptr_t _Unwind_GetIPInfo(struct _Unwind_Context *context,$/;"	f
_Unwind_GetLanguageSpecificData	ThirdParty/libunwind/src/Unwind-EHABI.cpp	/^_Unwind_GetLanguageSpecificData(struct _Unwind_Context *context) {$/;"	f
_Unwind_GetLanguageSpecificData	ThirdParty/libunwind/src/Unwind-sjlj.c	/^_Unwind_GetLanguageSpecificData(struct _Unwind_Context *context) {$/;"	f
_Unwind_GetLanguageSpecificData	ThirdParty/libunwind/src/UnwindLevel1.c	/^_Unwind_GetLanguageSpecificData(struct _Unwind_Context *context) {$/;"	f
_Unwind_GetRegionStart	ThirdParty/libunwind/src/Unwind-EHABI.cpp	/^_Unwind_GetRegionStart(struct _Unwind_Context *context) {$/;"	f
_Unwind_GetRegionStart	ThirdParty/libunwind/src/Unwind-sjlj.c	/^_Unwind_GetRegionStart(struct _Unwind_Context *context) {$/;"	f
_Unwind_GetRegionStart	ThirdParty/libunwind/src/UnwindLevel1.c	/^_Unwind_GetRegionStart(struct _Unwind_Context *context) {$/;"	f
_Unwind_GetTextRelBase	ThirdParty/libunwind/src/Unwind-sjlj.c	/^_Unwind_GetTextRelBase(struct _Unwind_Context *context) {$/;"	f
_Unwind_GetTextRelBase	ThirdParty/libunwind/src/UnwindLevel1-gcc-ext.c	/^_Unwind_GetTextRelBase(struct _Unwind_Context *context) {$/;"	f
_Unwind_RaiseException	ThirdParty/libunwind/src/Unwind-EHABI.cpp	/^_Unwind_RaiseException(_Unwind_Exception *exception_object) {$/;"	f
_Unwind_RaiseException	ThirdParty/libunwind/src/UnwindLevel1.c	/^_Unwind_RaiseException(_Unwind_Exception *exception_object) {$/;"	f
_Unwind_Reason_Code	ThirdParty/libunwind/include/unwind.h	/^} _Unwind_Reason_Code;$/;"	t	typeref:enum:__anon54
_Unwind_Resume	ThirdParty/libunwind/src/Unwind-EHABI.cpp	/^_Unwind_Resume(_Unwind_Exception *exception_object) {$/;"	f
_Unwind_Resume	ThirdParty/libunwind/src/UnwindLevel1.c	/^_Unwind_Resume(_Unwind_Exception *exception_object) {$/;"	f
_Unwind_Resume_or_Rethrow	ThirdParty/libunwind/src/UnwindLevel1-gcc-ext.c	/^_Unwind_Resume_or_Rethrow(_Unwind_Exception *exception_object) {$/;"	f
_Unwind_SetGR	ThirdParty/libunwind/include/unwind.h	/^void _Unwind_SetGR(struct _Unwind_Context *context, int index,$/;"	f
_Unwind_SetGR	ThirdParty/libunwind/src/Unwind-sjlj.c	/^_LIBUNWIND_EXPORT void _Unwind_SetGR(struct _Unwind_Context *context, int index,$/;"	f
_Unwind_SetGR	ThirdParty/libunwind/src/UnwindLevel1.c	/^_LIBUNWIND_EXPORT void _Unwind_SetGR(struct _Unwind_Context *context, int index,$/;"	f
_Unwind_SetIP	ThirdParty/libunwind/include/unwind.h	/^void _Unwind_SetIP(struct _Unwind_Context *context, uintptr_t value) {$/;"	f
_Unwind_SetIP	ThirdParty/libunwind/src/Unwind-sjlj.c	/^_LIBUNWIND_EXPORT void _Unwind_SetIP(struct _Unwind_Context *context,$/;"	f
_Unwind_SetIP	ThirdParty/libunwind/src/UnwindLevel1.c	/^_LIBUNWIND_EXPORT void _Unwind_SetIP(struct _Unwind_Context *context,$/;"	f
_Unwind_SjLj_RaiseException	ThirdParty/libunwind/src/Unwind-sjlj.c	/^_Unwind_SjLj_RaiseException(struct _Unwind_Exception *exception_object) {$/;"	f
_Unwind_SjLj_Register	ThirdParty/libunwind/src/Unwind-sjlj.c	/^_Unwind_SjLj_Register(struct _Unwind_FunctionContext *fc) {$/;"	f
_Unwind_SjLj_Resume	ThirdParty/libunwind/src/Unwind-sjlj.c	/^_Unwind_SjLj_Resume(struct _Unwind_Exception *exception_object) {$/;"	f
_Unwind_SjLj_Resume_or_Rethrow	ThirdParty/libunwind/src/Unwind-sjlj.c	/^_Unwind_SjLj_Resume_or_Rethrow(struct _Unwind_Exception *exception_object) {$/;"	f
_Unwind_SjLj_Unregister	ThirdParty/libunwind/src/Unwind-sjlj.c	/^_Unwind_SjLj_Unregister(struct _Unwind_FunctionContext *fc) {$/;"	f
_Unwind_State	ThirdParty/libunwind/include/unwind.h	/^typedef uint32_t _Unwind_State;$/;"	t
_Unwind_Stop_Fn	ThirdParty/libunwind/include/unwind.h	/^typedef _Unwind_Reason_Code (*_Unwind_Stop_Fn)$/;"	t
_Unwind_Trace_Fn	ThirdParty/libunwind/include/unwind.h	/^typedef _Unwind_Reason_Code (*_Unwind_Trace_Fn)(struct _Unwind_Context *,$/;"	t
_Unwind_VRS_DataRepresentation	ThirdParty/libunwind/include/unwind.h	/^} _Unwind_VRS_DataRepresentation;$/;"	t	typeref:enum:__anon61
_Unwind_VRS_Get	ThirdParty/libunwind/src/Unwind-EHABI.cpp	/^_Unwind_VRS_Get(_Unwind_Context *context, _Unwind_VRS_RegClass regclass,$/;"	f
_Unwind_VRS_Get_Internal	ThirdParty/libunwind/src/Unwind-EHABI.cpp	/^_Unwind_VRS_Get_Internal(_Unwind_Context *context,$/;"	f	file:
_Unwind_VRS_Interpret	ThirdParty/libunwind/src/Unwind-EHABI.cpp	/^_Unwind_VRS_Interpret(_Unwind_Context *context, const uint32_t *data,$/;"	f
_Unwind_VRS_Pop	ThirdParty/libunwind/src/Unwind-EHABI.cpp	/^_Unwind_VRS_Pop(_Unwind_Context *context, _Unwind_VRS_RegClass regclass,$/;"	f
_Unwind_VRS_RegClass	ThirdParty/libunwind/include/unwind.h	/^} _Unwind_VRS_RegClass;$/;"	t	typeref:enum:__anon60
_Unwind_VRS_Result	ThirdParty/libunwind/include/unwind.h	/^} _Unwind_VRS_Result;$/;"	t	typeref:enum:__anon62
_Unwind_VRS_Set	ThirdParty/libunwind/src/Unwind-EHABI.cpp	/^_Unwind_VRS_Set(_Unwind_Context *context, _Unwind_VRS_RegClass regclass,$/;"	f
__ADDRESSSPACE_HPP__	ThirdParty/libunwind/src/AddressSpace.hpp	/^#define __ADDRESSSPACE_HPP__$/;"	d
__ARM_ARCH	ThirdParty/libunwind/src/assembly.h	/^#define __ARM_ARCH /;"	d
__COMPACT_UNWINDER_HPP__	ThirdParty/libunwind/src/CompactUnwinder.hpp	/^#define __COMPACT_UNWINDER_HPP__$/;"	d
__COMPACT_UNWIND_ENCODING__	ThirdParty/libunwind/include/mach-o/compact_unwind_encoding.h	/^#define __COMPACT_UNWIND_ENCODING__$/;"	d
__DWARF2__	ThirdParty/libunwind/src/dwarf2.h	/^#define __DWARF2__$/;"	d
__DWARF_INSTRUCTIONS_HPP__	ThirdParty/libunwind/src/DwarfInstructions.hpp	/^#define __DWARF_INSTRUCTIONS_HPP__$/;"	d
__DWARF_PARSER_HPP__	ThirdParty/libunwind/src/DwarfParser.hpp	/^#define __DWARF_PARSER_HPP__$/;"	d
__EHHEADERPARSER_HPP__	ThirdParty/libunwind/src/EHHeaderParser.hpp	/^#define __EHHEADERPARSER_HPP__$/;"	d
__LIBUNWIND_EXT__	ThirdParty/libunwind/src/libunwind_ext.h	/^#define __LIBUNWIND_EXT__$/;"	d
__LIBUNWIND__	ThirdParty/libunwind/include/libunwind.h	/^#define __LIBUNWIND__$/;"	d
__REGISTERS_HPP__	ThirdParty/libunwind/src/Registers.hpp	/^#define __REGISTERS_HPP__$/;"	d
__RWMUTEX_HPP__	ThirdParty/libunwind/src/RWMutex.hpp	/^#define __RWMUTEX_HPP__$/;"	d
__UNWINDCURSOR_HPP__	ThirdParty/libunwind/src/UnwindCursor.hpp	/^#define __UNWINDCURSOR_HPP__$/;"	d
__UNWIND_EHABI_H__	ThirdParty/libunwind/src/Unwind-EHABI.h	/^#define __UNWIND_EHABI_H__$/;"	d
__UNWIND_H__	ThirdParty/libunwind/include/unwind.h	/^#define __UNWIND_H__$/;"	d
__Unwind_SjLj_GetTopOfFunctionStack	ThirdParty/libunwind/src/Unwind-sjlj.c	/^static struct _Unwind_FunctionContext *__Unwind_SjLj_GetTopOfFunctionStack() {$/;"	f	file:
__Unwind_SjLj_SetTopOfFunctionStack	ThirdParty/libunwind/src/Unwind-sjlj.c	/^__Unwind_SjLj_SetTopOfFunctionStack(struct _Unwind_FunctionContext *fc) {$/;"	f	file:
__WASI_ADVICE_DONTNEED	Lib/WASI/WASIDefinitions.h	/^#define __WASI_ADVICE_DONTNEED /;"	d
__WASI_ADVICE_NOREUSE	Lib/WASI/WASIDefinitions.h	/^#define __WASI_ADVICE_NOREUSE /;"	d
__WASI_ADVICE_NORMAL	Lib/WASI/WASIDefinitions.h	/^#define __WASI_ADVICE_NORMAL /;"	d
__WASI_ADVICE_RANDOM	Lib/WASI/WASIDefinitions.h	/^#define __WASI_ADVICE_RANDOM /;"	d
__WASI_ADVICE_SEQUENTIAL	Lib/WASI/WASIDefinitions.h	/^#define __WASI_ADVICE_SEQUENTIAL /;"	d
__WASI_ADVICE_WILLNEED	Lib/WASI/WASIDefinitions.h	/^#define __WASI_ADVICE_WILLNEED /;"	d
__WASI_CLOCK_MONOTONIC	Lib/WASI/WASIDefinitions.h	/^#define __WASI_CLOCK_MONOTONIC /;"	d
__WASI_CLOCK_PROCESS_CPUTIME_ID	Lib/WASI/WASIDefinitions.h	/^#define __WASI_CLOCK_PROCESS_CPUTIME_ID /;"	d
__WASI_CLOCK_REALTIME	Lib/WASI/WASIDefinitions.h	/^#define __WASI_CLOCK_REALTIME /;"	d
__WASI_CLOCK_THREAD_CPUTIME_ID	Lib/WASI/WASIDefinitions.h	/^#define __WASI_CLOCK_THREAD_CPUTIME_ID /;"	d
__WASI_DIRCOOKIE_START	Lib/WASI/WASIDefinitions.h	/^#define __WASI_DIRCOOKIE_START /;"	d
__WASI_E2BIG	Lib/WASI/WASIDefinitions.h	/^#define __WASI_E2BIG /;"	d
__WASI_EACCES	Lib/WASI/WASIDefinitions.h	/^#define __WASI_EACCES /;"	d
__WASI_EADDRINUSE	Lib/WASI/WASIDefinitions.h	/^#define __WASI_EADDRINUSE /;"	d
__WASI_EADDRNOTAVAIL	Lib/WASI/WASIDefinitions.h	/^#define __WASI_EADDRNOTAVAIL /;"	d
__WASI_EAFNOSUPPORT	Lib/WASI/WASIDefinitions.h	/^#define __WASI_EAFNOSUPPORT /;"	d
__WASI_EAGAIN	Lib/WASI/WASIDefinitions.h	/^#define __WASI_EAGAIN /;"	d
__WASI_EALREADY	Lib/WASI/WASIDefinitions.h	/^#define __WASI_EALREADY /;"	d
__WASI_EBADF	Lib/WASI/WASIDefinitions.h	/^#define __WASI_EBADF /;"	d
__WASI_EBADMSG	Lib/WASI/WASIDefinitions.h	/^#define __WASI_EBADMSG /;"	d
__WASI_EBUSY	Lib/WASI/WASIDefinitions.h	/^#define __WASI_EBUSY /;"	d
__WASI_ECANCELED	Lib/WASI/WASIDefinitions.h	/^#define __WASI_ECANCELED /;"	d
__WASI_ECHILD	Lib/WASI/WASIDefinitions.h	/^#define __WASI_ECHILD /;"	d
__WASI_ECONNABORTED	Lib/WASI/WASIDefinitions.h	/^#define __WASI_ECONNABORTED /;"	d
__WASI_ECONNREFUSED	Lib/WASI/WASIDefinitions.h	/^#define __WASI_ECONNREFUSED /;"	d
__WASI_ECONNRESET	Lib/WASI/WASIDefinitions.h	/^#define __WASI_ECONNRESET /;"	d
__WASI_EDEADLK	Lib/WASI/WASIDefinitions.h	/^#define __WASI_EDEADLK /;"	d
__WASI_EDESTADDRREQ	Lib/WASI/WASIDefinitions.h	/^#define __WASI_EDESTADDRREQ /;"	d
__WASI_EDOM	Lib/WASI/WASIDefinitions.h	/^#define __WASI_EDOM /;"	d
__WASI_EDQUOT	Lib/WASI/WASIDefinitions.h	/^#define __WASI_EDQUOT /;"	d
__WASI_EEXIST	Lib/WASI/WASIDefinitions.h	/^#define __WASI_EEXIST /;"	d
__WASI_EFAULT	Lib/WASI/WASIDefinitions.h	/^#define __WASI_EFAULT /;"	d
__WASI_EFBIG	Lib/WASI/WASIDefinitions.h	/^#define __WASI_EFBIG /;"	d
__WASI_EHOSTUNREACH	Lib/WASI/WASIDefinitions.h	/^#define __WASI_EHOSTUNREACH /;"	d
__WASI_EIDRM	Lib/WASI/WASIDefinitions.h	/^#define __WASI_EIDRM /;"	d
__WASI_EILSEQ	Lib/WASI/WASIDefinitions.h	/^#define __WASI_EILSEQ /;"	d
__WASI_EINPROGRESS	Lib/WASI/WASIDefinitions.h	/^#define __WASI_EINPROGRESS /;"	d
__WASI_EINTR	Lib/WASI/WASIDefinitions.h	/^#define __WASI_EINTR /;"	d
__WASI_EINVAL	Lib/WASI/WASIDefinitions.h	/^#define __WASI_EINVAL /;"	d
__WASI_EIO	Lib/WASI/WASIDefinitions.h	/^#define __WASI_EIO /;"	d
__WASI_EISCONN	Lib/WASI/WASIDefinitions.h	/^#define __WASI_EISCONN /;"	d
__WASI_EISDIR	Lib/WASI/WASIDefinitions.h	/^#define __WASI_EISDIR /;"	d
__WASI_ELOOP	Lib/WASI/WASIDefinitions.h	/^#define __WASI_ELOOP /;"	d
__WASI_EMFILE	Lib/WASI/WASIDefinitions.h	/^#define __WASI_EMFILE /;"	d
__WASI_EMLINK	Lib/WASI/WASIDefinitions.h	/^#define __WASI_EMLINK /;"	d
__WASI_EMSGSIZE	Lib/WASI/WASIDefinitions.h	/^#define __WASI_EMSGSIZE /;"	d
__WASI_EMULTIHOP	Lib/WASI/WASIDefinitions.h	/^#define __WASI_EMULTIHOP /;"	d
__WASI_ENAMETOOLONG	Lib/WASI/WASIDefinitions.h	/^#define __WASI_ENAMETOOLONG /;"	d
__WASI_ENETDOWN	Lib/WASI/WASIDefinitions.h	/^#define __WASI_ENETDOWN /;"	d
__WASI_ENETRESET	Lib/WASI/WASIDefinitions.h	/^#define __WASI_ENETRESET /;"	d
__WASI_ENETUNREACH	Lib/WASI/WASIDefinitions.h	/^#define __WASI_ENETUNREACH /;"	d
__WASI_ENFILE	Lib/WASI/WASIDefinitions.h	/^#define __WASI_ENFILE /;"	d
__WASI_ENOBUFS	Lib/WASI/WASIDefinitions.h	/^#define __WASI_ENOBUFS /;"	d
__WASI_ENODEV	Lib/WASI/WASIDefinitions.h	/^#define __WASI_ENODEV /;"	d
__WASI_ENOENT	Lib/WASI/WASIDefinitions.h	/^#define __WASI_ENOENT /;"	d
__WASI_ENOEXEC	Lib/WASI/WASIDefinitions.h	/^#define __WASI_ENOEXEC /;"	d
__WASI_ENOLCK	Lib/WASI/WASIDefinitions.h	/^#define __WASI_ENOLCK /;"	d
__WASI_ENOLINK	Lib/WASI/WASIDefinitions.h	/^#define __WASI_ENOLINK /;"	d
__WASI_ENOMEM	Lib/WASI/WASIDefinitions.h	/^#define __WASI_ENOMEM /;"	d
__WASI_ENOMSG	Lib/WASI/WASIDefinitions.h	/^#define __WASI_ENOMSG /;"	d
__WASI_ENOPROTOOPT	Lib/WASI/WASIDefinitions.h	/^#define __WASI_ENOPROTOOPT /;"	d
__WASI_ENOSPC	Lib/WASI/WASIDefinitions.h	/^#define __WASI_ENOSPC /;"	d
__WASI_ENOSYS	Lib/WASI/WASIDefinitions.h	/^#define __WASI_ENOSYS /;"	d
__WASI_ENOTCAPABLE	Lib/WASI/WASIDefinitions.h	/^#define __WASI_ENOTCAPABLE /;"	d
__WASI_ENOTCONN	Lib/WASI/WASIDefinitions.h	/^#define __WASI_ENOTCONN /;"	d
__WASI_ENOTDIR	Lib/WASI/WASIDefinitions.h	/^#define __WASI_ENOTDIR /;"	d
__WASI_ENOTEMPTY	Lib/WASI/WASIDefinitions.h	/^#define __WASI_ENOTEMPTY /;"	d
__WASI_ENOTRECOVERABLE	Lib/WASI/WASIDefinitions.h	/^#define __WASI_ENOTRECOVERABLE /;"	d
__WASI_ENOTSOCK	Lib/WASI/WASIDefinitions.h	/^#define __WASI_ENOTSOCK /;"	d
__WASI_ENOTSUP	Lib/WASI/WASIDefinitions.h	/^#define __WASI_ENOTSUP /;"	d
__WASI_ENOTTY	Lib/WASI/WASIDefinitions.h	/^#define __WASI_ENOTTY /;"	d
__WASI_ENXIO	Lib/WASI/WASIDefinitions.h	/^#define __WASI_ENXIO /;"	d
__WASI_EOVERFLOW	Lib/WASI/WASIDefinitions.h	/^#define __WASI_EOVERFLOW /;"	d
__WASI_EOWNERDEAD	Lib/WASI/WASIDefinitions.h	/^#define __WASI_EOWNERDEAD /;"	d
__WASI_EPERM	Lib/WASI/WASIDefinitions.h	/^#define __WASI_EPERM /;"	d
__WASI_EPIPE	Lib/WASI/WASIDefinitions.h	/^#define __WASI_EPIPE /;"	d
__WASI_EPROTO	Lib/WASI/WASIDefinitions.h	/^#define __WASI_EPROTO /;"	d
__WASI_EPROTONOSUPPORT	Lib/WASI/WASIDefinitions.h	/^#define __WASI_EPROTONOSUPPORT /;"	d
__WASI_EPROTOTYPE	Lib/WASI/WASIDefinitions.h	/^#define __WASI_EPROTOTYPE /;"	d
__WASI_ERANGE	Lib/WASI/WASIDefinitions.h	/^#define __WASI_ERANGE /;"	d
__WASI_EROFS	Lib/WASI/WASIDefinitions.h	/^#define __WASI_EROFS /;"	d
__WASI_ESPIPE	Lib/WASI/WASIDefinitions.h	/^#define __WASI_ESPIPE /;"	d
__WASI_ESRCH	Lib/WASI/WASIDefinitions.h	/^#define __WASI_ESRCH /;"	d
__WASI_ESTALE	Lib/WASI/WASIDefinitions.h	/^#define __WASI_ESTALE /;"	d
__WASI_ESUCCESS	Lib/WASI/WASIDefinitions.h	/^#define __WASI_ESUCCESS /;"	d
__WASI_ETIMEDOUT	Lib/WASI/WASIDefinitions.h	/^#define __WASI_ETIMEDOUT /;"	d
__WASI_ETXTBSY	Lib/WASI/WASIDefinitions.h	/^#define __WASI_ETXTBSY /;"	d
__WASI_EVENTTYPE_CLOCK	Lib/WASI/WASIDefinitions.h	/^#define __WASI_EVENTTYPE_CLOCK /;"	d
__WASI_EVENTTYPE_FD_READ	Lib/WASI/WASIDefinitions.h	/^#define __WASI_EVENTTYPE_FD_READ /;"	d
__WASI_EVENTTYPE_FD_WRITE	Lib/WASI/WASIDefinitions.h	/^#define __WASI_EVENTTYPE_FD_WRITE /;"	d
__WASI_EVENT_FD_READWRITE_HANGUP	Lib/WASI/WASIDefinitions.h	/^#define __WASI_EVENT_FD_READWRITE_HANGUP /;"	d
__WASI_EXDEV	Lib/WASI/WASIDefinitions.h	/^#define __WASI_EXDEV /;"	d
__WASI_FDFLAG_APPEND	Lib/WASI/WASIDefinitions.h	/^#define __WASI_FDFLAG_APPEND /;"	d
__WASI_FDFLAG_DSYNC	Lib/WASI/WASIDefinitions.h	/^#define __WASI_FDFLAG_DSYNC /;"	d
__WASI_FDFLAG_NONBLOCK	Lib/WASI/WASIDefinitions.h	/^#define __WASI_FDFLAG_NONBLOCK /;"	d
__WASI_FDFLAG_RSYNC	Lib/WASI/WASIDefinitions.h	/^#define __WASI_FDFLAG_RSYNC /;"	d
__WASI_FDFLAG_SYNC	Lib/WASI/WASIDefinitions.h	/^#define __WASI_FDFLAG_SYNC /;"	d
__WASI_FILESTAT_SET_ATIM	Lib/WASI/WASIDefinitions.h	/^#define __WASI_FILESTAT_SET_ATIM /;"	d
__WASI_FILESTAT_SET_ATIM_NOW	Lib/WASI/WASIDefinitions.h	/^#define __WASI_FILESTAT_SET_ATIM_NOW /;"	d
__WASI_FILESTAT_SET_MTIM	Lib/WASI/WASIDefinitions.h	/^#define __WASI_FILESTAT_SET_MTIM /;"	d
__WASI_FILESTAT_SET_MTIM_NOW	Lib/WASI/WASIDefinitions.h	/^#define __WASI_FILESTAT_SET_MTIM_NOW /;"	d
__WASI_FILETYPE_BLOCK_DEVICE	Lib/WASI/WASIDefinitions.h	/^#define __WASI_FILETYPE_BLOCK_DEVICE /;"	d
__WASI_FILETYPE_CHARACTER_DEVICE	Lib/WASI/WASIDefinitions.h	/^#define __WASI_FILETYPE_CHARACTER_DEVICE /;"	d
__WASI_FILETYPE_DIRECTORY	Lib/WASI/WASIDefinitions.h	/^#define __WASI_FILETYPE_DIRECTORY /;"	d
__WASI_FILETYPE_REGULAR_FILE	Lib/WASI/WASIDefinitions.h	/^#define __WASI_FILETYPE_REGULAR_FILE /;"	d
__WASI_FILETYPE_SOCKET_DGRAM	Lib/WASI/WASIDefinitions.h	/^#define __WASI_FILETYPE_SOCKET_DGRAM /;"	d
__WASI_FILETYPE_SOCKET_STREAM	Lib/WASI/WASIDefinitions.h	/^#define __WASI_FILETYPE_SOCKET_STREAM /;"	d
__WASI_FILETYPE_SYMBOLIC_LINK	Lib/WASI/WASIDefinitions.h	/^#define __WASI_FILETYPE_SYMBOLIC_LINK /;"	d
__WASI_FILETYPE_UNKNOWN	Lib/WASI/WASIDefinitions.h	/^#define __WASI_FILETYPE_UNKNOWN /;"	d
__WASI_LOOKUP_SYMLINK_FOLLOW	Lib/WASI/WASIDefinitions.h	/^#define __WASI_LOOKUP_SYMLINK_FOLLOW /;"	d
__WASI_O_CREAT	Lib/WASI/WASIDefinitions.h	/^#define __WASI_O_CREAT /;"	d
__WASI_O_DIRECTORY	Lib/WASI/WASIDefinitions.h	/^#define __WASI_O_DIRECTORY /;"	d
__WASI_O_EXCL	Lib/WASI/WASIDefinitions.h	/^#define __WASI_O_EXCL /;"	d
__WASI_O_TRUNC	Lib/WASI/WASIDefinitions.h	/^#define __WASI_O_TRUNC /;"	d
__WASI_PREOPENTYPE_DIR	Lib/WASI/WASIDefinitions.h	/^#define __WASI_PREOPENTYPE_DIR /;"	d
__WASI_RIGHT_FD_ADVISE	Lib/WASI/WASIDefinitions.h	/^#define __WASI_RIGHT_FD_ADVISE /;"	d
__WASI_RIGHT_FD_ALLOCATE	Lib/WASI/WASIDefinitions.h	/^#define __WASI_RIGHT_FD_ALLOCATE /;"	d
__WASI_RIGHT_FD_DATASYNC	Lib/WASI/WASIDefinitions.h	/^#define __WASI_RIGHT_FD_DATASYNC /;"	d
__WASI_RIGHT_FD_FDSTAT_SET_FLAGS	Lib/WASI/WASIDefinitions.h	/^#define __WASI_RIGHT_FD_FDSTAT_SET_FLAGS /;"	d
__WASI_RIGHT_FD_FILESTAT_GET	Lib/WASI/WASIDefinitions.h	/^#define __WASI_RIGHT_FD_FILESTAT_GET /;"	d
__WASI_RIGHT_FD_FILESTAT_SET_SIZE	Lib/WASI/WASIDefinitions.h	/^#define __WASI_RIGHT_FD_FILESTAT_SET_SIZE /;"	d
__WASI_RIGHT_FD_FILESTAT_SET_TIMES	Lib/WASI/WASIDefinitions.h	/^#define __WASI_RIGHT_FD_FILESTAT_SET_TIMES /;"	d
__WASI_RIGHT_FD_READ	Lib/WASI/WASIDefinitions.h	/^#define __WASI_RIGHT_FD_READ /;"	d
__WASI_RIGHT_FD_READDIR	Lib/WASI/WASIDefinitions.h	/^#define __WASI_RIGHT_FD_READDIR /;"	d
__WASI_RIGHT_FD_SEEK	Lib/WASI/WASIDefinitions.h	/^#define __WASI_RIGHT_FD_SEEK /;"	d
__WASI_RIGHT_FD_SYNC	Lib/WASI/WASIDefinitions.h	/^#define __WASI_RIGHT_FD_SYNC /;"	d
__WASI_RIGHT_FD_TELL	Lib/WASI/WASIDefinitions.h	/^#define __WASI_RIGHT_FD_TELL /;"	d
__WASI_RIGHT_FD_WRITE	Lib/WASI/WASIDefinitions.h	/^#define __WASI_RIGHT_FD_WRITE /;"	d
__WASI_RIGHT_PATH_CREATE_DIRECTORY	Lib/WASI/WASIDefinitions.h	/^#define __WASI_RIGHT_PATH_CREATE_DIRECTORY /;"	d
__WASI_RIGHT_PATH_CREATE_FILE	Lib/WASI/WASIDefinitions.h	/^#define __WASI_RIGHT_PATH_CREATE_FILE /;"	d
__WASI_RIGHT_PATH_FILESTAT_GET	Lib/WASI/WASIDefinitions.h	/^#define __WASI_RIGHT_PATH_FILESTAT_GET /;"	d
__WASI_RIGHT_PATH_FILESTAT_SET_SIZE	Lib/WASI/WASIDefinitions.h	/^#define __WASI_RIGHT_PATH_FILESTAT_SET_SIZE /;"	d
__WASI_RIGHT_PATH_FILESTAT_SET_TIMES	Lib/WASI/WASIDefinitions.h	/^#define __WASI_RIGHT_PATH_FILESTAT_SET_TIMES /;"	d
__WASI_RIGHT_PATH_LINK_SOURCE	Lib/WASI/WASIDefinitions.h	/^#define __WASI_RIGHT_PATH_LINK_SOURCE /;"	d
__WASI_RIGHT_PATH_LINK_TARGET	Lib/WASI/WASIDefinitions.h	/^#define __WASI_RIGHT_PATH_LINK_TARGET /;"	d
__WASI_RIGHT_PATH_OPEN	Lib/WASI/WASIDefinitions.h	/^#define __WASI_RIGHT_PATH_OPEN /;"	d
__WASI_RIGHT_PATH_READLINK	Lib/WASI/WASIDefinitions.h	/^#define __WASI_RIGHT_PATH_READLINK /;"	d
__WASI_RIGHT_PATH_REMOVE_DIRECTORY	Lib/WASI/WASIDefinitions.h	/^#define __WASI_RIGHT_PATH_REMOVE_DIRECTORY /;"	d
__WASI_RIGHT_PATH_RENAME_SOURCE	Lib/WASI/WASIDefinitions.h	/^#define __WASI_RIGHT_PATH_RENAME_SOURCE /;"	d
__WASI_RIGHT_PATH_RENAME_TARGET	Lib/WASI/WASIDefinitions.h	/^#define __WASI_RIGHT_PATH_RENAME_TARGET /;"	d
__WASI_RIGHT_PATH_SYMLINK	Lib/WASI/WASIDefinitions.h	/^#define __WASI_RIGHT_PATH_SYMLINK /;"	d
__WASI_RIGHT_PATH_UNLINK_FILE	Lib/WASI/WASIDefinitions.h	/^#define __WASI_RIGHT_PATH_UNLINK_FILE /;"	d
__WASI_RIGHT_POLL_FD_READWRITE	Lib/WASI/WASIDefinitions.h	/^#define __WASI_RIGHT_POLL_FD_READWRITE /;"	d
__WASI_RIGHT_SOCK_SHUTDOWN	Lib/WASI/WASIDefinitions.h	/^#define __WASI_RIGHT_SOCK_SHUTDOWN /;"	d
__WASI_SHUT_RD	Lib/WASI/WASIDefinitions.h	/^#define __WASI_SHUT_RD /;"	d
__WASI_SHUT_WR	Lib/WASI/WASIDefinitions.h	/^#define __WASI_SHUT_WR /;"	d
__WASI_SIGABRT	Lib/WASI/WASIDefinitions.h	/^#define __WASI_SIGABRT /;"	d
__WASI_SIGALRM	Lib/WASI/WASIDefinitions.h	/^#define __WASI_SIGALRM /;"	d
__WASI_SIGBUS	Lib/WASI/WASIDefinitions.h	/^#define __WASI_SIGBUS /;"	d
__WASI_SIGCHLD	Lib/WASI/WASIDefinitions.h	/^#define __WASI_SIGCHLD /;"	d
__WASI_SIGCONT	Lib/WASI/WASIDefinitions.h	/^#define __WASI_SIGCONT /;"	d
__WASI_SIGFPE	Lib/WASI/WASIDefinitions.h	/^#define __WASI_SIGFPE /;"	d
__WASI_SIGHUP	Lib/WASI/WASIDefinitions.h	/^#define __WASI_SIGHUP /;"	d
__WASI_SIGILL	Lib/WASI/WASIDefinitions.h	/^#define __WASI_SIGILL /;"	d
__WASI_SIGINT	Lib/WASI/WASIDefinitions.h	/^#define __WASI_SIGINT /;"	d
__WASI_SIGKILL	Lib/WASI/WASIDefinitions.h	/^#define __WASI_SIGKILL /;"	d
__WASI_SIGPIPE	Lib/WASI/WASIDefinitions.h	/^#define __WASI_SIGPIPE /;"	d
__WASI_SIGPOLL	Lib/WASI/WASIDefinitions.h	/^#define __WASI_SIGPOLL /;"	d
__WASI_SIGPROF	Lib/WASI/WASIDefinitions.h	/^#define __WASI_SIGPROF /;"	d
__WASI_SIGPWR	Lib/WASI/WASIDefinitions.h	/^#define __WASI_SIGPWR /;"	d
__WASI_SIGQUIT	Lib/WASI/WASIDefinitions.h	/^#define __WASI_SIGQUIT /;"	d
__WASI_SIGSEGV	Lib/WASI/WASIDefinitions.h	/^#define __WASI_SIGSEGV /;"	d
__WASI_SIGSTOP	Lib/WASI/WASIDefinitions.h	/^#define __WASI_SIGSTOP /;"	d
__WASI_SIGSYS	Lib/WASI/WASIDefinitions.h	/^#define __WASI_SIGSYS /;"	d
__WASI_SIGTERM	Lib/WASI/WASIDefinitions.h	/^#define __WASI_SIGTERM /;"	d
__WASI_SIGTRAP	Lib/WASI/WASIDefinitions.h	/^#define __WASI_SIGTRAP /;"	d
__WASI_SIGTSTP	Lib/WASI/WASIDefinitions.h	/^#define __WASI_SIGTSTP /;"	d
__WASI_SIGTTIN	Lib/WASI/WASIDefinitions.h	/^#define __WASI_SIGTTIN /;"	d
__WASI_SIGTTOU	Lib/WASI/WASIDefinitions.h	/^#define __WASI_SIGTTOU /;"	d
__WASI_SIGURG	Lib/WASI/WASIDefinitions.h	/^#define __WASI_SIGURG /;"	d
__WASI_SIGUSR1	Lib/WASI/WASIDefinitions.h	/^#define __WASI_SIGUSR1 /;"	d
__WASI_SIGUSR2	Lib/WASI/WASIDefinitions.h	/^#define __WASI_SIGUSR2 /;"	d
__WASI_SIGVTALRM	Lib/WASI/WASIDefinitions.h	/^#define __WASI_SIGVTALRM /;"	d
__WASI_SIGWINCH	Lib/WASI/WASIDefinitions.h	/^#define __WASI_SIGWINCH /;"	d
__WASI_SIGXCPU	Lib/WASI/WASIDefinitions.h	/^#define __WASI_SIGXCPU /;"	d
__WASI_SIGXFSZ	Lib/WASI/WASIDefinitions.h	/^#define __WASI_SIGXFSZ /;"	d
__WASI_SOCK_RECV_DATA_TRUNCATED	Lib/WASI/WASIDefinitions.h	/^#define __WASI_SOCK_RECV_DATA_TRUNCATED /;"	d
__WASI_SOCK_RECV_PEEK	Lib/WASI/WASIDefinitions.h	/^#define __WASI_SOCK_RECV_PEEK /;"	d
__WASI_SOCK_RECV_WAITALL	Lib/WASI/WASIDefinitions.h	/^#define __WASI_SOCK_RECV_WAITALL /;"	d
__WASI_SUBSCRIPTION_CLOCK_ABSTIME	Lib/WASI/WASIDefinitions.h	/^#define __WASI_SUBSCRIPTION_CLOCK_ABSTIME /;"	d
__WASI_WHENCE_CUR	Lib/WASI/WASIDefinitions.h	/^#define __WASI_WHENCE_CUR /;"	d
__WASI_WHENCE_END	Lib/WASI/WASIDefinitions.h	/^#define __WASI_WHENCE_END /;"	d
__WASI_WHENCE_SET	Lib/WASI/WASIDefinitions.h	/^#define __WASI_WHENCE_SET /;"	d
____LIBUNWIND_CONFIG_H__	ThirdParty/libunwind/include/__libunwind_config.h	/^#define ____LIBUNWIND_CONFIG_H__$/;"	d
__aeabi_unwind_cpp_pr0	ThirdParty/libunwind/src/Unwind-EHABI.cpp	/^__aeabi_unwind_cpp_pr0(_Unwind_State state, _Unwind_Control_Block *ucbp,$/;"	f
__aeabi_unwind_cpp_pr1	ThirdParty/libunwind/src/Unwind-EHABI.cpp	/^__aeabi_unwind_cpp_pr1(_Unwind_State state, _Unwind_Control_Block *ucbp,$/;"	f
__aeabi_unwind_cpp_pr2	ThirdParty/libunwind/src/Unwind-EHABI.cpp	/^__aeabi_unwind_cpp_pr2(_Unwind_State state, _Unwind_Control_Block *ucbp,$/;"	f
__asan_default_options	Lib/Platform/POSIX/Diagnostics.cpp	/^extern "C" const char* __asan_default_options()$/;"	f
__cr	ThirdParty/libunwind/src/Registers.hpp	/^    uint64_t __cr;      \/\/ Condition register$/;"	m	struct:libunwind::Registers_ppc64::ppc64_thread_state_t
__cr	ThirdParty/libunwind/src/Registers.hpp	/^    unsigned int __cr;     \/* Condition register *\/$/;"	m	struct:libunwind::Registers_ppc::ppc_thread_state_t
__cs	ThirdParty/libunwind/src/Registers.hpp	/^    uint64_t __cs;$/;"	m	struct:libunwind::Registers_x86_64::GPRs
__cs	ThirdParty/libunwind/src/Registers.hpp	/^    unsigned int __cs;$/;"	m	struct:libunwind::Registers_x86::GPRs
__ctr	ThirdParty/libunwind/src/Registers.hpp	/^    uint64_t __ctr;     \/\/ Count register$/;"	m	struct:libunwind::Registers_ppc64::ppc64_thread_state_t
__ctr	ThirdParty/libunwind/src/Registers.hpp	/^    unsigned int __ctr;    \/* Count register *\/$/;"	m	struct:libunwind::Registers_ppc::ppc_thread_state_t
__deregister_frame	Lib/Platform/POSIX/POSIXPrivate.h	/^inline void __deregister_frame(const void* fde)$/;"	f
__deregister_frame	ThirdParty/libunwind/src/UnwindLevel1-gcc-ext.c	/^_LIBUNWIND_EXPORT void __deregister_frame(const void *fde) {$/;"	f
__deregister_frame_info	ThirdParty/libunwind/src/UnwindLevel1-gcc-ext.c	/^_LIBUNWIND_EXPORT void *__deregister_frame_info(const void *fde) {$/;"	f
__deregister_frame_info_bases	ThirdParty/libunwind/src/UnwindLevel1-gcc-ext.c	/^_LIBUNWIND_EXPORT void *__deregister_frame_info_bases(const void *fde) {$/;"	f
__ds	ThirdParty/libunwind/src/Registers.hpp	/^    unsigned int __ds;$/;"	m	struct:libunwind::Registers_x86::GPRs
__eax	ThirdParty/libunwind/src/Registers.hpp	/^    unsigned int __eax;$/;"	m	struct:libunwind::Registers_x86::GPRs
__ebp	ThirdParty/libunwind/src/Registers.hpp	/^    unsigned int __ebp;$/;"	m	struct:libunwind::Registers_x86::GPRs
__ebx	ThirdParty/libunwind/src/Registers.hpp	/^    unsigned int __ebx;$/;"	m	struct:libunwind::Registers_x86::GPRs
__ecx	ThirdParty/libunwind/src/Registers.hpp	/^    unsigned int __ecx;$/;"	m	struct:libunwind::Registers_x86::GPRs
__edi	ThirdParty/libunwind/src/Registers.hpp	/^    unsigned int __edi;$/;"	m	struct:libunwind::Registers_x86::GPRs
__edx	ThirdParty/libunwind/src/Registers.hpp	/^    unsigned int __edx;$/;"	m	struct:libunwind::Registers_x86::GPRs
__eflags	ThirdParty/libunwind/src/Registers.hpp	/^    unsigned int __eflags;$/;"	m	struct:libunwind::Registers_x86::GPRs
__eip	ThirdParty/libunwind/src/Registers.hpp	/^    unsigned int __eip;$/;"	m	struct:libunwind::Registers_x86::GPRs
__es	ThirdParty/libunwind/src/Registers.hpp	/^    unsigned int __es;$/;"	m	struct:libunwind::Registers_x86::GPRs
__esi	ThirdParty/libunwind/src/Registers.hpp	/^    unsigned int __esi;$/;"	m	struct:libunwind::Registers_x86::GPRs
__esp	ThirdParty/libunwind/src/Registers.hpp	/^    unsigned int __esp;$/;"	m	struct:libunwind::Registers_x86::GPRs
__fp	ThirdParty/libunwind/src/Registers.hpp	/^    uint64_t __fp;    \/\/ Frame pointer x29$/;"	m	struct:libunwind::Registers_arm64::GPRs
__fpregs	ThirdParty/libunwind/src/Registers.hpp	/^    double __fpregs[32];$/;"	m	struct:libunwind::Registers_ppc::ppc_float_state_t
__fpscr	ThirdParty/libunwind/src/Registers.hpp	/^    unsigned int __fpscr;     \/* floating point status register *\/$/;"	m	struct:libunwind::Registers_ppc::ppc_float_state_t
__fpscr_pad	ThirdParty/libunwind/src/Registers.hpp	/^    unsigned int __fpscr_pad; \/* fpscr is 64 bits, 32 bits of rubbish *\/$/;"	m	struct:libunwind::Registers_ppc::ppc_float_state_t
__fs	ThirdParty/libunwind/src/Registers.hpp	/^    uint64_t __fs;$/;"	m	struct:libunwind::Registers_x86_64::GPRs
__fs	ThirdParty/libunwind/src/Registers.hpp	/^    unsigned int __fs;$/;"	m	struct:libunwind::Registers_x86::GPRs
__gnu_unwind_frame	ThirdParty/libunwind/src/Unwind-EHABI.cpp	/^__gnu_unwind_frame(_Unwind_Exception *exception_object,$/;"	f
__gs	ThirdParty/libunwind/src/Registers.hpp	/^    uint64_t __gs;$/;"	m	struct:libunwind::Registers_x86_64::GPRs
__gs	ThirdParty/libunwind/src/Registers.hpp	/^    unsigned int __gs;$/;"	m	struct:libunwind::Registers_x86::GPRs
__has_feature	ThirdParty/libunwind/src/config.h	/^  #define __has_feature(/;"	d
__hi	ThirdParty/libunwind/src/Registers.hpp	/^    uint32_t __hi;$/;"	m	struct:libunwind::Registers_mips_o32::mips_o32_thread_state_t
__hi	ThirdParty/libunwind/src/Registers.hpp	/^    uint64_t __hi;$/;"	m	struct:libunwind::Registers_mips_newabi::mips_newabi_thread_state_t
__init__	ThirdParty/libunwind/test/libunwind/test/config.py	/^    def __init__(self, lit_config, config):$/;"	m	class:Configuration
__lo	ThirdParty/libunwind/src/Registers.hpp	/^    uint32_t __lo;$/;"	m	struct:libunwind::Registers_mips_o32::mips_o32_thread_state_t
__lo	ThirdParty/libunwind/src/Registers.hpp	/^    uint64_t __lo;$/;"	m	struct:libunwind::Registers_mips_newabi::mips_newabi_thread_state_t
__lr	ThirdParty/libunwind/src/Registers.hpp	/^    uint32_t __lr;    \/\/ Link register r14$/;"	m	struct:libunwind::Registers_arm::GPRs
__lr	ThirdParty/libunwind/src/Registers.hpp	/^    uint64_t __lr;      \/\/ Link register$/;"	m	struct:libunwind::Registers_ppc64::ppc64_thread_state_t
__lr	ThirdParty/libunwind/src/Registers.hpp	/^    uint64_t __lr;    \/\/ Link register x30$/;"	m	struct:libunwind::Registers_arm64::GPRs
__lr	ThirdParty/libunwind/src/Registers.hpp	/^    unsigned int __lr;     \/* Link register *\/$/;"	m	struct:libunwind::Registers_ppc::ppc_thread_state_t
__mq	ThirdParty/libunwind/src/Registers.hpp	/^    unsigned int __mq;     \/* MQ register (601 only) *\/$/;"	m	struct:libunwind::Registers_ppc::ppc_thread_state_t
__padding	ThirdParty/libunwind/src/Registers.hpp	/^    uint64_t __padding; \/\/ 16-byte align$/;"	m	struct:libunwind::Registers_x86_64::GPRs
__pc	ThirdParty/libunwind/src/Registers.hpp	/^    uint32_t __pc;    \/\/ Program counter r15$/;"	m	struct:libunwind::Registers_arm::GPRs
__pc	ThirdParty/libunwind/src/Registers.hpp	/^    uint32_t __pc;$/;"	m	struct:libunwind::Registers_mips_o32::mips_o32_thread_state_t
__pc	ThirdParty/libunwind/src/Registers.hpp	/^    uint64_t __pc;    \/\/ Program counter$/;"	m	struct:libunwind::Registers_arm64::GPRs
__pc	ThirdParty/libunwind/src/Registers.hpp	/^    uint64_t __pc;$/;"	m	struct:libunwind::Registers_mips_newabi::mips_newabi_thread_state_t
__personality_routine	ThirdParty/libunwind/include/unwind.h	/^typedef _Unwind_Reason_Code (*__personality_routine)$/;"	t
__r	ThirdParty/libunwind/src/Registers.hpp	/^    uint32_t __r[13]; \/\/ r0-r12$/;"	m	struct:libunwind::Registers_arm::GPRs
__r	ThirdParty/libunwind/src/Registers.hpp	/^    uint32_t __r[32];$/;"	m	struct:libunwind::Registers_mips_o32::mips_o32_thread_state_t
__r	ThirdParty/libunwind/src/Registers.hpp	/^    uint64_t __r[32];$/;"	m	struct:libunwind::Registers_mips_newabi::mips_newabi_thread_state_t
__r	ThirdParty/libunwind/src/Registers.hpp	/^    unsigned int __r[32];$/;"	m	struct:libunwind::Registers_or1k::or1k_thread_state_t
__r0	ThirdParty/libunwind/src/Registers.hpp	/^    uint64_t __r0;$/;"	m	struct:libunwind::Registers_ppc64::ppc64_thread_state_t
__r0	ThirdParty/libunwind/src/Registers.hpp	/^    unsigned int __r0;$/;"	m	struct:libunwind::Registers_ppc::ppc_thread_state_t
__r1	ThirdParty/libunwind/src/Registers.hpp	/^    uint64_t __r1;$/;"	m	struct:libunwind::Registers_ppc64::ppc64_thread_state_t
__r1	ThirdParty/libunwind/src/Registers.hpp	/^    unsigned int __r1;$/;"	m	struct:libunwind::Registers_ppc::ppc_thread_state_t
__r10	ThirdParty/libunwind/src/Registers.hpp	/^    uint64_t __r10;$/;"	m	struct:libunwind::Registers_ppc64::ppc64_thread_state_t
__r10	ThirdParty/libunwind/src/Registers.hpp	/^    uint64_t __r10;$/;"	m	struct:libunwind::Registers_x86_64::GPRs
__r10	ThirdParty/libunwind/src/Registers.hpp	/^    unsigned int __r10;$/;"	m	struct:libunwind::Registers_ppc::ppc_thread_state_t
__r11	ThirdParty/libunwind/src/Registers.hpp	/^    uint64_t __r11;$/;"	m	struct:libunwind::Registers_ppc64::ppc64_thread_state_t
__r11	ThirdParty/libunwind/src/Registers.hpp	/^    uint64_t __r11;$/;"	m	struct:libunwind::Registers_x86_64::GPRs
__r11	ThirdParty/libunwind/src/Registers.hpp	/^    unsigned int __r11;$/;"	m	struct:libunwind::Registers_ppc::ppc_thread_state_t
__r12	ThirdParty/libunwind/src/Registers.hpp	/^    uint64_t __r12;$/;"	m	struct:libunwind::Registers_ppc64::ppc64_thread_state_t
__r12	ThirdParty/libunwind/src/Registers.hpp	/^    uint64_t __r12;$/;"	m	struct:libunwind::Registers_x86_64::GPRs
__r12	ThirdParty/libunwind/src/Registers.hpp	/^    unsigned int __r12;$/;"	m	struct:libunwind::Registers_ppc::ppc_thread_state_t
__r13	ThirdParty/libunwind/src/Registers.hpp	/^    uint64_t __r13;$/;"	m	struct:libunwind::Registers_ppc64::ppc64_thread_state_t
__r13	ThirdParty/libunwind/src/Registers.hpp	/^    uint64_t __r13;$/;"	m	struct:libunwind::Registers_x86_64::GPRs
__r13	ThirdParty/libunwind/src/Registers.hpp	/^    unsigned int __r13;$/;"	m	struct:libunwind::Registers_ppc::ppc_thread_state_t
__r14	ThirdParty/libunwind/src/Registers.hpp	/^    uint64_t __r14;$/;"	m	struct:libunwind::Registers_ppc64::ppc64_thread_state_t
__r14	ThirdParty/libunwind/src/Registers.hpp	/^    uint64_t __r14;$/;"	m	struct:libunwind::Registers_x86_64::GPRs
__r14	ThirdParty/libunwind/src/Registers.hpp	/^    unsigned int __r14;$/;"	m	struct:libunwind::Registers_ppc::ppc_thread_state_t
__r15	ThirdParty/libunwind/src/Registers.hpp	/^    uint64_t __r15;$/;"	m	struct:libunwind::Registers_ppc64::ppc64_thread_state_t
__r15	ThirdParty/libunwind/src/Registers.hpp	/^    uint64_t __r15;$/;"	m	struct:libunwind::Registers_x86_64::GPRs
__r15	ThirdParty/libunwind/src/Registers.hpp	/^    unsigned int __r15;$/;"	m	struct:libunwind::Registers_ppc::ppc_thread_state_t
__r16	ThirdParty/libunwind/src/Registers.hpp	/^    uint64_t __r16;$/;"	m	struct:libunwind::Registers_ppc64::ppc64_thread_state_t
__r16	ThirdParty/libunwind/src/Registers.hpp	/^    unsigned int __r16;$/;"	m	struct:libunwind::Registers_ppc::ppc_thread_state_t
__r17	ThirdParty/libunwind/src/Registers.hpp	/^    uint64_t __r17;$/;"	m	struct:libunwind::Registers_ppc64::ppc64_thread_state_t
__r17	ThirdParty/libunwind/src/Registers.hpp	/^    unsigned int __r17;$/;"	m	struct:libunwind::Registers_ppc::ppc_thread_state_t
__r18	ThirdParty/libunwind/src/Registers.hpp	/^    uint64_t __r18;$/;"	m	struct:libunwind::Registers_ppc64::ppc64_thread_state_t
__r18	ThirdParty/libunwind/src/Registers.hpp	/^    unsigned int __r18;$/;"	m	struct:libunwind::Registers_ppc::ppc_thread_state_t
__r19	ThirdParty/libunwind/src/Registers.hpp	/^    uint64_t __r19;$/;"	m	struct:libunwind::Registers_ppc64::ppc64_thread_state_t
__r19	ThirdParty/libunwind/src/Registers.hpp	/^    unsigned int __r19;$/;"	m	struct:libunwind::Registers_ppc::ppc_thread_state_t
__r2	ThirdParty/libunwind/src/Registers.hpp	/^    uint64_t __r2;$/;"	m	struct:libunwind::Registers_ppc64::ppc64_thread_state_t
__r2	ThirdParty/libunwind/src/Registers.hpp	/^    unsigned int __r2;$/;"	m	struct:libunwind::Registers_ppc::ppc_thread_state_t
__r20	ThirdParty/libunwind/src/Registers.hpp	/^    uint64_t __r20;$/;"	m	struct:libunwind::Registers_ppc64::ppc64_thread_state_t
__r20	ThirdParty/libunwind/src/Registers.hpp	/^    unsigned int __r20;$/;"	m	struct:libunwind::Registers_ppc::ppc_thread_state_t
__r21	ThirdParty/libunwind/src/Registers.hpp	/^    uint64_t __r21;$/;"	m	struct:libunwind::Registers_ppc64::ppc64_thread_state_t
__r21	ThirdParty/libunwind/src/Registers.hpp	/^    unsigned int __r21;$/;"	m	struct:libunwind::Registers_ppc::ppc_thread_state_t
__r22	ThirdParty/libunwind/src/Registers.hpp	/^    uint64_t __r22;$/;"	m	struct:libunwind::Registers_ppc64::ppc64_thread_state_t
__r22	ThirdParty/libunwind/src/Registers.hpp	/^    unsigned int __r22;$/;"	m	struct:libunwind::Registers_ppc::ppc_thread_state_t
__r23	ThirdParty/libunwind/src/Registers.hpp	/^    uint64_t __r23;$/;"	m	struct:libunwind::Registers_ppc64::ppc64_thread_state_t
__r23	ThirdParty/libunwind/src/Registers.hpp	/^    unsigned int __r23;$/;"	m	struct:libunwind::Registers_ppc::ppc_thread_state_t
__r24	ThirdParty/libunwind/src/Registers.hpp	/^    uint64_t __r24;$/;"	m	struct:libunwind::Registers_ppc64::ppc64_thread_state_t
__r24	ThirdParty/libunwind/src/Registers.hpp	/^    unsigned int __r24;$/;"	m	struct:libunwind::Registers_ppc::ppc_thread_state_t
__r25	ThirdParty/libunwind/src/Registers.hpp	/^    uint64_t __r25;$/;"	m	struct:libunwind::Registers_ppc64::ppc64_thread_state_t
__r25	ThirdParty/libunwind/src/Registers.hpp	/^    unsigned int __r25;$/;"	m	struct:libunwind::Registers_ppc::ppc_thread_state_t
__r26	ThirdParty/libunwind/src/Registers.hpp	/^    uint64_t __r26;$/;"	m	struct:libunwind::Registers_ppc64::ppc64_thread_state_t
__r26	ThirdParty/libunwind/src/Registers.hpp	/^    unsigned int __r26;$/;"	m	struct:libunwind::Registers_ppc::ppc_thread_state_t
__r27	ThirdParty/libunwind/src/Registers.hpp	/^    uint64_t __r27;$/;"	m	struct:libunwind::Registers_ppc64::ppc64_thread_state_t
__r27	ThirdParty/libunwind/src/Registers.hpp	/^    unsigned int __r27;$/;"	m	struct:libunwind::Registers_ppc::ppc_thread_state_t
__r28	ThirdParty/libunwind/src/Registers.hpp	/^    uint64_t __r28;$/;"	m	struct:libunwind::Registers_ppc64::ppc64_thread_state_t
__r28	ThirdParty/libunwind/src/Registers.hpp	/^    unsigned int __r28;$/;"	m	struct:libunwind::Registers_ppc::ppc_thread_state_t
__r29	ThirdParty/libunwind/src/Registers.hpp	/^    uint64_t __r29;$/;"	m	struct:libunwind::Registers_ppc64::ppc64_thread_state_t
__r29	ThirdParty/libunwind/src/Registers.hpp	/^    unsigned int __r29;$/;"	m	struct:libunwind::Registers_ppc::ppc_thread_state_t
__r3	ThirdParty/libunwind/src/Registers.hpp	/^    uint64_t __r3;$/;"	m	struct:libunwind::Registers_ppc64::ppc64_thread_state_t
__r3	ThirdParty/libunwind/src/Registers.hpp	/^    unsigned int __r3;$/;"	m	struct:libunwind::Registers_ppc::ppc_thread_state_t
__r30	ThirdParty/libunwind/src/Registers.hpp	/^    uint64_t __r30;$/;"	m	struct:libunwind::Registers_ppc64::ppc64_thread_state_t
__r30	ThirdParty/libunwind/src/Registers.hpp	/^    unsigned int __r30;$/;"	m	struct:libunwind::Registers_ppc::ppc_thread_state_t
__r31	ThirdParty/libunwind/src/Registers.hpp	/^    uint64_t __r31;$/;"	m	struct:libunwind::Registers_ppc64::ppc64_thread_state_t
__r31	ThirdParty/libunwind/src/Registers.hpp	/^    unsigned int __r31;$/;"	m	struct:libunwind::Registers_ppc::ppc_thread_state_t
__r4	ThirdParty/libunwind/src/Registers.hpp	/^    uint64_t __r4;$/;"	m	struct:libunwind::Registers_ppc64::ppc64_thread_state_t
__r4	ThirdParty/libunwind/src/Registers.hpp	/^    unsigned int __r4;$/;"	m	struct:libunwind::Registers_ppc::ppc_thread_state_t
__r5	ThirdParty/libunwind/src/Registers.hpp	/^    uint64_t __r5;$/;"	m	struct:libunwind::Registers_ppc64::ppc64_thread_state_t
__r5	ThirdParty/libunwind/src/Registers.hpp	/^    unsigned int __r5;$/;"	m	struct:libunwind::Registers_ppc::ppc_thread_state_t
__r6	ThirdParty/libunwind/src/Registers.hpp	/^    uint64_t __r6;$/;"	m	struct:libunwind::Registers_ppc64::ppc64_thread_state_t
__r6	ThirdParty/libunwind/src/Registers.hpp	/^    unsigned int __r6;$/;"	m	struct:libunwind::Registers_ppc::ppc_thread_state_t
__r7	ThirdParty/libunwind/src/Registers.hpp	/^    uint64_t __r7;$/;"	m	struct:libunwind::Registers_ppc64::ppc64_thread_state_t
__r7	ThirdParty/libunwind/src/Registers.hpp	/^    unsigned int __r7;$/;"	m	struct:libunwind::Registers_ppc::ppc_thread_state_t
__r8	ThirdParty/libunwind/src/Registers.hpp	/^    uint64_t __r8;$/;"	m	struct:libunwind::Registers_ppc64::ppc64_thread_state_t
__r8	ThirdParty/libunwind/src/Registers.hpp	/^    uint64_t __r8;$/;"	m	struct:libunwind::Registers_x86_64::GPRs
__r8	ThirdParty/libunwind/src/Registers.hpp	/^    unsigned int __r8;$/;"	m	struct:libunwind::Registers_ppc::ppc_thread_state_t
__r9	ThirdParty/libunwind/src/Registers.hpp	/^    uint64_t __r9;$/;"	m	struct:libunwind::Registers_ppc64::ppc64_thread_state_t
__r9	ThirdParty/libunwind/src/Registers.hpp	/^    uint64_t __r9;$/;"	m	struct:libunwind::Registers_x86_64::GPRs
__r9	ThirdParty/libunwind/src/Registers.hpp	/^    unsigned int __r9;$/;"	m	struct:libunwind::Registers_ppc::ppc_thread_state_t
__rax	ThirdParty/libunwind/src/Registers.hpp	/^    uint64_t __rax;$/;"	m	struct:libunwind::Registers_x86_64::GPRs
__rbp	ThirdParty/libunwind/src/Registers.hpp	/^    uint64_t __rbp;$/;"	m	struct:libunwind::Registers_x86_64::GPRs
__rbx	ThirdParty/libunwind/src/Registers.hpp	/^    uint64_t __rbx;$/;"	m	struct:libunwind::Registers_x86_64::GPRs
__rcx	ThirdParty/libunwind/src/Registers.hpp	/^    uint64_t __rcx;$/;"	m	struct:libunwind::Registers_x86_64::GPRs
__rdi	ThirdParty/libunwind/src/Registers.hpp	/^    uint64_t __rdi;$/;"	m	struct:libunwind::Registers_x86_64::GPRs
__rdx	ThirdParty/libunwind/src/Registers.hpp	/^    uint64_t __rdx;$/;"	m	struct:libunwind::Registers_x86_64::GPRs
__register_frame	Lib/Platform/POSIX/POSIXPrivate.h	/^inline void __register_frame(const void* fde)$/;"	f
__register_frame	ThirdParty/libunwind/src/UnwindLevel1-gcc-ext.c	/^_LIBUNWIND_EXPORT void __register_frame(const void *fde) {$/;"	f
__register_frame_info	ThirdParty/libunwind/src/UnwindLevel1-gcc-ext.c	/^_LIBUNWIND_EXPORT void __register_frame_info(const void *fde, void *ob) {$/;"	f
__register_frame_info_bases	ThirdParty/libunwind/src/UnwindLevel1-gcc-ext.c	/^_LIBUNWIND_EXPORT void __register_frame_info_bases(const void *fde, void *ob,$/;"	f
__register_frame_info_table	ThirdParty/libunwind/src/UnwindLevel1-gcc-ext.c	/^_LIBUNWIND_EXPORT void __register_frame_info_table(const void *fde, void *ob) {$/;"	f
__register_frame_info_table_bases	ThirdParty/libunwind/src/UnwindLevel1-gcc-ext.c	/^_LIBUNWIND_EXPORT void __register_frame_info_table_bases(const void *fde,$/;"	f
__register_frame_table	ThirdParty/libunwind/src/UnwindLevel1-gcc-ext.c	/^_LIBUNWIND_EXPORT void __register_frame_table(const void *fde) {$/;"	f
__rflags	ThirdParty/libunwind/src/Registers.hpp	/^    uint64_t __rflags;$/;"	m	struct:libunwind::Registers_x86_64::GPRs
__rip	ThirdParty/libunwind/src/Registers.hpp	/^    uint64_t __rip;$/;"	m	struct:libunwind::Registers_x86_64::GPRs
__rsi	ThirdParty/libunwind/src/Registers.hpp	/^    uint64_t __rsi;$/;"	m	struct:libunwind::Registers_x86_64::GPRs
__rsp	ThirdParty/libunwind/src/Registers.hpp	/^    uint64_t __rsp;$/;"	m	struct:libunwind::Registers_x86_64::GPRs
__sp	ThirdParty/libunwind/src/Registers.hpp	/^    uint32_t __sp;    \/\/ Stack pointer r13$/;"	m	struct:libunwind::Registers_arm::GPRs
__sp	ThirdParty/libunwind/src/Registers.hpp	/^    uint64_t __sp;    \/\/ Stack pointer x31$/;"	m	struct:libunwind::Registers_arm64::GPRs
__srr0	ThirdParty/libunwind/src/Registers.hpp	/^    uint64_t __srr0;    \/\/ Instruction address register (PC)$/;"	m	struct:libunwind::Registers_ppc64::ppc64_thread_state_t
__srr0	ThirdParty/libunwind/src/Registers.hpp	/^    unsigned int __srr0; \/* Instruction address register (PC) *\/$/;"	m	struct:libunwind::Registers_ppc::ppc_thread_state_t
__srr1	ThirdParty/libunwind/src/Registers.hpp	/^    uint64_t __srr1;    \/\/ Machine state register (supervisor)$/;"	m	struct:libunwind::Registers_ppc64::ppc64_thread_state_t
__srr1	ThirdParty/libunwind/src/Registers.hpp	/^    unsigned int __srr1; \/* Machine state register (supervisor) *\/$/;"	m	struct:libunwind::Registers_ppc::ppc_thread_state_t
__ss	ThirdParty/libunwind/src/Registers.hpp	/^    unsigned int __ss;$/;"	m	struct:libunwind::Registers_x86::GPRs
__vrsave	ThirdParty/libunwind/src/Registers.hpp	/^    uint64_t __vrsave;  \/\/ Vector Save Register$/;"	m	struct:libunwind::Registers_ppc64::ppc64_thread_state_t
__vrsave	ThirdParty/libunwind/src/Registers.hpp	/^    unsigned int __vrsave; \/* Vector Save Register *\/$/;"	m	struct:libunwind::Registers_ppc::ppc_thread_state_t
__wasi_advice_t	Lib/WASI/WASIDefinitions.h	/^typedef uint8_t __wasi_advice_t;$/;"	t
__wasi_ciovec_t	Lib/WASI/WASIDefinitions.h	/^typedef struct __wasi_ciovec_t$/;"	s
__wasi_ciovec_t	Lib/WASI/WASIDefinitions.h	/^} __wasi_ciovec_t;$/;"	t	typeref:struct:__wasi_ciovec_t
__wasi_clockid_t	Lib/WASI/WASIDefinitions.h	/^typedef uint32_t __wasi_clockid_t;$/;"	t
__wasi_device_t	Lib/WASI/WASIDefinitions.h	/^typedef uint64_t __wasi_device_t;$/;"	t
__wasi_dircookie_t	Lib/WASI/WASIDefinitions.h	/^typedef uint64_t __wasi_dircookie_t;$/;"	t
__wasi_dirent_t	Lib/WASI/WASIDefinitions.h	/^typedef struct __wasi_dirent_t$/;"	s
__wasi_dirent_t	Lib/WASI/WASIDefinitions.h	/^} __wasi_dirent_t;$/;"	t	typeref:struct:__wasi_dirent_t
__wasi_errno_t	Lib/WASI/WASIDefinitions.h	/^typedef uint16_t __wasi_errno_t;$/;"	t
__wasi_event_t	Lib/WASI/WASIDefinitions.h	/^typedef struct __wasi_event_t$/;"	s
__wasi_event_t	Lib/WASI/WASIDefinitions.h	/^} __wasi_event_t;$/;"	t	typeref:struct:__wasi_event_t
__wasi_event_u	Lib/WASI/WASIDefinitions.h	/^	union __wasi_event_u$/;"	u	struct:__wasi_event_t
__wasi_event_u_fd_readwrite_t	Lib/WASI/WASIDefinitions.h	/^		struct __wasi_event_u_fd_readwrite_t$/;"	s	union:__wasi_event_t::__wasi_event_u
__wasi_eventrwflags_t	Lib/WASI/WASIDefinitions.h	/^typedef uint16_t __wasi_eventrwflags_t;$/;"	t
__wasi_eventtype_t	Lib/WASI/WASIDefinitions.h	/^typedef uint8_t __wasi_eventtype_t;$/;"	t
__wasi_exitcode_t	Lib/WASI/WASIDefinitions.h	/^typedef uint32_t __wasi_exitcode_t;$/;"	t
__wasi_fd_t	Lib/WASI/WASIDefinitions.h	/^typedef uint32_t __wasi_fd_t;$/;"	t
__wasi_fdflags_t	Lib/WASI/WASIDefinitions.h	/^typedef uint16_t __wasi_fdflags_t;$/;"	t
__wasi_fdstat_t	Lib/WASI/WASIDefinitions.h	/^typedef struct __wasi_fdstat_t$/;"	s
__wasi_fdstat_t	Lib/WASI/WASIDefinitions.h	/^} __wasi_fdstat_t;$/;"	t	typeref:struct:__wasi_fdstat_t
__wasi_filedelta_t	Lib/WASI/WASIDefinitions.h	/^typedef int64_t __wasi_filedelta_t;$/;"	t
__wasi_filesize_t	Lib/WASI/WASIDefinitions.h	/^typedef uint64_t __wasi_filesize_t;$/;"	t
__wasi_filestat_t	Lib/WASI/WASIDefinitions.h	/^typedef struct __wasi_filestat_t$/;"	s
__wasi_filestat_t	Lib/WASI/WASIDefinitions.h	/^} __wasi_filestat_t;$/;"	t	typeref:struct:__wasi_filestat_t
__wasi_filetype_t	Lib/WASI/WASIDefinitions.h	/^typedef uint8_t __wasi_filetype_t;$/;"	t
__wasi_fstflags_t	Lib/WASI/WASIDefinitions.h	/^typedef uint16_t __wasi_fstflags_t;$/;"	t
__wasi_inode_t	Lib/WASI/WASIDefinitions.h	/^typedef uint64_t __wasi_inode_t;$/;"	t
__wasi_intptr_t	Lib/WASI/WASIDefinitions.h	/^typedef int32_t __wasi_intptr_t;$/;"	t
__wasi_iovec_t	Lib/WASI/WASIDefinitions.h	/^typedef struct __wasi_iovec_t$/;"	s
__wasi_iovec_t	Lib/WASI/WASIDefinitions.h	/^} __wasi_iovec_t;$/;"	t	typeref:struct:__wasi_iovec_t
__wasi_linkcount_t	Lib/WASI/WASIDefinitions.h	/^typedef uint32_t __wasi_linkcount_t;$/;"	t
__wasi_lookupflags_t	Lib/WASI/WASIDefinitions.h	/^typedef uint32_t __wasi_lookupflags_t;$/;"	t
__wasi_oflags_t	Lib/WASI/WASIDefinitions.h	/^typedef uint16_t __wasi_oflags_t;$/;"	t
__wasi_preopentype_t	Lib/WASI/WASIDefinitions.h	/^typedef uint8_t __wasi_preopentype_t;$/;"	t
__wasi_prestat_t	Lib/WASI/WASIDefinitions.h	/^typedef struct __wasi_prestat_t$/;"	s
__wasi_prestat_t	Lib/WASI/WASIDefinitions.h	/^} __wasi_prestat_t;$/;"	t	typeref:struct:__wasi_prestat_t
__wasi_prestat_u	Lib/WASI/WASIDefinitions.h	/^	union __wasi_prestat_u$/;"	u	struct:__wasi_prestat_t
__wasi_prestat_u_dir_t	Lib/WASI/WASIDefinitions.h	/^		struct __wasi_prestat_u_dir_t$/;"	s	union:__wasi_prestat_t::__wasi_prestat_u
__wasi_riflags_t	Lib/WASI/WASIDefinitions.h	/^typedef uint16_t __wasi_riflags_t;$/;"	t
__wasi_rights_t	Lib/WASI/WASIDefinitions.h	/^typedef uint64_t __wasi_rights_t;$/;"	t
__wasi_roflags_t	Lib/WASI/WASIDefinitions.h	/^typedef uint16_t __wasi_roflags_t;$/;"	t
__wasi_sdflags_t	Lib/WASI/WASIDefinitions.h	/^typedef uint8_t __wasi_sdflags_t;$/;"	t
__wasi_siflags_t	Lib/WASI/WASIDefinitions.h	/^typedef uint16_t __wasi_siflags_t;$/;"	t
__wasi_signal_t	Lib/WASI/WASIDefinitions.h	/^typedef uint8_t __wasi_signal_t;$/;"	t
__wasi_size_t	Lib/WASI/WASIDefinitions.h	/^typedef uint32_t __wasi_size_t;$/;"	t
__wasi_subclockflags_t	Lib/WASI/WASIDefinitions.h	/^typedef uint16_t __wasi_subclockflags_t;$/;"	t
__wasi_subscription_t	Lib/WASI/WASIDefinitions.h	/^typedef struct __wasi_subscription_t$/;"	s
__wasi_subscription_t	Lib/WASI/WASIDefinitions.h	/^} __wasi_subscription_t;$/;"	t	typeref:struct:__wasi_subscription_t
__wasi_subscription_u	Lib/WASI/WASIDefinitions.h	/^	union __wasi_subscription_u$/;"	u	struct:__wasi_subscription_t
__wasi_subscription_u_clock_t	Lib/WASI/WASIDefinitions.h	/^		struct __wasi_subscription_u_clock_t$/;"	s	union:__wasi_subscription_t::__wasi_subscription_u
__wasi_subscription_u_fd_readwrite_t	Lib/WASI/WASIDefinitions.h	/^		struct __wasi_subscription_u_fd_readwrite_t$/;"	s	union:__wasi_subscription_t::__wasi_subscription_u
__wasi_timestamp_t	Lib/WASI/WASIDefinitions.h	/^typedef uint64_t __wasi_timestamp_t;$/;"	t
__wasi_uintptr_t	Lib/WASI/WASIDefinitions.h	/^typedef uint32_t __wasi_uintptr_t;$/;"	t
__wasi_userdata_t	Lib/WASI/WASIDefinitions.h	/^typedef uint64_t __wasi_userdata_t;$/;"	t
__wasi_void_ptr_t	Lib/WASI/WASIDefinitions.h	/^typedef uint32_t __wasi_void_ptr_t;$/;"	t
__wasi_whence_t	Lib/WASI/WASIDefinitions.h	/^typedef uint8_t __wasi_whence_t;$/;"	t
__x	ThirdParty/libunwind/src/Registers.hpp	/^    uint64_t __x[29]; \/\/ x0-x28$/;"	m	struct:libunwind::Registers_arm64::GPRs
__xer	ThirdParty/libunwind/src/Registers.hpp	/^    uint64_t __xer;     \/\/ User's integer exception register$/;"	m	struct:libunwind::Registers_ppc64::ppc64_thread_state_t
__xer	ThirdParty/libunwind/src/Registers.hpp	/^    unsigned int __xer;    \/* User's integer exception register *\/$/;"	m	struct:libunwind::Registers_ppc::ppc_thread_state_t
_addr	ThirdParty/libunwind/src/UnwindCursor.hpp	/^  typename A::pint_t     _addr;$/;"	m	class:libunwind::UnwindSectionHeader
_addr	ThirdParty/libunwind/src/UnwindCursor.hpp	/^  typename A::pint_t   _addr;$/;"	m	class:libunwind::UnwindSectionIndexArray
_addr	ThirdParty/libunwind/src/UnwindCursor.hpp	/^  typename A::pint_t   _addr;$/;"	m	class:libunwind::UnwindSectionLsdaArray
_addr	ThirdParty/libunwind/src/UnwindCursor.hpp	/^  typename A::pint_t _addr;$/;"	m	class:libunwind::UnwindSectionCompressedArray
_addr	ThirdParty/libunwind/src/UnwindCursor.hpp	/^  typename A::pint_t _addr;$/;"	m	class:libunwind::UnwindSectionCompressedPageHeader
_addr	ThirdParty/libunwind/src/UnwindCursor.hpp	/^  typename A::pint_t _addr;$/;"	m	class:libunwind::UnwindSectionRegularArray
_addr	ThirdParty/libunwind/src/UnwindCursor.hpp	/^  typename A::pint_t _addr;$/;"	m	class:libunwind::UnwindSectionRegularPageHeader
_addressSpace	ThirdParty/libunwind/src/UnwindCursor.hpp	/^  A                     &_addressSpace;$/;"	m	class:libunwind::UnwindSectionHeader
_addressSpace	ThirdParty/libunwind/src/UnwindCursor.hpp	/^  A                   &_addressSpace;$/;"	m	class:libunwind::UnwindSectionIndexArray
_addressSpace	ThirdParty/libunwind/src/UnwindCursor.hpp	/^  A                   &_addressSpace;$/;"	m	class:libunwind::UnwindSectionLsdaArray
_addressSpace	ThirdParty/libunwind/src/UnwindCursor.hpp	/^  A               &_addressSpace;$/;"	m	class:libunwind::UnwindCursor
_addressSpace	ThirdParty/libunwind/src/UnwindCursor.hpp	/^  A &_addressSpace;$/;"	m	class:libunwind::UnwindSectionCompressedArray
_addressSpace	ThirdParty/libunwind/src/UnwindCursor.hpp	/^  A &_addressSpace;$/;"	m	class:libunwind::UnwindSectionCompressedPageHeader
_addressSpace	ThirdParty/libunwind/src/UnwindCursor.hpp	/^  A &_addressSpace;$/;"	m	class:libunwind::UnwindSectionRegularArray
_addressSpace	ThirdParty/libunwind/src/UnwindCursor.hpp	/^  A &_addressSpace;$/;"	m	class:libunwind::UnwindSectionRegularPageHeader
_addressSpace	ThirdParty/libunwind/src/UnwindCursor.hpp	/^  A* _addressSpace;$/;"	m	struct:libunwind::EHABISectionIterator
_buffer	ThirdParty/libunwind/src/UnwindCursor.hpp	/^  static entry *_buffer;$/;"	m	class:libunwind::DwarfFDECache
_buffer	ThirdParty/libunwind/src/UnwindCursor.hpp	/^DwarfFDECache<A>::_buffer = _initialBuffer;$/;"	m	class:libunwind::DwarfFDECache
_bufferEnd	ThirdParty/libunwind/src/UnwindCursor.hpp	/^  static entry *_bufferEnd;$/;"	m	class:libunwind::DwarfFDECache
_bufferEnd	ThirdParty/libunwind/src/UnwindCursor.hpp	/^DwarfFDECache<A>::_bufferEnd = &_initialBuffer[64];$/;"	m	class:libunwind::DwarfFDECache
_bufferUsed	ThirdParty/libunwind/src/UnwindCursor.hpp	/^  static entry *_bufferUsed;$/;"	m	class:libunwind::DwarfFDECache
_bufferUsed	ThirdParty/libunwind/src/UnwindCursor.hpp	/^DwarfFDECache<A>::_bufferUsed = _initialBuffer;$/;"	m	class:libunwind::DwarfFDECache
_ccm	ThirdParty/bridge/rpc_inproc.h	/^    callback_call_method _ccm;$/;"	m	class:xchain::XChainServiceClient
_cfr	ThirdParty/bridge/rpc_inproc.h	/^    callback_fetch_response _cfr;$/;"	m	class:xchain::XChainServiceClient
_ctxid	ThirdParty/bridge/rpc_inproc.h	/^    int64_t _ctxid;$/;"	m	class:xchain::XChainServiceClient
_dyld_find_unwind_sections	ThirdParty/libunwind/src/AddressSpace.hpp	/^    static inline bool _dyld_find_unwind_sections(void* addr,$/;"	f
_floatRegisters	ThirdParty/libunwind/src/Registers.hpp	/^  ppc_float_state_t  _floatRegisters;$/;"	m	class:libunwind::Registers_ppc
_getStackPointer	Lib/Platform/Windows/Win32.asm	/^_getStackPointer PROC$/;"	l
_i	ThirdParty/libunwind/src/UnwindCursor.hpp	/^  size_t _i;$/;"	m	struct:libunwind::EHABISectionIterator
_info	ThirdParty/libunwind/src/UnwindCursor.hpp	/^  unw_proc_info_t  _info;$/;"	m	class:libunwind::UnwindCursor
_initialBuffer	ThirdParty/libunwind/src/UnwindCursor.hpp	/^  static entry _initialBuffer[64];$/;"	m	class:libunwind::DwarfFDECache
_initialBuffer	ThirdParty/libunwind/src/UnwindCursor.hpp	/^typename DwarfFDECache<A>::entry DwarfFDECache<A>::_initialBuffer[64];$/;"	m	class:libunwind::DwarfFDECache
_isSignalFrame	ThirdParty/libunwind/src/UnwindCursor.hpp	/^  bool             _isSignalFrame;$/;"	m	class:libunwind::UnwindCursor
_iwmmx	ThirdParty/libunwind/src/Registers.hpp	/^  unw_fpreg_t _iwmmx[16];$/;"	m	class:libunwind::Registers_arm
_iwmmx_control	ThirdParty/libunwind/src/Registers.hpp	/^  mutable uint32_t _iwmmx_control[4];$/;"	m	class:libunwind::Registers_arm
_loadBinaryModule	Lib/Emscripten/Interface.cpp	/^bool _loadBinaryModule(const char* codeBytes, int codeSize, IR::Module& outModule) {$/;"	f
_lock	ThirdParty/libunwind/src/UnwindCursor.hpp	/^  static RWMutex _lock;$/;"	m	class:libunwind::DwarfFDECache
_lock	ThirdParty/libunwind/src/UnwindCursor.hpp	/^RWMutex DwarfFDECache<A>::_lock;$/;"	m	class:libunwind::DwarfFDECache
_module	Include/WAVM/WASTParse/TestScript.h	/^		_module,$/;"	m	class:WAVM::WAST::ActionType
_register	Include/WAVM/WASTParse/TestScript.h	/^			_register,$/;"	e	enum:WAVM::WAST::Command::Type
_registeredForDyldUnloads	ThirdParty/libunwind/src/UnwindCursor.hpp	/^  static bool _registeredForDyldUnloads;$/;"	m	class:libunwind::DwarfFDECache
_registeredForDyldUnloads	ThirdParty/libunwind/src/UnwindCursor.hpp	/^bool DwarfFDECache<A>::_registeredForDyldUnloads = false;$/;"	m	class:libunwind::DwarfFDECache
_registers	ThirdParty/libunwind/src/Registers.hpp	/^  GPRs    _registers;$/;"	m	class:libunwind::Registers_arm64
_registers	ThirdParty/libunwind/src/Registers.hpp	/^  GPRs _registers;$/;"	m	class:libunwind::Registers_arm
_registers	ThirdParty/libunwind/src/Registers.hpp	/^  GPRs _registers;$/;"	m	class:libunwind::Registers_x86
_registers	ThirdParty/libunwind/src/Registers.hpp	/^  GPRs _registers;$/;"	m	class:libunwind::Registers_x86_64
_registers	ThirdParty/libunwind/src/Registers.hpp	/^  mips_newabi_thread_state_t _registers;$/;"	m	class:libunwind::Registers_mips_newabi
_registers	ThirdParty/libunwind/src/Registers.hpp	/^  mips_o32_thread_state_t _registers;$/;"	m	class:libunwind::Registers_mips_o32
_registers	ThirdParty/libunwind/src/Registers.hpp	/^  or1k_thread_state_t _registers;$/;"	m	class:libunwind::Registers_or1k
_registers	ThirdParty/libunwind/src/Registers.hpp	/^  ppc64_thread_state_t _registers;$/;"	m	class:libunwind::Registers_ppc64
_registers	ThirdParty/libunwind/src/Registers.hpp	/^  ppc_thread_state_t _registers;$/;"	m	class:libunwind::Registers_ppc
_registers	ThirdParty/libunwind/src/UnwindCursor.hpp	/^  R                _registers;$/;"	m	class:libunwind::UnwindCursor
_saved_iwmmx	ThirdParty/libunwind/src/Registers.hpp	/^  bool _saved_iwmmx;$/;"	m	class:libunwind::Registers_arm
_saved_iwmmx_control	ThirdParty/libunwind/src/Registers.hpp	/^  mutable bool _saved_iwmmx_control;$/;"	m	class:libunwind::Registers_arm
_saved_vfp_d0_d15	ThirdParty/libunwind/src/Registers.hpp	/^  bool _saved_vfp_d0_d15;$/;"	m	class:libunwind::Registers_arm
_saved_vfp_d16_d31	ThirdParty/libunwind/src/Registers.hpp	/^  bool _saved_vfp_d16_d31;$/;"	m	class:libunwind::Registers_arm
_sects	ThirdParty/libunwind/src/UnwindCursor.hpp	/^  const UnwindInfoSections* _sects;$/;"	m	struct:libunwind::EHABISectionIterator
_stderr	Lib/Emscripten/Emscripten.cpp	/^	I32 _stderr;$/;"	m	struct:MutableGlobals	file:
_stdin	Lib/Emscripten/Emscripten.cpp	/^	I32 _stdin;$/;"	m	struct:MutableGlobals	file:
_stdout	Lib/Emscripten/Emscripten.cpp	/^	I32 _stdout;$/;"	m	struct:MutableGlobals	file:
_unw_add_dynamic_fde	ThirdParty/libunwind/src/libunwind.cpp	/^void _unw_add_dynamic_fde(unw_word_t fde) {$/;"	f
_unw_remove_dynamic_fde	ThirdParty/libunwind/src/libunwind.cpp	/^void _unw_remove_dynamic_fde(unw_word_t fde) {$/;"	f
_unwindInfoMissing	ThirdParty/libunwind/src/UnwindCursor.hpp	/^  bool             _unwindInfoMissing;$/;"	m	class:libunwind::UnwindCursor
_use_X_for_vfp_save	ThirdParty/libunwind/src/Registers.hpp	/^  bool _use_X_for_vfp_save;$/;"	m	class:libunwind::Registers_arm
_vectorHalfRegisters	ThirdParty/libunwind/src/Registers.hpp	/^  double  _vectorHalfRegisters[32];$/;"	m	class:libunwind::Registers_arm64
_vectorRegisters	ThirdParty/libunwind/src/Registers.hpp	/^  v128               _vectorRegisters[32]; \/\/ offset 424$/;"	m	class:libunwind::Registers_ppc
_vectorScalarRegisters	ThirdParty/libunwind/src/Registers.hpp	/^  ppc64_vsr_t          _vectorScalarRegisters[64];$/;"	m	class:libunwind::Registers_ppc64
_vfp_d0_d15_pad	ThirdParty/libunwind/src/Registers.hpp	/^  unw_fpreg_t _vfp_d0_d15_pad[17];$/;"	m	class:libunwind::Registers_arm
_vfp_d16_d31	ThirdParty/libunwind/src/Registers.hpp	/^  unw_fpreg_t _vfp_d16_d31[16];$/;"	m	class:libunwind::Registers_arm
_xmm	ThirdParty/libunwind/src/Registers.hpp	/^  v128 _xmm[16];$/;"	m	class:libunwind::Registers_x86_64
a	Test/Containers/HashMapTest.cpp	/^	std::string a;$/;"	m	struct:EmplacedValue	file:
aFunction	Test/fuzz/ModuleMatcher.h	/^		const FunctionDef* aFunction = nullptr;$/;"	m	struct:WAVM::ModuleMatcher
aModule	Test/fuzz/ModuleMatcher.h	/^		const Module& aModule;$/;"	m	struct:WAVM::ModuleMatcher
accessViolation	Include/WAVM/Platform/Signal.h	/^			accessViolation,$/;"	m	class:WAVM::Platform::Signal::Type
accessViolation	Include/WAVM/Platform/Signal.h	/^			} accessViolation;$/;"	m	union:WAVM::Platform::Signal::__anon14	typeref:struct:WAVM::Platform::Signal::__anon14::__anon15
action	Include/WAVM/WASTParse/TestScript.h	/^			action,$/;"	e	enum:WAVM::WAST::Command::Type
action	Include/WAVM/WASTParse/TestScript.h	/^		std::unique_ptr<Action> action;$/;"	m	struct:WAVM::WAST::ActionCommand
action	Include/WAVM/WASTParse/TestScript.h	/^		std::unique_ptr<Action> action;$/;"	m	struct:WAVM::WAST::AssertReturnCommand
action	Include/WAVM/WASTParse/TestScript.h	/^		std::unique_ptr<Action> action;$/;"	m	struct:WAVM::WAST::AssertReturnFuncCommand
action	Include/WAVM/WASTParse/TestScript.h	/^		std::unique_ptr<Action> action;$/;"	m	struct:WAVM::WAST::AssertReturnNaNCommand
action	Include/WAVM/WASTParse/TestScript.h	/^		std::unique_ptr<Action> action;$/;"	m	struct:WAVM::WAST::AssertThrowsCommand
action	Include/WAVM/WASTParse/TestScript.h	/^		std::unique_ptr<Action> action;$/;"	m	struct:WAVM::WAST::AssertTrapCommand
add	Examples/gas.cpp	/^uint64_t add(uint64_t a) {$/;"	f
add	Include/WAVM/Inline/ConcurrentHashMap.h	/^		template<typename... ValueArgs> bool add(const Key& key, ValueArgs&&... valueArgs)$/;"	f	struct:WAVM::ConcurrentHashMap
add	Include/WAVM/Inline/DenseStaticIntSet.h	/^		inline void add(Index index)$/;"	f	struct:WAVM::DenseStaticIntSet
add	Include/WAVM/Inline/HashMapImpl.h	/^bool HashMap<HASHMAP_ARGUMENTS>::add(const Key& key, ValueArgs&&... valueArgs)$/;"	f	class:HashMap
add	Include/WAVM/Inline/HashSetImpl.h	/^bool HashSet<Element, ElementHashPolicy>::add(const Element& element)$/;"	f	class:HashSet
add	Include/WAVM/Inline/IndexMap.h	/^		template<typename... Args> Index add(Index failIndex, Args&&... args)$/;"	f	struct:WAVM::IndexMap
add	ThirdParty/libunwind/src/UnwindCursor.hpp	/^void DwarfFDECache<A>::add(pint_t mh, pint_t ip_start, pint_t ip_end,$/;"	f	class:libunwind::DwarfFDECache
addEdge	Lib/NFA/NFA.cpp	/^void NFA::addEdge(Builder* builder,$/;"	f	class:NFA
addEpsilonEdge	Lib/NFA/NFA.cpp	/^void NFA::addEpsilonEdge(Builder* builder, StateIndex initialState, StateIndex nextState)$/;"	f	class:NFA
addGCRoot	Lib/Runtime/ObjectGC.cpp	/^void Runtime::addGCRoot(Object* object)$/;"	f	class:Runtime
addGasFuncIndex	Include/WAVM/Emscripten/gas-visit-context.h	/^    Uptr addGasFuncIndex; \/\/gas stat function index$/;"	m	struct:GasVisitor
addLiteralStringToNFA	Lib/WASTParse/Lexer.cpp	/^static void addLiteralStringToNFA(const char* string,$/;"	f	file:
addLiteralTokenToNFA	Lib/WASTParse/Lexer.cpp	/^static void addLiteralTokenToNFA(const char* literalString,$/;"	f	file:
addOrFail	Include/WAVM/Inline/ConcurrentHashMap.h	/^		template<typename... ValueArgs> void addOrFail(const Key& key, ValueArgs&&... valueArgs)$/;"	f	struct:WAVM::ConcurrentHashMap
addOrFail	Include/WAVM/Inline/HashMapImpl.h	/^void HashMap<HASHMAP_ARGUMENTS>::addOrFail(const Key& key, ValueArgs&&... valueArgs)$/;"	f	class:HashMap
addOrFail	Include/WAVM/Inline/HashSetImpl.h	/^void HashSet<Element, ElementHashPolicy>::addOrFail(const Element& element)$/;"	f	class:HashSet
addRange	Include/WAVM/Inline/DenseStaticIntSet.h	/^		inline void addRange(Index rangeMin, Index rangeMax)$/;"	f	struct:WAVM::DenseStaticIntSet
addRef	Lib/ThreadTest/ThreadTest.cpp	/^	void addRef(Uptr delta = 1) { numRefs += delta; }$/;"	f	struct:Thread
addState	Lib/NFA/NFA.cpp	/^StateIndex NFA::addState(Builder* builder)$/;"	f	class:NFA
addToNFA	Lib/RegExp/RegExp.cpp	/^void RegExp::addToNFA(const char* regexpString,$/;"	f	class:RegExp
addUnique	Lib/NFA/NFA.cpp	/^template<typename Element> void addUnique(std::vector<Element>& vector, const Element& element)$/;"	f
additional	ThirdParty/libunwind/include/unwind.h	/^    uint32_t additional;$/;"	m	struct:_Unwind_Control_Block::__anon59
address	Include/WAVM/Platform/Signal.h	/^				Uptr address;$/;"	m	struct:WAVM::Platform::Signal::__anon14::__anon15
address	Lib/Emscripten/Emscripten.cpp	/^		address = 63 * IR::numBytesPerPage$/;"	e	enum:MutableGlobals::__anon47	file:
addressToFunctionMap	Lib/LLVMJIT/LLVMJITPrivate.h	/^		std::map<Uptr, Runtime::Function*> addressToFunctionMap;$/;"	m	struct:WAVM::LLVMJIT::Module
addressToModuleMap	Lib/LLVMJIT/LLVMModule.cpp	/^static std::map<Uptr, LLVMJIT::Module*> addressToModuleMap;$/;"	v	file:
addressToModuleMapMutex	Lib/LLVMJIT/LLVMModule.cpp	/^static Platform::Mutex addressToModuleMapMutex;$/;"	v	file:
addressToWaitListMap	Lib/Runtime/Atomics.cpp	/^static HashMap<Uptr, WaitList*> addressToWaitListMap;$/;"	v	file:
addressToWaitListMapMutex	Lib/Runtime/Atomics.cpp	/^static Platform::Mutex addressToWaitListMapMutex;$/;"	v	file:
advance	Include/WAVM/Inline/Serialization.h	/^		inline U8* advance(Uptr numBytes)$/;"	f	struct:WAVM::Serialization::OutputStream
advance	Include/WAVM/Inline/Serialization.h	/^		inline const U8* advance(Uptr numBytes)$/;"	f	struct:WAVM::Serialization::InputStream
align	Lib/LLVMJIT/LLVMModule.cpp	/^	static Uptr align(Uptr size, Uptr alignment)$/;"	f	struct:LLVMJIT::ModuleMemoryManager	file:
alignmentLog2	Include/WAVM/IR/Operators.h	/^		U8 alignmentLog2;$/;"	m	struct:WAVM::IR::AtomicLoadOrStoreImm
alignmentLog2	Include/WAVM/IR/Operators.h	/^		U8 alignmentLog2;$/;"	m	struct:WAVM::IR::LoadOrStoreImm
alignof	ThirdParty/libunwind/test/alignment.pass.cpp	/^static_assert(alignof(_Unwind_Exception) == alignof(MaxAligned),$/;"	v
allocateAlignedVirtualPages	Lib/Platform/POSIX/Memory.cpp	/^U8* Platform::allocateAlignedVirtualPages(Uptr numPages,$/;"	f	class:Platform
allocateAlignedVirtualPages	Lib/Platform/Windows/Memory.cpp	/^U8* Platform::allocateAlignedVirtualPages(Uptr numPages,$/;"	f	class:Platform
allocateBytes	Lib/LLVMJIT/LLVMModule.cpp	/^	U8* allocateBytes(Uptr numBytes, Uptr alignment, Section& section)$/;"	f	struct:LLVMJIT::ModuleMemoryManager	file:
allocateThreadId	Lib/ThreadTest/ThreadTest.cpp	/^FORCENOINLINE static Uptr allocateThreadId(Thread* thread)$/;"	f	file:
allocateVirtualPages	Lib/Platform/POSIX/Memory.cpp	/^U8* Platform::allocateVirtualPages(Uptr numPages)$/;"	f	class:Platform
allocateVirtualPages	Lib/Platform/Windows/Memory.cpp	/^U8* Platform::allocateVirtualPages(Uptr numPages)$/;"	f	class:Platform
allowLegacyOperatorNames	Include/WAVM/IR/IR.h	/^		bool allowLegacyOperatorNames = true;$/;"	m	struct:WAVM::IR::FeatureSpec
allowQuotedNames	Lib/WASTPrint/Print.cpp	/^	bool allowQuotedNames;$/;"	m	struct:NameScope	file:
alt	Lib/RegExp/RegExp.cpp	/^	alt,$/;"	m	class:NodeType	file:
analyzeSpaceUsage	Include/WAVM/Inline/HashMapImpl.h	/^void HashMap<HASHMAP_ARGUMENTS>::analyzeSpaceUsage(Uptr& outTotalMemoryBytes,$/;"	f	class:HashMap
analyzeSpaceUsage	Include/WAVM/Inline/HashSetImpl.h	/^void HashSet<Element, ElementHashPolicy>::analyzeSpaceUsage(Uptr& outTotalMemoryBytes,$/;"	f	class:HashSet
analyzeSpaceUsage	Include/WAVM/Inline/HashTableImpl.h	/^void HashTable<HASHTABLE_ARGUMENTS>::analyzeSpaceUsage(Uptr& outTotalMemoryBytes,$/;"	f	class:HashTable
any	Include/WAVM/IR/Types.h	/^		any = 1,$/;"	m	class:WAVM::IR::ValueType
anyref	Include/WAVM/IR/Types.h	/^		anyref = 7,$/;"	m	class:WAVM::IR::ValueType
anyref	Include/WAVM/IR/Types.h	/^		anyref = 7,$/;"	m	class:WAVM::IR::ValueType::ReferenceType
anyrefType	Lib/LLVMJIT/LLVMJITPrivate.h	/^		llvm::Type* anyrefType;$/;"	m	struct:WAVM::LLVMJIT::LLVMContext
applyImageRelativeRelocations	Lib/LLVMJIT/Win64EH.cpp	/^static void applyImageRelativeRelocations(const llvm::LoadedObjectInfo& loadedObject,$/;"	f	file:
areKeysEqual	Include/WAVM/Inline/Hash.h	/^		static bool areKeysEqual(const Key& left, const Key& right) { return left == right; }$/;"	f	struct:WAVM::DefaultHashPolicy
areKeysEqual	Include/WAVM/Inline/HashMap.h	/^			FORCEINLINE static bool areKeysEqual(const Key& left, const Key& right)$/;"	f	struct:WAVM::HashMap::HashTablePolicy
areKeysEqual	Include/WAVM/Inline/HashSet.h	/^			FORCEINLINE static bool areKeysEqual(const Element& left, const Element& right)$/;"	f	struct:WAVM::HashSet::HashTablePolicy
areKeysEqual	Lib/IR/Types.cpp	/^	static bool areKeysEqual(FunctionType left, FunctionType right)$/;"	f	struct:FunctionTypeHashPolicy
areKeysEqual	Lib/IR/Types.cpp	/^	static bool areKeysEqual(TypeTuple left, TypeTuple right)$/;"	f	struct:TypeTupleHashPolicy
areKeysEqual	Lib/WASTParse/Parse.h	/^			static bool areKeysEqual(const Name& left, const Name& right) { return left == right; }$/;"	f	struct:WAVM::WAST::Name::HashPolicy
areResultsReturnedDirectly	Lib/LLVMJIT/LLVMJITPrivate.h	/^	inline bool areResultsReturnedDirectly(IR::TypeTuple results)$/;"	f	namespace:WAVM::LLVMJIT
args	Lib/WASI/WASI.cpp	/^		std::vector<std::string> args;$/;"	m	struct:WAVM::WASI::Process	file:
args	Programs/wavm-run-wasi/wavm-run-wasi.cpp	/^	std::vector<std::string> args;$/;"	m	struct:CommandLineOptions	file:
args	Programs/wavm-run/wavm-run.cpp	/^	char** args = nullptr;$/;"	m	struct:CommandLineOptions	file:
argument	Lib/ThreadTest/ThreadTest.cpp	/^	IR::Value argument;$/;"	m	struct:Thread	file:
arguments	Include/WAVM/Runtime/RuntimeData.h	/^		IR::UntaggedValue arguments[1];$/;"	m	struct:WAVM::Runtime::Exception
arguments	Include/WAVM/WASTParse/TestScript.h	/^		IR::ValueTuple arguments;$/;"	m	struct:WAVM::WAST::InvokeAction
arm_section	ThirdParty/libunwind/src/AddressSpace.hpp	/^  uintptr_t       arm_section;$/;"	m	struct:libunwind::UnwindInfoSections
arm_section_length	ThirdParty/libunwind/src/AddressSpace.hpp	/^  uintptr_t       arm_section_length;$/;"	m	struct:libunwind::UnwindInfoSections
arrayoffsetof	ThirdParty/libunwind/src/UnwindCursor.hpp	/^#define arrayoffsetof(/;"	d
asExceptionType	Include/WAVM/IR/Types.h	/^		friend ExceptionType asExceptionType(const ExternType& objectType)$/;"	f	struct:WAVM::IR::ValueType::ExternType
asFunctionType	Include/WAVM/IR/Types.h	/^		friend FunctionType asFunctionType(const ExternType& objectType)$/;"	f	struct:WAVM::IR::ValueType::ExternType
asGlobalType	Include/WAVM/IR/Types.h	/^		friend GlobalType asGlobalType(const ExternType& objectType)$/;"	f	struct:WAVM::IR::ValueType::ExternType
asLLVMCallingConv	Lib/LLVMJIT/LLVMJITPrivate.h	/^	inline llvm::CallingConv::ID asLLVMCallingConv(IR::CallingConvention callingConvention)$/;"	f	namespace:WAVM::LLVMJIT
asLLVMType	Lib/LLVMJIT/LLVMJITPrivate.h	/^	inline llvm::FunctionType* asLLVMType(LLVMContext& llvmContext,$/;"	f	namespace:WAVM::LLVMJIT
asLLVMType	Lib/LLVMJIT/LLVMJITPrivate.h	/^	inline llvm::Type* asLLVMType(LLVMContext& llvmContext, IR::TypeTuple typeTuple)$/;"	f	namespace:WAVM::LLVMJIT
asLLVMType	Lib/LLVMJIT/LLVMJITPrivate.h	/^	inline llvm::Type* asLLVMType(LLVMContext& llvmContext, IR::ValueType type)$/;"	f	namespace:WAVM::LLVMJIT
asMemoryType	Include/WAVM/IR/Types.h	/^		friend MemoryType asMemoryType(const ExternType& objectType)$/;"	f	struct:WAVM::IR::ValueType::ExternType
asObject	Include/WAVM/Runtime/Runtime.h	/^	inline Object* asObject(Object* object) { return object; }$/;"	f	namespace:WAVM::Runtime
asObject	Include/WAVM/Runtime/Runtime.h	/^	inline const Object* asObject(const Object* object) { return object; }$/;"	f	namespace:WAVM::Runtime
asString	Include/WAVM/IR/Types.h	/^	inline const char* asString(ValueType type)$/;"	f	class:WAVM::IR::ValueType
asString	Include/WAVM/IR/Types.h	/^	inline std::string asString(I32 value) { return std::to_string(value); }$/;"	f	class:WAVM::IR::ValueType
asString	Include/WAVM/IR/Types.h	/^	inline std::string asString(I64 value) { return std::to_string(value); }$/;"	f	class:WAVM::IR::ValueType
asString	Include/WAVM/IR/Types.h	/^	inline std::string asString(TypeTuple typeTuple)$/;"	f	class:WAVM::IR::ValueType
asString	Include/WAVM/IR/Types.h	/^	inline std::string asString(const ExceptionType& exceptionType)$/;"	f	class:WAVM::IR::ValueType
asString	Include/WAVM/IR/Types.h	/^	inline std::string asString(const ExternType& objectType)$/;"	f	class:WAVM::IR::ValueType
asString	Include/WAVM/IR/Types.h	/^	inline std::string asString(const FunctionType& functionType)$/;"	f	class:WAVM::IR::ValueType
asString	Include/WAVM/IR/Types.h	/^	inline std::string asString(const GlobalType& globalType)$/;"	f	class:WAVM::IR::ValueType
asString	Include/WAVM/IR/Types.h	/^	inline std::string asString(const MemoryType& memoryType)$/;"	f	class:WAVM::IR::ValueType
asString	Include/WAVM/IR/Types.h	/^	inline std::string asString(const SizeConstraints& sizeConstraints)$/;"	f	class:WAVM::IR::ValueType
asString	Include/WAVM/IR/Types.h	/^	inline std::string asString(const TableType& tableType)$/;"	f	class:WAVM::IR::ValueType
asString	Include/WAVM/IR/Types.h	/^	inline std::string asString(const V128& v128)$/;"	f	class:WAVM::IR::ValueType
asString	Include/WAVM/IR/Value.h	/^		friend std::string asString(const Value& value)$/;"	f	struct:WAVM::IR::Value
asString	Include/WAVM/IR/Value.h	/^		friend std::string asString(const ValueTuple& valueTuple)$/;"	f	struct:WAVM::IR::ValueTuple
asString	Lib/IR/FloatPrinting.cpp	/^std::string WAVM::IR::asString(F32 f32) { return floatAsString(f32); }$/;"	f	class:WAVM::IR
asString	Lib/IR/FloatPrinting.cpp	/^std::string WAVM::IR::asString(F64 f64) { return floatAsString(f64); }$/;"	f	class:WAVM::IR
asTableType	Include/WAVM/IR/Types.h	/^		friend TableType asTableType(const ExternType& objectType)$/;"	f	struct:WAVM::IR::ValueType::ExternType
asValueType	Include/WAVM/IR/Types.h	/^	inline ValueType asValueType(ReferenceType type) { return ValueType(type); }$/;"	f	class:WAVM::IR::ValueType
asfloat	ThirdParty/libunwind/src/Registers.hpp	/^    } asfloat;$/;"	m	union:libunwind::Registers_ppc64::ppc64_vsr_t	typeref:struct:libunwind::Registers_ppc64::ppc64_vsr_t::asfloat_s
asfloat_s	ThirdParty/libunwind/src/Registers.hpp	/^    struct asfloat_s {$/;"	s	union:libunwind::Registers_ppc64::ppc64_vsr_t
asm2wasm	Include/WAVM/Emscripten/Emscripten.h	/^		Runtime::GCPointer<Runtime::ModuleInstance> asm2wasm;$/;"	m	struct:WAVM::Emscripten::Instance
assert_invalid	Include/WAVM/WASTParse/TestScript.h	/^			assert_invalid,$/;"	e	enum:WAVM::WAST::Command::Type
assert_malformed	Include/WAVM/WASTParse/TestScript.h	/^			assert_malformed,$/;"	e	enum:WAVM::WAST::Command::Type
assert_return	Include/WAVM/WASTParse/TestScript.h	/^			assert_return,$/;"	e	enum:WAVM::WAST::Command::Type
assert_return_arithmetic_nan	Include/WAVM/WASTParse/TestScript.h	/^			assert_return_arithmetic_nan,$/;"	e	enum:WAVM::WAST::Command::Type
assert_return_canonical_nan	Include/WAVM/WASTParse/TestScript.h	/^			assert_return_canonical_nan,$/;"	e	enum:WAVM::WAST::Command::Type
assert_return_func	Include/WAVM/WASTParse/TestScript.h	/^			assert_return_func,$/;"	e	enum:WAVM::WAST::Command::Type
assert_throws	Include/WAVM/WASTParse/TestScript.h	/^			assert_throws,$/;"	e	enum:WAVM::WAST::Command::Type
assert_trap	Include/WAVM/WASTParse/TestScript.h	/^			assert_trap,$/;"	e	enum:WAVM::WAST::Command::Type
assert_unlinkable	Include/WAVM/WASTParse/TestScript.h	/^			assert_unlinkable,$/;"	e	enum:WAVM::WAST::Command::Type
atomicLoad	Lib/Runtime/Atomics.cpp	/^template<typename Value> static Value atomicLoad(const Value* valuePointer)$/;"	f	file:
atomicStore	Lib/Runtime/Atomics.cpp	/^template<typename Value> static void atomicStore(Value* valuePointer, Value newValue)$/;"	f	file:
atomic_notify	Lib/LLVMJIT/EmitMem.cpp	/^void EmitFunctionContext::atomic_notify(AtomicLoadOrStoreImm<2> imm)$/;"	f	class:EmitFunctionContext
atomics	Include/WAVM/IR/IR.h	/^		bool atomics = true;$/;"	m	struct:WAVM::IR::FeatureSpec
b	Test/Containers/HashMapTest.cpp	/^	std::string b;$/;"	m	struct:EmplacedValue	file:
bFunction	Test/fuzz/ModuleMatcher.h	/^		const FunctionDef* bFunction = nullptr;$/;"	m	struct:WAVM::ModuleMatcher
bModule	Test/fuzz/ModuleMatcher.h	/^		const Module& bModule;$/;"	m	struct:WAVM::ModuleMatcher
backtrace	ThirdParty/libunwind/test/libunwind_01.pass.cpp	/^void backtrace(int lower_bound) {$/;"	f
barrier_cache	ThirdParty/libunwind/include/unwind.h	/^  } barrier_cache;$/;"	m	struct:_Unwind_Control_Block	typeref:struct:_Unwind_Control_Block::__anon57
base	Lib/Platform/POSIX/POSIXPrivate.h	/^		U8* base = nullptr;$/;"	m	struct:WAVM::Platform::SigAltStack
baseAddress	Lib/LLVMJIT/LLVMModule.cpp	/^		U8* baseAddress;$/;"	m	struct:LLVMJIT::ModuleMemoryManager::Section	file:
baseAddress	Lib/Runtime/RuntimePrivate.h	/^		U8* baseAddress = nullptr;$/;"	m	struct:WAVM::Runtime::Memory
baseOffset	Include/WAVM/IR/Module.h	/^		InitializerExpression baseOffset;$/;"	m	struct:WAVM::IR::Opcode::DataSegment
baseOffset	Include/WAVM/IR/Module.h	/^		InitializerExpression baseOffset;$/;"	m	struct:WAVM::IR::Opcode::Elem::ElemSegment
begin	Include/WAVM/IR/Types.h	/^		const ValueType* begin() const { return impl->elems; }$/;"	f	struct:WAVM::IR::ValueType::TypeTuple
begin	Include/WAVM/Inline/HashMapImpl.h	/^template<HASHMAP_PARAMETERS> HashMapIterator<Key, Value> HashMap<HASHMAP_ARGUMENTS>::begin() const$/;"	f	class:HashMap
begin	Include/WAVM/Inline/HashSetImpl.h	/^HashSetIterator<Element> HashSet<Element, ElementHashPolicy>::begin() const$/;"	f	class:HashSet
begin	Include/WAVM/Inline/IndexMap.h	/^		Iterator begin() const { return Iterator(map.begin()); }$/;"	f	struct:WAVM::IndexMap
begin	Include/WAVM/Platform/File.h	/^		begin = 0,$/;"	m	class:WAVM::Platform::FileSeekOrigin
begin	Lib/WASTParse/Parse.h	/^		const char* begin;$/;"	m	struct:WAVM::WAST::Name
begin	ThirdParty/libunwind/src/UnwindCursor.hpp	/^  static _Self begin(A& addressSpace, const UnwindInfoSections& sects) {$/;"	f	struct:libunwind::EHABISectionIterator
biasedTableElementValueToObject	Lib/Runtime/Table.cpp	/^static Object* biasedTableElementValueToObject(Uptr biasedValue)$/;"	f	file:
biasedValue	Lib/Runtime/RuntimePrivate.h	/^			std::atomic<Uptr> biasedValue;$/;"	m	struct:WAVM::Runtime::Table::Element
bindName	Lib/WASTParse/Parse.cpp	/^void WAST::bindName(ParseState* parseState,$/;"	f	class:WAST
bitcastInt	Include/WAVM/Inline/FloatComponents.h	/^			Bits bitcastInt;$/;"	m	union:WAVM::__anon25
bitcastInt	Include/WAVM/Inline/FloatComponents.h	/^			Bits bitcastInt;$/;"	m	union:__anon27
bitpattern	ThirdParty/libunwind/include/unwind.h	/^    uint32_t bitpattern[4];$/;"	m	struct:_Unwind_Control_Block::__anon58
bitpattern	ThirdParty/libunwind/include/unwind.h	/^    uint32_t bitpattern[5];$/;"	m	struct:_Unwind_Control_Block::__anon57
bits	Include/WAVM/Inline/FloatComponents.h	/^			} bits;$/;"	m	union:WAVM::__anon25	typeref:struct:WAVM::__anon25::__anon26
bits	Include/WAVM/Inline/FloatComponents.h	/^			} bits;$/;"	m	union:__anon27	typeref:struct:__anon27::__anon28
blk_count	ThirdParty/libunwind/src/config.h	/^  struct blk_count {$/;"	s	struct:check_fit
block	Include/WAVM/Emscripten/gas-visit-context.h	/^	Result block(ControlStructureImm imm)$/;"	f	struct:GasVisitor
block	Include/WAVM/Emscripten/gas-visit-context.h	/^            block,$/;"	m	class:GasVisitor::ControlContext::Type
block	Include/WAVM/Emscripten/insert-imported-context.h	/^            block,$/;"	m	class:ImportFunctionInsertVisitor::ControlContext::Type
block	Include/WAVM/Emscripten/insert-imported-context.h	/^    Result block(ControlStructureImm imm)$/;"	f	struct:ImportFunctionInsertVisitor
block	Lib/IR/Validate.cpp	/^			block,$/;"	m	class:FunctionValidationContext::ControlContext::Type	file:
block	Lib/IR/Validate.cpp	/^	void block(ControlStructureImm imm)$/;"	f	struct:FunctionValidationContext
block	Lib/LLVMJIT/EmitCore.cpp	/^void EmitFunctionContext::block(ControlStructureImm imm)$/;"	f	class:EmitFunctionContext
block	Lib/LLVMJIT/EmitFunction.cpp	/^	void block(ControlStructureImm) { ++unreachableControlDepth; }$/;"	f	struct:UnreachableOpVisitor
block	Lib/LLVMJIT/EmitFunctionContext.h	/^				block,$/;"	m	class:WAVM::LLVMJIT::EmitFunctionContext::ControlContext::Type
block	Lib/LLVMJIT/EmitFunctionContext.h	/^			llvm::BasicBlock* block;$/;"	m	struct:WAVM::LLVMJIT::EmitFunctionContext::BranchTarget
block	Lib/WASTPrint/Print.cpp	/^			block,$/;"	m	class:FunctionPrintContext::ControlContext::Type	file:
block	Lib/WASTPrint/Print.cpp	/^	void block(ControlStructureImm imm)$/;"	f	struct:FunctionPrintContext
br	Include/WAVM/Emscripten/gas-visit-context.h	/^    Result br(BranchImm imm)$/;"	f	struct:GasVisitor
br	Lib/IR/Validate.cpp	/^	void br(BranchImm imm)$/;"	f	struct:FunctionValidationContext
br	Lib/LLVMJIT/EmitCore.cpp	/^void EmitFunctionContext::br(BranchImm imm)$/;"	f	class:EmitFunctionContext
br	Lib/WASTPrint/Print.cpp	/^	void br(BranchImm imm)$/;"	f	struct:FunctionPrintContext
br_if	Include/WAVM/Emscripten/gas-visit-context.h	/^    Result br_if(BranchImm imm)$/;"	f	struct:GasVisitor
br_if	Lib/IR/Validate.cpp	/^	void br_if(BranchImm imm)$/;"	f	struct:FunctionValidationContext
br_if	Lib/LLVMJIT/EmitCore.cpp	/^void EmitFunctionContext::br_if(BranchImm imm)$/;"	f	class:EmitFunctionContext
br_if	Lib/WASTPrint/Print.cpp	/^	void br_if(BranchImm imm) { string += "\\nbr_if " + getBranchTargetId(imm.targetDepth); }$/;"	f	struct:FunctionPrintContext
br_table	Include/WAVM/Emscripten/gas-visit-context.h	/^    Result br_table(BranchTableImm imm)$/;"	f	struct:GasVisitor
br_table	Lib/IR/Validate.cpp	/^	void br_table(BranchTableImm imm)$/;"	f	struct:FunctionValidationContext
br_table	Lib/LLVMJIT/EmitCore.cpp	/^void EmitFunctionContext::br_table(BranchTableImm imm)$/;"	f	class:EmitFunctionContext
br_table	Lib/WASTPrint/Print.cpp	/^	void br_table(BranchTableImm imm)$/;"	f	struct:FunctionPrintContext
branchTableIndex	Include/WAVM/IR/Operators.h	/^		Uptr branchTableIndex;$/;"	m	struct:WAVM::IR::BranchTableImm
branchTables	Include/WAVM/IR/Module.h	/^		std::vector<std::vector<Uptr>> branchTables;$/;"	m	struct:WAVM::IR::Opcode::FunctionDef
branchTargetDepth	Lib/WASTParse/ParseFunction.cpp	/^		Uptr branchTargetDepth;$/;"	m	struct:WAVM::WAST::FunctionState	file:
branchTargetIndex	Lib/WASTParse/ParseFunction.cpp	/^		Uptr branchTargetIndex;$/;"	m	struct:__anon50::ScopedBranchTarget	file:
branchTargetNameToIndexMap	Lib/WASTParse/ParseFunction.cpp	/^		NameToIndexMap branchTargetNameToIndexMap;$/;"	m	struct:WAVM::WAST::FunctionState	file:
branchTargetStack	Lib/LLVMJIT/EmitFunctionContext.h	/^		std::vector<BranchTarget> branchTargetStack;$/;"	m	struct:WAVM::LLVMJIT::EmitFunctionContext
branchToEndOfControlContext	Lib/LLVMJIT/EmitFunction.cpp	/^void EmitFunctionContext::branchToEndOfControlContext()$/;"	f	class:EmitFunctionContext
bucket	Include/WAVM/Inline/HashMap.h	/^		const HashTableBucket<Pair>* bucket;$/;"	m	struct:WAVM::HashMapIterator
bucket	Include/WAVM/Inline/HashSet.h	/^		const HashTableBucket<Element>* bucket;$/;"	m	struct:WAVM::HashSetIterator
buckets	Include/WAVM/Inline/HashTable.h	/^		Bucket* buckets;$/;"	m	struct:WAVM::HashTable
buf	Lib/WASI/WASIDefinitions.h	/^	__wasi_void_ptr_t buf;$/;"	m	struct:__wasi_ciovec_t
buf	Lib/WASI/WASIDefinitions.h	/^	__wasi_void_ptr_t buf;$/;"	m	struct:__wasi_iovec_t
buf_len	Lib/WASI/WASIDefinitions.h	/^	__wasi_size_t buf_len;$/;"	m	struct:__wasi_ciovec_t
buf_len	Lib/WASI/WASIDefinitions.h	/^	__wasi_size_t buf_len;$/;"	m	struct:__wasi_iovec_t
bulkMemoryOperations	Include/WAVM/IR/IR.h	/^		bool bulkMemoryOperations = true;$/;"	m	struct:WAVM::IR::FeatureSpec
byteStream	Include/WAVM/IR/Operators.h	/^		Serialization::OutputStream& byteStream;$/;"	m	struct:WAVM::IR::OperatorEncoderStream
byteStream	Lib/WASM/WASMSerialization.cpp	/^	Serialization::OutputStream& byteStream;$/;"	m	struct:OperatorSerializerStream	file:
bytes	Include/WAVM/IR/Value.h	/^			U8 bytes[16];$/;"	m	union:WAVM::IR::UntaggedValue::__anon8
bytes	Include/WAVM/Inline/Serialization.h	/^		std::vector<U8> bytes;$/;"	m	struct:WAVM::Serialization::ArrayOutputStream
bytewiseMemCopy	Include/WAVM/Platform/Intrinsic.h	/^	inline void bytewiseMemCopy(U8* dest, const U8* source, Uptr numBytes)$/;"	f	namespace:WAVM::Platform
bytewiseMemCopyReverse	Include/WAVM/Platform/Intrinsic.h	/^	inline void bytewiseMemCopyReverse(U8* dest, const U8* source, Uptr numBytes)$/;"	f	namespace:WAVM::Platform
bytewiseMemMove	Include/WAVM/Platform/Intrinsic.h	/^	inline void bytewiseMemMove(U8* dest, U8* source, Uptr numBytes)$/;"	f	namespace:WAVM::Platform
bytewiseMemSet	Include/WAVM/Platform/Intrinsic.h	/^	inline void bytewiseMemSet(U8* dest, U8 value, Uptr numBytes)$/;"	f	namespace:WAVM::Platform
c	Lib/NFA/NFA.cpp	/^	U8 c;$/;"	m	struct:StateTransitionsByChar	file:
calcLocusFromOffset	Lib/WASTParse/Lexer.cpp	/^TextFileLocus WAST::calcLocusFromOffset(const char* string,$/;"	f	class:WAST
calcNumBytes	Include/WAVM/IR/Types.h	/^			static Uptr calcNumBytes(Uptr numElems)$/;"	f	struct:WAVM::IR::ValueType::TypeTuple::Impl
calcNumBytes	Include/WAVM/Runtime/RuntimeData.h	/^		static Uptr calcNumBytes(Uptr numArguments)$/;"	f	struct:WAVM::Runtime::Exception
calcProbeCount	Include/WAVM/Inline/HashTableImpl.h	/^Uptr HashTable<HASHTABLE_ARGUMENTS>::calcProbeCount(Uptr bucketIndex) const$/;"	f	class:HashTable
call	Include/WAVM/Emscripten/gas-visit-context.h	/^    Result call(FunctionImm imm)$/;"	f	struct:GasVisitor
call	Include/WAVM/Emscripten/insert-imported-context.h	/^    Result call(FunctionImm imm)$/;"	f	struct:ImportFunctionInsertVisitor
call	Lib/IR/Validate.cpp	/^	void call(FunctionImm imm)$/;"	f	struct:FunctionValidationContext
call	Lib/LLVMJIT/EmitCore.cpp	/^void EmitFunctionContext::call(FunctionImm imm)$/;"	f	class:EmitFunctionContext
call	Lib/WASTPrint/Print.cpp	/^	void call(FunctionImm imm)$/;"	f	struct:FunctionPrintContext
callLLVMIntrinsic	Lib/LLVMJIT/EmitFunctionContext.h	/^		llvm::Value* callLLVMIntrinsic(const std::initializer_list<llvm::Type*>& typeArguments,$/;"	f	struct:WAVM::LLVMJIT::EmitFunctionContext
callStack	Include/WAVM/Runtime/RuntimeData.h	/^		Platform::CallStack callStack;$/;"	m	struct:WAVM::Runtime::Exception
call_indirect	Include/WAVM/Emscripten/gas-visit-context.h	/^    Result call_indirect(CallIndirectImm imm)$/;"	f	struct:GasVisitor
call_indirect	Lib/IR/Validate.cpp	/^	void call_indirect(CallIndirectImm imm)$/;"	f	struct:FunctionValidationContext
call_indirect	Lib/LLVMJIT/EmitCore.cpp	/^void EmitFunctionContext::call_indirect(CallIndirectImm imm)$/;"	f	class:EmitFunctionContext
call_indirect	Lib/WASTPrint/Print.cpp	/^	void call_indirect(CallIndirectImm imm)$/;"	f	struct:FunctionPrintContext
call_method	ThirdParty/bridge/rpc_inproc.cpp	/^uint32_t XChainServiceClient::call_method(const std::string& method, const std::string& args) {$/;"	f	class:xchain::XChainServiceClient
callback	ThirdParty/libunwind/test/libunwind_02.pass.cpp	/^_Unwind_Reason_Code callback(_Unwind_Context *context, void *cnt) {$/;"	f
callback_call_method	ThirdParty/bridge/rpc_inproc.h	/^typedef uint32_t (*callback_call_method)(int64_t, char*, uint32_t, char*, uint32_t);$/;"	t
callback_fetch_response	ThirdParty/bridge/rpc_inproc.h	/^typedef char* (*callback_fetch_response)(int64_t, uint32_t);$/;"	t
callingConvention	Include/WAVM/LLVMJIT/LLVMJIT.h	/^		IR::CallingConvention callingConvention;$/;"	m	struct:WAVM::LLVMJIT::FunctionBinding
callingConvention	Include/WAVM/Runtime/Intrinsics.h	/^		IR::CallingConvention callingConvention;$/;"	m	struct:WAVM::Intrinsics::Function
canonicalSignificand	Include/WAVM/Inline/FloatComponents.h	/^			canonicalSignificand = 0x400000,$/;"	m	struct:FloatComponents	typeref:enum:FloatComponents::
canonicalSignificand	Include/WAVM/Inline/FloatComponents.h	/^			canonicalSignificand = 0x8000000000000ull,$/;"	m	struct:WAVM::FloatComponents	typeref:enum:WAVM::FloatComponents::
capacity	Include/WAVM/Inline/Serialization.h	/^		Uptr capacity() const { return SIZE_MAX; }$/;"	f	struct:WAVM::Serialization::OutputStream
capacity	Include/WAVM/Inline/Serialization.h	/^		virtual Uptr capacity() const { return end - next; }$/;"	f	struct:WAVM::Serialization::MemoryInputStream
captureCallStack	Lib/Platform/POSIX/Diagnostics.cpp	/^CallStack Platform::captureCallStack(Uptr numOmittedFramesFromTop)$/;"	f	class:Platform
captureCallStack	Lib/Platform/Windows/Diagnostics.cpp	/^CallStack Platform::captureCallStack(Uptr numOmittedFramesFromTop)$/;"	f	class:Platform
catchDepth	Include/WAVM/IR/Operators.h	/^		Uptr catchDepth;$/;"	m	struct:WAVM::IR::RethrowImm
catchJump	Lib/Platform/POSIX/POSIXPrivate.h	/^		jmp_buf catchJump;$/;"	m	struct:WAVM::Platform::SignalContext
catchRuntimeExceptions	Lib/Runtime/Exception.cpp	/^void Runtime::catchRuntimeExceptions(const std::function<void()>& thunk,$/;"	f	class:Runtime
catchRuntimeExceptionsOnRelocatableStack	Lib/Runtime/Exception.cpp	/^void Runtime::catchRuntimeExceptionsOnRelocatableStack(void (*thunk)(),$/;"	f	class:Runtime
catchSignals	Lib/Platform/POSIX/Signal.cpp	/^bool Platform::catchSignals(void (*thunk)(void*),$/;"	f	class:Platform
catchSignals	Lib/Platform/Windows/Signal.cpp	/^bool Platform::catchSignals(void (*thunk)(void*),$/;"	f	class:Platform
catchStack	Lib/LLVMJIT/EmitFunctionContext.h	/^		std::vector<CatchContext> catchStack;$/;"	m	struct:WAVM::LLVMJIT::EmitFunctionContext
catchSwitchInst	Lib/LLVMJIT/EmitFunctionContext.h	/^			llvm::CatchSwitchInst* catchSwitchInst;$/;"	m	struct:WAVM::LLVMJIT::EmitFunctionContext::CatchContext
catch_	Include/WAVM/Emscripten/gas-visit-context.h	/^	Result catch_(ExceptionTypeImm imm)$/;"	f	struct:GasVisitor
catch_	Include/WAVM/Emscripten/gas-visit-context.h	/^            catch_,$/;"	m	class:GasVisitor::ControlContext::Type
catch_	Include/WAVM/Emscripten/insert-imported-context.h	/^            catch_,$/;"	m	class:ImportFunctionInsertVisitor::ControlContext::Type
catch_	Include/WAVM/Emscripten/insert-imported-context.h	/^    Result catch_(ExceptionTypeImm imm)$/;"	f	struct:ImportFunctionInsertVisitor
catch_	Lib/IR/Validate.cpp	/^	void catch_(ExceptionTypeImm imm)$/;"	f	struct:FunctionValidationContext
catch_	Lib/LLVMJIT/EmitExceptions.cpp	/^void EmitFunctionContext::catch_(ExceptionTypeImm imm)$/;"	f	class:EmitFunctionContext
catch_	Lib/LLVMJIT/EmitFunction.cpp	/^	void catch_(ExceptionTypeImm imm)$/;"	f	struct:UnreachableOpVisitor
catch_	Lib/WASTPrint/Print.cpp	/^			catch_,$/;"	m	class:FunctionPrintContext::ControlContext::Type	file:
catch_	Lib/WASTPrint/Print.cpp	/^	void catch_(ExceptionTypeImm imm)$/;"	f	struct:FunctionPrintContext
catch_all	Include/WAVM/Emscripten/gas-visit-context.h	/^	Result catch_all(NoImm imm)$/;"	f	struct:GasVisitor
catch_all	Include/WAVM/Emscripten/insert-imported-context.h	/^    Result catch_all(NoImm imm)$/;"	f	struct:ImportFunctionInsertVisitor
catch_all	Lib/IR/Validate.cpp	/^	void catch_all(NoImm)$/;"	f	struct:FunctionValidationContext
catch_all	Lib/LLVMJIT/EmitExceptions.cpp	/^void EmitFunctionContext::catch_all(NoImm)$/;"	f	class:EmitFunctionContext
catch_all	Lib/LLVMJIT/EmitFunction.cpp	/^	void catch_all(NoImm imm)$/;"	f	struct:UnreachableOpVisitor
catch_all	Lib/WASTPrint/Print.cpp	/^	void catch_all(NoImm)$/;"	f	struct:FunctionPrintContext
categoryEnabled	Lib/Logging/Logging.cpp	/^static std::atomic<bool> categoryEnabled[(Uptr)Category::num] = {$/;"	v	file:
ceilLogTwo	Include/WAVM/Platform/Intrinsic.h	/^	inline U32 ceilLogTwo(U32 value)$/;"	f	namespace:WAVM::Platform
ceilLogTwo	Include/WAVM/Platform/Intrinsic.h	/^	inline U64 ceilLogTwo(U64 value)$/;"	f	namespace:WAVM::Platform
cfaExpression	ThirdParty/libunwind/src/DwarfParser.hpp	/^    int64_t           cfaExpression;      \/\/ CFA = expression$/;"	m	struct:libunwind::CFI_Parser::PrologInfo
cfaRegister	ThirdParty/libunwind/src/DwarfParser.hpp	/^    uint32_t          cfaRegister;$/;"	m	struct:libunwind::CFI_Parser::PrologInfo
cfaRegisterOffset	ThirdParty/libunwind/src/DwarfParser.hpp	/^    int32_t           cfaRegisterOffset;  \/\/ CFA = (cfaRegister)+cfaRegisterOffset$/;"	m	struct:libunwind::CFI_Parser::PrologInfo
charOffset	Lib/WASTParse/Parse.h	/^		Uptr charOffset;$/;"	m	struct:WAVM::WAST::UnresolvedError
charSet	Lib/RegExp/RegExp.cpp	/^	NFA::CharSet charSet;$/;"	m	struct:Lit	file:
charToOffsetMap	Include/WAVM/NFA/NFA.h	/^		U32 charToOffsetMap[256];$/;"	m	struct:WAVM::NFA::Machine
characters	Include/WAVM/WASTParse/WASTParse.h	/^		U32 characters;$/;"	m	struct:WAVM::WAST::TextFileLocus
checkKeyMgrRegisteredFDEs	ThirdParty/libunwind/src/Unwind_AppleExtras.cpp	/^bool checkKeyMgrRegisteredFDEs(uintptr_t pc, void *&fde) {$/;"	f	namespace:libunwind
check_fit	ThirdParty/libunwind/src/config.h	/^struct check_fit {$/;"	s
child	Lib/RegExp/RegExp.cpp	/^	Node* child;$/;"	m	struct:Unary	file:
cieInstructions	ThirdParty/libunwind/src/DwarfParser.hpp	/^    pint_t    cieInstructions;$/;"	m	struct:libunwind::CFI_Parser::CIE_Info
cieLength	ThirdParty/libunwind/src/DwarfParser.hpp	/^    pint_t    cieLength;$/;"	m	struct:libunwind::CFI_Parser::CIE_Info
cieStart	ThirdParty/libunwind/src/DwarfParser.hpp	/^    pint_t    cieStart;$/;"	m	struct:libunwind::CFI_Parser::CIE_Info
cleanup_cache	ThirdParty/libunwind/include/unwind.h	/^  } cleanup_cache;$/;"	m	struct:_Unwind_Control_Block	typeref:struct:_Unwind_Control_Block::__anon58
clear	Include/WAVM/Inline/HashMapImpl.h	/^template<HASHMAP_PARAMETERS> void HashMap<HASHMAP_ARGUMENTS>::clear() { table.clear(); }$/;"	f	class:HashMap
clear	Include/WAVM/Inline/HashSetImpl.h	/^void HashSet<Element, ElementHashPolicy>::clear()$/;"	f	class:HashSet
clear	Include/WAVM/Inline/HashTableImpl.h	/^template<HASHTABLE_PARAMETERS> void HashTable<HASHTABLE_ARGUMENTS>::clear()$/;"	f	class:HashTable
clock	Lib/WASI/WASIDefinitions.h	/^		} clock;$/;"	m	union:__wasi_subscription_t::__wasi_subscription_u	typeref:struct:__wasi_subscription_t::__wasi_subscription_u::__wasi_subscription_u_clock_t
clock_id	Lib/WASI/WASIDefinitions.h	/^			__wasi_clockid_t clock_id;$/;"	m	struct:__wasi_subscription_t::__wasi_subscription_u::__wasi_subscription_u_clock_t
cloneCompartment	Lib/Runtime/Compartment.cpp	/^Compartment* Runtime::cloneCompartment(const Compartment* compartment)$/;"	f	class:Runtime
cloneContext	Lib/Runtime/Context.cpp	/^Context* Runtime::cloneContext(const Context* context, Compartment* newCompartment)$/;"	f	class:Runtime
cloneExceptionType	Lib/Runtime/Exception.cpp	/^ExceptionType* Runtime::cloneExceptionType(ExceptionType* exceptionType,$/;"	f	class:Runtime
cloneGlobal	Lib/Runtime/Global.cpp	/^Global* Runtime::cloneGlobal(Global* global, Compartment* newCompartment)$/;"	f	class:Runtime
cloneMemory	Lib/Runtime/Memory.cpp	/^Memory* Runtime::cloneMemory(Memory* memory, Compartment* newCompartment)$/;"	f	class:Runtime
cloneModuleInstance	Lib/Runtime/Module.cpp	/^ModuleInstance* Runtime::cloneModuleInstance(ModuleInstance* moduleInstance,$/;"	f	class:Runtime
cloneTable	Lib/Runtime/Table.cpp	/^Table* Runtime::cloneTable(Table* table, Compartment* newCompartment)$/;"	f	class:Runtime
closeFile	Lib/Platform/POSIX/File.cpp	/^bool Platform::closeFile(File* file) { return close(filePtrToIndex(file)) == 0; }$/;"	f	class:Platform
closeFile	Lib/Platform/Windows/File.cpp	/^bool Platform::closeFile(File* file) { return CloseHandle(filePointerToHandle(file)) != 0; }$/;"	f	class:Platform
closeWaitList	Lib/Runtime/Atomics.cpp	/^static void closeWaitList(Uptr address, WaitList* waitList)$/;"	f	file:
code	Include/WAVM/IR/Module.h	/^		std::vector<U8> code;$/;"	m	struct:WAVM::IR::Opcode::FunctionDef
code	Include/WAVM/LLVMJIT/LLVMJIT.h	/^		void* code;$/;"	m	struct:WAVM::LLVMJIT::FunctionBinding
code	Include/WAVM/Runtime/RuntimeData.h	/^		const U8 code[1];$/;"	m	struct:WAVM::Runtime::Function
code	Lib/ThreadTest/ThreadTest.cpp	/^	I64 code;$/;"	m	struct:ExitThreadException	file:
code	Lib/WASM/WASMSerialization.cpp	/^	code,$/;"	m	class:SectionType	file:
codeAlignFactor	ThirdParty/libunwind/src/DwarfParser.hpp	/^    uint32_t  codeAlignFactor;$/;"	m	struct:libunwind::CFI_Parser::CIE_Info
codeByteStream	Lib/WASTParse/ParseFunction.cpp	/^		Serialization::ArrayOutputStream codeByteStream;$/;"	m	struct:WAVM::WAST::FunctionState	file:
codeOffsetAtStackDecrement	ThirdParty/libunwind/src/DwarfParser.hpp	/^    uint32_t          codeOffsetAtStackDecrement;$/;"	m	struct:libunwind::CFI_Parser::PrologInfo
codeSection	Lib/LLVMJIT/LLVMModule.cpp	/^	Section codeSection;$/;"	m	struct:LLVMJIT::ModuleMemoryManager	file:
codeValidationStream	Include/WAVM/IR/Validate.h	/^		CodeValidationStream codeValidationStream;$/;"	m	struct:WAVM::IR::CodeValidationProxyStream
coerce32bitAddress	Lib/Emscripten/Emscripten.cpp	/^static U32 coerce32bitAddress(Memory* memory, Uptr address)$/;"	f	file:
coerce32bitAddressSigned	Lib/Emscripten/Emscripten.cpp	/^static I32 coerce32bitAddressSigned(Memory* memory, Iptr address)$/;"	f	file:
coerceAddressToPointer	Lib/LLVMJIT/EmitMem.cpp	/^llvm::Value* EmitFunctionContext::coerceAddressToPointer(llvm::Value* boundedAddress,$/;"	f	class:EmitFunctionContext
coerceBoolToI32	Lib/LLVMJIT/EmitFunctionContext.h	/^		llvm::Value* coerceBoolToI32(llvm::Value* boolValue)$/;"	f	struct:WAVM::LLVMJIT::EmitFunctionContext
coerceI32ToBool	Lib/LLVMJIT/EmitFunctionContext.h	/^		llvm::Value* coerceI32ToBool(llvm::Value* i32Value)$/;"	f	struct:WAVM::LLVMJIT::EmitFunctionContext
coerceToCanonicalType	Lib/LLVMJIT/EmitFunction.cpp	/^llvm::Value* EmitFunctionContext::coerceToCanonicalType(llvm::Value* value)$/;"	f	class:EmitFunctionContext
collectCompartmentGarbage	Lib/Runtime/ObjectGC.cpp	/^void Runtime::collectCompartmentGarbage(Compartment* compartment)$/;"	f	class:Runtime
collectGarbageImpl	Lib/Runtime/ObjectGC.cpp	/^static bool collectGarbageImpl(Compartment* compartment)$/;"	f	file:
column	Include/WAVM/WASTParse/WASTParse.h	/^		U32 column(U32 spacesPerTab = 4) const { return tabs * spacesPerTab + characters + 1; }$/;"	f	struct:WAVM::WAST::TextFileLocus
commitVirtualPages	Lib/Platform/POSIX/Memory.cpp	/^bool Platform::commitVirtualPages(U8* baseVirtualAddress, Uptr numPages, MemoryAccess access)$/;"	f	class:Platform
commitVirtualPages	Lib/Platform/Windows/Memory.cpp	/^bool Platform::commitVirtualPages(U8* baseVirtualAddress, Uptr numPages, MemoryAccess access)$/;"	f	class:Platform
commonEncodingsArrayCount	ThirdParty/libunwind/include/mach-o/compact_unwind_encoding.h	/^    uint32_t    commonEncodingsArrayCount;$/;"	m	struct:unwind_info_section_header
commonEncodingsArrayCount	ThirdParty/libunwind/src/UnwindCursor.hpp	/^  uint32_t commonEncodingsArrayCount() const {$/;"	f	class:libunwind::UnwindSectionHeader
commonEncodingsArraySectionOffset	ThirdParty/libunwind/include/mach-o/compact_unwind_encoding.h	/^    uint32_t    commonEncodingsArraySectionOffset;$/;"	m	struct:unwind_info_section_header
commonEncodingsArraySectionOffset	ThirdParty/libunwind/src/UnwindCursor.hpp	/^  uint32_t commonEncodingsArraySectionOffset() const {$/;"	f	class:libunwind::UnwindSectionHeader
compactSaysUseDwarf	ThirdParty/libunwind/src/UnwindCursor.hpp	/^  bool compactSaysUseDwarf(Registers_arm64 &, uint32_t *offset) const {$/;"	f	class:libunwind::UnwindCursor
compactSaysUseDwarf	ThirdParty/libunwind/src/UnwindCursor.hpp	/^  bool compactSaysUseDwarf(Registers_mips_newabi &, uint32_t *) const {$/;"	f	class:libunwind::UnwindCursor
compactSaysUseDwarf	ThirdParty/libunwind/src/UnwindCursor.hpp	/^  bool compactSaysUseDwarf(Registers_mips_o32 &, uint32_t *) const {$/;"	f	class:libunwind::UnwindCursor
compactSaysUseDwarf	ThirdParty/libunwind/src/UnwindCursor.hpp	/^  bool compactSaysUseDwarf(Registers_ppc &, uint32_t *) const {$/;"	f	class:libunwind::UnwindCursor
compactSaysUseDwarf	ThirdParty/libunwind/src/UnwindCursor.hpp	/^  bool compactSaysUseDwarf(Registers_ppc64 &, uint32_t *) const {$/;"	f	class:libunwind::UnwindCursor
compactSaysUseDwarf	ThirdParty/libunwind/src/UnwindCursor.hpp	/^  bool compactSaysUseDwarf(Registers_x86 &, uint32_t *offset) const {$/;"	f	class:libunwind::UnwindCursor
compactSaysUseDwarf	ThirdParty/libunwind/src/UnwindCursor.hpp	/^  bool compactSaysUseDwarf(Registers_x86_64 &, uint32_t *offset) const {$/;"	f	class:libunwind::UnwindCursor
compactSaysUseDwarf	ThirdParty/libunwind/src/UnwindCursor.hpp	/^  bool compactSaysUseDwarf(uint32_t *offset=NULL) const {$/;"	f	class:libunwind::UnwindCursor
compact_unwind_encoding_t	ThirdParty/libunwind/include/mach-o/compact_unwind_encoding.h	/^typedef uint32_t compact_unwind_encoding_t;$/;"	t
compact_unwind_section	ThirdParty/libunwind/src/AddressSpace.hpp	/^    const void*                 compact_unwind_section;$/;"	m	struct:dyld_unwind_sections
compact_unwind_section	ThirdParty/libunwind/src/AddressSpace.hpp	/^  uintptr_t       compact_unwind_section;$/;"	m	struct:libunwind::UnwindInfoSections
compact_unwind_section_length	ThirdParty/libunwind/src/AddressSpace.hpp	/^    uintptr_t                   compact_unwind_section_length;$/;"	m	struct:dyld_unwind_sections
compact_unwind_section_length	ThirdParty/libunwind/src/AddressSpace.hpp	/^  uintptr_t       compact_unwind_section_length;$/;"	m	struct:libunwind::UnwindInfoSections
compartment	Include/WAVM/Emscripten/xchain-service.h	/^        Compartment* compartment;$/;"	m	struct:xchain::XBridgeChainService
compartment	Include/WAVM/Runtime/RuntimeData.h	/^		Compartment* compartment;$/;"	m	struct:WAVM::Runtime::CompartmentRuntimeData
compartment	Include/WAVM/Runtime/RuntimeData.h	/^		compartment = 7,$/;"	m	class:WAVM::Runtime::ObjectKind
compartment	Lib/Emscripten/Interface.cpp	/^    Compartment* compartment;$/;"	m	struct:RootResolver	file:
compartment	Lib/Runtime/ObjectGC.cpp	/^	Compartment* compartment;$/;"	m	struct:GCState	file:
compartment	Lib/Runtime/ObjectGC.cpp	/^: Object{inKind}, compartment(inCompartment)$/;"	f
compartment	Lib/Runtime/RuntimePrivate.h	/^		Compartment* const compartment;$/;"	m	struct:WAVM::Runtime::GCObject
compartment	Lib/WASI/WASI.cpp	/^		GCPointer<Compartment> compartment;$/;"	m	struct:WAVM::WASI::Process	file:
compartment	Programs/wavm-run/wavm-run.cpp	/^	Compartment* compartment;$/;"	m	struct:RootResolver	file:
compartment	Test/RunTestScript/RunTestScript.cpp	/^	GCPointer<Compartment> compartment;$/;"	m	struct:TestScriptState	file:
compartment	Test/fuzz/fuzz-instantiate.cpp	/^	Compartment* compartment;$/;"	m	struct:StubResolver	file:
compartmentReservedBytes	Include/WAVM/Runtime/RuntimeData.h	/^					  == compartmentReservedBytes,$/;"	m	namespace:WAVM::Runtime
compartmentReservedBytes	Include/WAVM/Runtime/RuntimeData.h	/^#define compartmentReservedBytes /;"	d
compartmentRuntimeDataAlignmentLog2	Include/WAVM/Runtime/RuntimeData.h	/^		compartmentRuntimeDataAlignmentLog2 = 32,$/;"	e	enum:WAVM::Runtime::__anon16
compileLLVMModule	Lib/LLVMJIT/LLVMCompile.cpp	/^std::vector<U8> LLVMJIT::compileLLVMModule(LLVMContext& llvmContext,$/;"	f	class:LLVMJIT
compileModule	Lib/LLVMJIT/LLVMCompile.cpp	/^std::vector<U8> LLVMJIT::compileModule(const IR::Module& irModule)$/;"	f	class:LLVMJIT
compileModule	Lib/Runtime/Module.cpp	/^ModuleRef Runtime::compileModule(const IR::Module& irModule)$/;"	f	class:Runtime
configure_compile_flags	ThirdParty/libunwind/test/libunwind/test/config.py	/^    def configure_compile_flags(self):$/;"	m	class:Configuration
configure_compile_flags_exceptions	ThirdParty/libunwind/test/libunwind/test/config.py	/^    def configure_compile_flags_exceptions(self):$/;"	m	class:Configuration
configure_compile_flags_header_includes	ThirdParty/libunwind/test/libunwind/test/config.py	/^    def configure_compile_flags_header_includes(self):$/;"	m	class:Configuration
configure_compile_flags_rtti	ThirdParty/libunwind/test/libunwind/test/config.py	/^    def configure_compile_flags_rtti(self):$/;"	m	class:Configuration
configure_features	ThirdParty/libunwind/test/libunwind/test/config.py	/^    def configure_features(self):$/;"	m	class:Configuration
configure_obj_root	ThirdParty/libunwind/test/libunwind/test/config.py	/^    def configure_obj_root(self):$/;"	m	class:Configuration
configure_src_root	ThirdParty/libunwind/test/libunwind/test/config.py	/^    def configure_src_root(self):$/;"	m	class:Configuration
const	output/CMakeFiles/3.13.2/CompilerIdC/CMakeCCompilerId.c	/^# define const$/;"	d	file:
construct	Include/WAVM/Inline/OptionalStorage.h	/^		template<typename... Args> void construct(Args&&... args)$/;"	f	struct:WAVM::OptionalStorage
contains	Include/WAVM/Inline/ConcurrentHashMap.h	/^		bool contains(const Key& key) const$/;"	f	struct:WAVM::ConcurrentHashMap
contains	Include/WAVM/Inline/DenseStaticIntSet.h	/^		inline bool contains(Index index) const$/;"	f	struct:WAVM::DenseStaticIntSet
contains	Include/WAVM/Inline/HashMapImpl.h	/^template<HASHMAP_PARAMETERS> bool HashMap<HASHMAP_ARGUMENTS>::contains(const Key& key) const$/;"	f	class:HashMap
contains	Include/WAVM/Inline/HashSetImpl.h	/^bool HashSet<Element, ElementHashPolicy>::contains(const Element& element) const$/;"	f	class:HashSet
contains	Include/WAVM/Inline/IndexMap.h	/^		bool contains(Index index) const$/;"	f	struct:WAVM::IndexMap
contents	Include/WAVM/Inline/OptionalStorage.h	/^			Contents contents;$/;"	m	union:WAVM::OptionalStorage::__anon31
contents	Include/WAVM/Inline/OptionalStorage.h	/^			Contents contents;$/;"	m	union:WAVM::OptionalStorage::__anon32
context	Include/WAVM/Runtime/RuntimeData.h	/^		context = 6,$/;"	m	class:WAVM::Runtime::ObjectKind
context	Lib/LLVMJIT/EmitFunction.cpp	/^	EmitFunctionContext& context;$/;"	m	struct:UnreachableOpVisitor	file:
context	Lib/ThreadTest/ThreadTest.cpp	/^	GCPointer<Context> context;$/;"	m	struct:Thread	file:
context	Lib/WASI/WASI.cpp	/^		GCPointer<Context> context;$/;"	m	struct:WAVM::WASI::Process	file:
context	Test/Benchmarks/invoke-bench.cpp	/^	Context* context = nullptr;$/;"	m	struct:ThreadArgs	file:
context	Test/RunTestScript/RunTestScript.cpp	/^	GCPointer<Context> context;$/;"	m	struct:TestScriptState	file:
contextPointerVariable	Lib/LLVMJIT/EmitContext.h	/^		llvm::Value* contextPointerVariable;$/;"	m	struct:WAVM::LLVMJIT::EmitContext
contextRuntimeData	Test/Benchmarks/invoke-bench.cpp	/^	ContextRuntimeData* contextRuntimeData;$/;"	m	struct:ContextAndResult	file:
contextRuntimeDataAlignment	Include/WAVM/Runtime/RuntimeData.h	/^		contextRuntimeDataAlignment = 4096$/;"	e	enum:WAVM::Runtime::__anon16
contexts	Include/WAVM/Runtime/RuntimeData.h	/^		ContextRuntimeData contexts[1]; \/\/ Actually [maxContexts], but at least MSVC doesn't allow$/;"	m	struct:WAVM::Runtime::CompartmentRuntimeData
contexts	Lib/Runtime/RuntimePrivate.h	/^		IndexMap<Uptr, Context*> contexts;$/;"	m	struct:WAVM::Runtime::Compartment
controlStack	Include/WAVM/Emscripten/gas-visit-context.h	/^    std::vector<ControlContext> controlStack;$/;"	m	struct:GasVisitor
controlStack	Include/WAVM/Emscripten/insert-imported-context.h	/^    std::vector<ControlContext> controlStack;$/;"	m	struct:ImportFunctionInsertVisitor
controlStack	Lib/IR/Validate.cpp	/^	std::vector<ControlContext> controlStack;$/;"	m	struct:FunctionValidationContext	file:
controlStack	Lib/LLVMJIT/EmitFunctionContext.h	/^		std::vector<ControlContext> controlStack;$/;"	m	struct:WAVM::LLVMJIT::EmitFunctionContext
controlStack	Lib/WASTPrint/Print.cpp	/^	std::vector<ControlContext> controlStack;$/;"	m	struct:FunctionPrintContext	file:
convertToDFA	Lib/NFA/NFA.cpp	/^static std::vector<DFAState> convertToDFA(Builder* builder)$/;"	f	file:
copyFrom	Include/WAVM/Inline/HashTableImpl.h	/^template<HASHTABLE_PARAMETERS> void HashTable<HASHTABLE_ARGUMENTS>::copyFrom(const HashTable& copy)$/;"	f	class:HashTable
copyright	ThirdParty/libunwind/docs/conf.py	/^copyright = u'2011-2017, LLVM Project'$/;"	v
count	ThirdParty/libunwind/src/config.h	/^    static const size_t count =$/;"	m	struct:check_fit::blk_count
countLeadingZeroes	Include/WAVM/Platform/Intrinsic.h	/^	inline U32 countLeadingZeroes(U32 value)$/;"	f	namespace:WAVM::Platform
countLeadingZeroes	Include/WAVM/Platform/Intrinsic.h	/^	inline U64 countLeadingZeroes(U64 value)$/;"	f	namespace:WAVM::Platform
countTrailingZeroes	Include/WAVM/Platform/Intrinsic.h	/^	inline U32 countTrailingZeroes(U32 value)$/;"	f	namespace:WAVM::Platform
countTrailingZeroes	Include/WAVM/Platform/Intrinsic.h	/^	inline U64 countTrailingZeroes(U64 value)$/;"	f	namespace:WAVM::Platform
cpuType	ThirdParty/libunwind/src/AddressSpace.hpp	/^  cpu_type_t cpuType;$/;"	m	struct:libunwind::unw_addr_space
createAlways	Include/WAVM/Platform/File.h	/^		createAlways,$/;"	m	class:WAVM::Platform::FileCreateMode
createBuilder	Lib/NFA/NFA.cpp	/^Builder* NFA::createBuilder()$/;"	f	class:NFA
createCompartment	Lib/Runtime/Compartment.cpp	/^Compartment* Runtime::createCompartment() { return new Compartment; }$/;"	f	class:Runtime
createContext	Lib/Runtime/Context.cpp	/^Context* Runtime::createContext(Compartment* compartment)$/;"	f	class:Runtime
createException	Lib/Runtime/Exception.cpp	/^Exception* Runtime::createException(ExceptionType* type,$/;"	f	class:Runtime
createExceptionType	Lib/Runtime/Exception.cpp	/^ExceptionType* Runtime::createExceptionType(Compartment* compartment,$/;"	f	class:Runtime
createFCmpWithWorkaround	Lib/LLVMJIT/EmitWorkarounds.h	/^inline llvm::Value* createFCmpWithWorkaround(llvm::IRBuilder<>& irBuilder,$/;"	f
createGlobal	Lib/Runtime/Global.cpp	/^Global* Runtime::createGlobal(Compartment* compartment, GlobalType type)$/;"	f	class:Runtime
createICmpWithWorkaround	Lib/LLVMJIT/EmitWorkarounds.h	/^inline llvm::Value* createICmpWithWorkaround(llvm::IRBuilder<>& irBuilder,$/;"	f
createImport	Lib/WASTParse/ParseModule.cpp	/^static Uptr createImport(CursorState* cursor,$/;"	f	file:
createImportedConstant	Lib/LLVMJIT/EmitModule.cpp	/^static llvm::Constant* createImportedConstant(llvm::Module& llvmModule, llvm::Twine externalName)$/;"	f	file:
createMemory	Lib/Runtime/Memory.cpp	/^Memory* Runtime::createMemory(Compartment* compartment,$/;"	f	class:Runtime
createMemoryImpl	Lib/Runtime/Memory.cpp	/^static Memory* createMemoryImpl(Compartment* compartment,$/;"	f	file:
createNFA	Lib/RegExp/RegExp.cpp	/^static void createNFA(NFA::Builder* nfaBuilder,$/;"	f	file:
createNew	Include/WAVM/Platform/File.h	/^		createNew,$/;"	m	class:WAVM::Platform::FileCreateMode
createPHIs	Lib/LLVMJIT/EmitFunction.cpp	/^PHIVector EmitFunctionContext::createPHIs(llvm::BasicBlock* basicBlock, IR::TypeTuple type)$/;"	f	class:EmitFunctionContext
createTable	Lib/Runtime/Table.cpp	/^Table* Runtime::createTable(Compartment* compartment, IR::TableType type, std::string&& debugName)$/;"	f	class:Runtime
createTableImpl	Lib/Runtime/Table.cpp	/^static Table* createTableImpl(Compartment* compartment, IR::TableType type, std::string&& debugName)$/;"	f	file:
createThread	Lib/Platform/POSIX/Thread.cpp	/^Platform::Thread* Platform::createThread(Uptr numStackBytes,$/;"	f	class:Platform
createThread	Lib/Platform/Windows/Thread.cpp	/^Platform::Thread* Platform::createThread(Uptr numStackBytes,$/;"	f	class:Platform
createThreadEntry	Lib/Platform/POSIX/Thread.cpp	/^NO_ASAN static void* createThreadEntry(void* argsVoid)$/;"	f	file:
createThreadEntry	Lib/Platform/Windows/Thread.cpp	/^static DWORD WINAPI createThreadEntry(void* argsVoid)$/;"	f	file:
createTokenSeparatorPeekState	Lib/WASTParse/Lexer.cpp	/^static NFA::StateIndex createTokenSeparatorPeekState(NFA::Builder* builder,$/;"	f	file:
criticalSection	Include/WAVM/Platform/Mutex.h	/^		} criticalSection;$/;"	m	struct:WAVM::Platform::Mutex	typeref:struct:WAVM::Platform::Mutex::CriticalSection
cs	Lib/Platform/Windows/WindowsPrivate.h	/^	U16 cs;$/;"	m	struct:ExecutionContext
cur	Include/WAVM/Platform/File.h	/^		cur = 1,$/;"	m	class:WAVM::Platform::FileSeekOrigin
currentLocale	Lib/Emscripten/Emscripten.cpp	/^static U32 currentLocale = 0;$/;"	v	file:
currentThread	Lib/ThreadTest/ThreadTest.cpp	/^thread_local IntrusiveSharedPtr<Thread> currentThread = nullptr;$/;"	v
currentVersion	Lib/WASM/WASMSerialization.cpp	/^	currentVersion = 1$/;"	e	enum:__anon41	file:
cxaBeginCatchFunction	Lib/LLVMJIT/EmitModuleContext.h	/^		llvm::Function* cxaBeginCatchFunction = nullptr;$/;"	m	struct:WAVM::LLVMJIT::EmitModuleContext
cxaEndCatchFunction	Lib/LLVMJIT/EmitModuleContext.h	/^		llvm::Function* cxaEndCatchFunction = nullptr;$/;"	m	struct:WAVM::LLVMJIT::EmitModuleContext
d	ThirdParty/dtoa/dtoa.c	/^typedef union { double d; ULong L[2]; } U;$/;"	m	union:__anon53	file:
d0	ThirdParty/dtoa/dtoa.c	/^#undef d0$/;"	d	file:
d1	ThirdParty/dtoa/dtoa.c	/^#undef d1$/;"	d	file:
d_ino	Lib/WASI/WASIDefinitions.h	/^	__wasi_inode_t d_ino;$/;"	m	struct:__wasi_dirent_t
d_namlen	Lib/WASI/WASIDefinitions.h	/^	uint32_t d_namlen;$/;"	m	struct:__wasi_dirent_t
d_next	Lib/WASI/WASIDefinitions.h	/^	__wasi_dircookie_t d_next;$/;"	m	struct:__wasi_dirent_t
d_type	Lib/WASI/WASIDefinitions.h	/^	__wasi_filetype_t d_type;$/;"	m	struct:__wasi_dirent_t
data	Include/WAVM/IR/Module.h	/^		std::vector<U8> data;$/;"	m	struct:WAVM::IR::Opcode::DataSegment
data	Include/WAVM/IR/Module.h	/^		std::vector<U8> data;$/;"	m	struct:WAVM::IR::Opcode::Elem::UserSection
data	Include/WAVM/IR/Types.h	/^		const ValueType* data() const { return impl->elems; }$/;"	f	struct:WAVM::IR::ValueType::TypeTuple
data	Include/WAVM/Platform/Event.h	/^			Uptr data[12];$/;"	m	struct:WAVM::Platform::Event::PthreadCond
data	Include/WAVM/Platform/Event.h	/^			Uptr data[5];$/;"	m	struct:WAVM::Platform::Event::PthreadMutex
data	Include/WAVM/Platform/Event.h	/^			Uptr data[6];$/;"	m	struct:WAVM::Platform::Event::PthreadCond
data	Include/WAVM/Platform/Event.h	/^			Uptr data[6];$/;"	m	struct:WAVM::Platform::Event::PthreadMutex
data	Include/WAVM/Platform/Event.h	/^			Uptr data[8];$/;"	m	struct:WAVM::Platform::Event::PthreadMutex
data	Include/WAVM/Platform/Mutex.h	/^			Uptr data[5];$/;"	m	struct:WAVM::Platform::Mutex::CriticalSection
data	Include/WAVM/Platform/Mutex.h	/^			Uptr data[5];$/;"	m	struct:WAVM::Platform::Mutex::PthreadMutex
data	Include/WAVM/Platform/Mutex.h	/^			Uptr data[6];$/;"	m	struct:WAVM::Platform::Mutex::CriticalSection
data	Include/WAVM/Platform/Mutex.h	/^			Uptr data[6];$/;"	m	struct:WAVM::Platform::Mutex::PthreadMutex
data	Include/WAVM/Platform/Mutex.h	/^			Uptr data[8];$/;"	m	struct:WAVM::Platform::Mutex::PthreadMutex
data	Lib/WASM/WASMSerialization.cpp	/^	data,$/;"	m	class:SectionType	file:
data	ThirdParty/libunwind/include/libunwind.h	/^  uint64_t data[_LIBUNWIND_CONTEXT_SIZE];$/;"	m	struct:unw_context_t
data	ThirdParty/libunwind/include/libunwind.h	/^  uint64_t data[_LIBUNWIND_CURSOR_SIZE];$/;"	m	struct:unw_cursor_t
data	ThirdParty/libunwind/src/UnwindCursor.hpp	/^  uint32_t data;$/;"	m	struct:libunwind::EHABIIndexEntry
dataAddress	ThirdParty/libunwind/src/UnwindCursor.hpp	/^  typename A::pint_t dataAddress() {$/;"	f	struct:libunwind::EHABISectionIterator
dataAlignFactor	ThirdParty/libunwind/src/DwarfParser.hpp	/^    int       dataAlignFactor;$/;"	m	struct:libunwind::CFI_Parser::CIE_Info
dataCount	Lib/WASM/WASMSerialization.cpp	/^	dataCount,$/;"	m	class:SectionType	file:
dataNameToIndexMap	Lib/WASTParse/Parse.h	/^		NameToIndexMap dataNameToIndexMap;$/;"	m	struct:WAVM::WAST::ModuleState
dataSegment	Lib/IR/DisassemblyNames.cpp	/^	dataSegment = 9,$/;"	m	class:NameSubsectionType	file:
dataSegmentIndex	Include/WAVM/IR/Operators.h	/^		Uptr dataSegmentIndex;$/;"	m	struct:WAVM::IR::DataSegmentAndMemImm
dataSegmentIndex	Include/WAVM/IR/Operators.h	/^		Uptr dataSegmentIndex;$/;"	m	struct:WAVM::IR::DataSegmentImm
dataSegments	Include/WAVM/IR/Module.h	/^		std::vector<DataSegment> dataSegments;$/;"	m	struct:WAVM::IR::Opcode::Elem::Module
dataSegments	Include/WAVM/IR/Module.h	/^		std::vector<std::string> dataSegments;$/;"	m	struct:WAVM::IR::Opcode::Elem::DisassemblyNames
data_drop	Lib/LLVMJIT/EmitMem.cpp	/^void EmitFunctionContext::data_drop(DataSegmentImm imm)$/;"	f	class:EmitFunctionContext
dbase	ThirdParty/libunwind/include/unwind.h	/^  uintptr_t dbase;$/;"	m	struct:dwarf_eh_bases
debug	Include/WAVM/Logging/Logging.h	/^		debug,$/;"	e	enum:WAVM::Log::Category
debugName	Include/WAVM/Runtime/RuntimeData.h	/^		std::string debugName;$/;"	m	struct:WAVM::Runtime::FunctionMutableData
debugName	Lib/Runtime/RuntimePrivate.h	/^		const std::string debugName;$/;"	m	struct:WAVM::Runtime::ModuleInstance
debugName	Lib/Runtime/RuntimePrivate.h	/^		std::string debugName;$/;"	m	struct:WAVM::Runtime::ExceptionType
debugName	Lib/Runtime/RuntimePrivate.h	/^		std::string debugName;$/;"	m	struct:WAVM::Runtime::Memory
debugName	Lib/Runtime/RuntimePrivate.h	/^		std::string debugName;$/;"	m	struct:WAVM::Runtime::Table
decodeEHHdr	ThirdParty/libunwind/src/EHHeaderParser.hpp	/^void EHHeaderParser<A>::decodeEHHdr(A &addressSpace, pint_t ehHdrStart,$/;"	f	class:libunwind::EHHeaderParser
decodeFDE	ThirdParty/libunwind/src/DwarfParser.hpp	/^const char *CFI_Parser<A>::decodeFDE(A &addressSpace, pint_t fdeStart,$/;"	f	class:libunwind::CFI_Parser
decodeOp	Include/WAVM/IR/Operators.h	/^		template<typename Visitor> typename Visitor::Result decodeOp(Visitor& visitor)$/;"	f	struct:WAVM::IR::OperatorDecoderStream
decodeOpWithoutConsume	Include/WAVM/IR/Operators.h	/^		template<typename Visitor> typename Visitor::Result decodeOpWithoutConsume(Visitor& visitor)$/;"	f	struct:WAVM::IR::OperatorDecoderStream
decodeTableEntry	ThirdParty/libunwind/src/EHHeaderParser.hpp	/^bool EHHeaderParser<A>::decodeTableEntry($/;"	f	class:libunwind::EHHeaderParser
decodeUTF16CodePoint	Include/WAVM/Inline/Unicode.h	/^	inline bool decodeUTF16CodePoint(const U16*& nextChar16,$/;"	f	namespace:WAVM::Unicode
decodeUTF8CodePoint	Include/WAVM/Inline/Unicode.h	/^	inline bool decodeUTF8CodePoint(const U8*& nextChar, const U8* endChar, U32& outCodePoint)$/;"	f	namespace:WAVM::Unicode
decodeValueType	Lib/WASM/WASMSerialization.cpp	/^	static ValueType decodeValueType(Iptr encodedValueType)$/;"	f	namespace:WAVM::IR
decode_eht_entry	ThirdParty/libunwind/src/Unwind-EHABI.cpp	/^decode_eht_entry(const uint32_t* data, size_t* off, size_t* len) {$/;"	f
decommitVirtualPages	Lib/Platform/POSIX/Memory.cpp	/^void Platform::decommitVirtualPages(U8* baseVirtualAddress, Uptr numPages)$/;"	f	class:Platform
decommitVirtualPages	Lib/Platform/Windows/Memory.cpp	/^void Platform::decommitVirtualPages(U8* baseVirtualAddress, Uptr numPages)$/;"	f	class:Platform
defaultMemoryOffset	Lib/LLVMJIT/EmitContext.h	/^		llvm::Constant* defaultMemoryOffset;$/;"	m	struct:WAVM::LLVMJIT::EmitContext
defaultMemoryOffset	Lib/LLVMJIT/EmitModuleContext.h	/^		llvm::Constant* defaultMemoryOffset;$/;"	m	struct:WAVM::LLVMJIT::EmitModuleContext
defaultTableOffset	Lib/LLVMJIT/EmitModuleContext.h	/^		llvm::Constant* defaultTableOffset;$/;"	m	struct:WAVM::LLVMJIT::EmitModuleContext
defaultTargetDepth	Include/WAVM/IR/Operators.h	/^		Uptr defaultTargetDepth;$/;"	m	struct:WAVM::IR::BranchTableImm
defs	Include/WAVM/IR/Module.h	/^		std::vector<Definition> defs;$/;"	m	struct:WAVM::IR::Opcode::Elem::IndexSpace
deinit	Lib/Platform/POSIX/Thread.cpp	/^void SigAltStack::deinit()$/;"	f	class:SigAltStack
denominator	Test/fuzz/fuzz-compile-model.cpp	/^	U64 denominator;$/;"	m	struct:RandomStream	file:
denormalExponent	Include/WAVM/Inline/FloatComponents.h	/^			denormalExponent = -1023,$/;"	m	struct:WAVM::FloatComponents	typeref:enum:WAVM::FloatComponents::
denormalExponent	Include/WAVM/Inline/FloatComponents.h	/^			denormalExponent = -127,$/;"	m	struct:FloatComponents	typeref:enum:FloatComponents::
deregisterEHFrames	Lib/Platform/POSIX/Signal.cpp	/^void Platform::deregisterEHFrames(const U8* imageBase, const U8* ehFrames, Uptr numBytes)$/;"	f	class:Platform
deregisterEHFrames	Lib/Platform/Windows/Signal.cpp	/^void Platform::deregisterEHFrames(const U8* imageBase, const U8* ehFrames, Uptr numBytes)$/;"	f	class:Platform
describe	Include/WAVM/WASTParse/WASTParse.h	/^		std::string describe(U32 spacesPerTab = 4) const$/;"	f	struct:WAVM::WAST::TextFileLocus
describeCallStack	Lib/Runtime/Exception.cpp	/^std::vector<std::string> Runtime::describeCallStack(const Platform::CallStack& callStack)$/;"	f	class:Runtime
describeException	Lib/Runtime/Exception.cpp	/^std::string Runtime::describeException(const Exception* exception)$/;"	f	class:Runtime
describeExceptionType	Lib/Runtime/Exception.cpp	/^std::string Runtime::describeExceptionType(const ExceptionType* type)$/;"	f	class:Runtime
describeExpectedTrapType	Test/RunTestScript/RunTestScript.cpp	/^static std::string describeExpectedTrapType(WAST::ExpectedTrapType expectedType)$/;"	f	file:
describeImm	Include/WAVM/IR/OperatorPrinter.h	/^		std::string describeImm(AtomicLoadOrStoreImm<naturalAlignmentLog2> imm)$/;"	f	struct:WAVM::IR::OperatorPrinter
describeImm	Include/WAVM/IR/OperatorPrinter.h	/^		std::string describeImm(BranchImm imm) { return " " + std::to_string(imm.targetDepth); }$/;"	f	struct:WAVM::IR::OperatorPrinter
describeImm	Include/WAVM/IR/OperatorPrinter.h	/^		std::string describeImm(BranchTableImm imm)$/;"	f	struct:WAVM::IR::OperatorPrinter
describeImm	Include/WAVM/IR/OperatorPrinter.h	/^		std::string describeImm(CallIndirectImm imm)$/;"	f	struct:WAVM::IR::OperatorPrinter
describeImm	Include/WAVM/IR/OperatorPrinter.h	/^		std::string describeImm(ControlStructureImm imm)$/;"	f	struct:WAVM::IR::OperatorPrinter
describeImm	Include/WAVM/IR/OperatorPrinter.h	/^		std::string describeImm(DataSegmentAndMemImm imm)$/;"	f	struct:WAVM::IR::OperatorPrinter
describeImm	Include/WAVM/IR/OperatorPrinter.h	/^		std::string describeImm(DataSegmentImm imm)$/;"	f	struct:WAVM::IR::OperatorPrinter
describeImm	Include/WAVM/IR/OperatorPrinter.h	/^		std::string describeImm(ElemSegmentAndTableImm imm)$/;"	f	struct:WAVM::IR::OperatorPrinter
describeImm	Include/WAVM/IR/OperatorPrinter.h	/^		std::string describeImm(ElemSegmentImm imm)$/;"	f	struct:WAVM::IR::OperatorPrinter
describeImm	Include/WAVM/IR/OperatorPrinter.h	/^		std::string describeImm(ExceptionTypeImm) { return ""; }$/;"	f	struct:WAVM::IR::OperatorPrinter
describeImm	Include/WAVM/IR/OperatorPrinter.h	/^		std::string describeImm(FunctionImm imm)$/;"	f	struct:WAVM::IR::OperatorPrinter
describeImm	Include/WAVM/IR/OperatorPrinter.h	/^		std::string describeImm(LoadOrStoreImm<naturalAlignmentLog2> imm)$/;"	f	struct:WAVM::IR::OperatorPrinter
describeImm	Include/WAVM/IR/OperatorPrinter.h	/^		std::string describeImm(MemoryCopyImm imm)$/;"	f	struct:WAVM::IR::OperatorPrinter
describeImm	Include/WAVM/IR/OperatorPrinter.h	/^		std::string describeImm(MemoryImm imm) { return " " + std::to_string(imm.memoryIndex); }$/;"	f	struct:WAVM::IR::OperatorPrinter
describeImm	Include/WAVM/IR/OperatorPrinter.h	/^		std::string describeImm(NoImm) { return ""; }$/;"	f	struct:WAVM::IR::OperatorPrinter
describeImm	Include/WAVM/IR/OperatorPrinter.h	/^		std::string describeImm(RethrowImm) { return ""; }$/;"	f	struct:WAVM::IR::OperatorPrinter
describeImm	Include/WAVM/IR/OperatorPrinter.h	/^		std::string describeImm(TableCopyImm imm)$/;"	f	struct:WAVM::IR::OperatorPrinter
describeImm	Include/WAVM/IR/OperatorPrinter.h	/^		std::string describeImm(TableImm imm) { return " " + std::to_string(imm.tableIndex); }$/;"	f	struct:WAVM::IR::OperatorPrinter
describeImm	Include/WAVM/IR/OperatorPrinter.h	/^		template<Uptr numLanes> std::string describeImm(LaneIndexImm<numLanes> imm)$/;"	f	struct:WAVM::IR::OperatorPrinter
describeImm	Include/WAVM/IR/OperatorPrinter.h	/^		template<Uptr numLanes> std::string describeImm(ShuffleImm<numLanes> imm)$/;"	f	struct:WAVM::IR::OperatorPrinter
describeImm	Include/WAVM/IR/OperatorPrinter.h	/^		template<bool isGlobal> std::string describeImm(GetOrSetVariableImm<isGlobal> imm)$/;"	f	struct:WAVM::IR::OperatorPrinter
describeImm	Include/WAVM/IR/OperatorPrinter.h	/^		template<typename NativeValue> std::string describeImm(LiteralImm<NativeValue> imm)$/;"	f	struct:WAVM::IR::OperatorPrinter
describeInstructionPointer	Lib/Platform/POSIX/Diagnostics.cpp	/^bool Platform::describeInstructionPointer(Uptr ip, std::string& outDescription)$/;"	f	class:Platform
describeInstructionPointer	Lib/Platform/Windows/Diagnostics.cpp	/^bool Platform::describeInstructionPointer(Uptr ip, std::string& outDescription)$/;"	f	class:Platform
describeInstructionPointer	Lib/Runtime/Exception.cpp	/^bool Runtime::describeInstructionPointer(Uptr ip, std::string& outDescription)$/;"	f	class:Runtime
describeToken	Lib/WASTParse/Lexer.cpp	/^const char* WAST::describeToken(TokenType tokenType)$/;"	f	class:WAST
deserializeNameMap	Lib/IR/DisassemblyNames.cpp	/^static void deserializeNameMap(InputStream& stream,$/;"	f	class:NameSubsectionType	file:
deserializeNameSubsection	Lib/IR/DisassemblyNames.cpp	/^static void deserializeNameSubsection(const Module& module,$/;"	f	class:NameSubsectionType	file:
destMemoryIndex	Include/WAVM/IR/Operators.h	/^		Uptr destMemoryIndex;$/;"	m	struct:WAVM::IR::MemoryCopyImm
destTableIndex	Include/WAVM/IR/Operators.h	/^		Uptr destTableIndex;$/;"	m	struct:WAVM::IR::TableCopyImm
destroyException	Lib/Runtime/Exception.cpp	/^void Runtime::destroyException(Exception* exception)$/;"	f	class:Runtime
destruct	Include/WAVM/Inline/HashTableImpl.h	/^template<HASHTABLE_PARAMETERS> void HashTable<HASHTABLE_ARGUMENTS>::destruct()$/;"	f	class:HashTable
destruct	Include/WAVM/Inline/OptionalStorage.h	/^		void destruct() { contents.~Contents(); }$/;"	f	struct:WAVM::OptionalStorage
destruct	Include/WAVM/Inline/OptionalStorage.h	/^		void destruct() {}$/;"	f	struct:WAVM::OptionalStorage
detachThread	Lib/Platform/POSIX/Thread.cpp	/^void Platform::detachThread(Thread* thread)$/;"	f	class:Platform
detachThread	Lib/Platform/Windows/Thread.cpp	/^void Platform::detachThread(Thread* thread)$/;"	f	class:Platform
diBuilder	Lib/LLVMJIT/EmitModuleContext.h	/^		llvm::DIBuilder diBuilder;$/;"	m	struct:WAVM::LLVMJIT::EmitModuleContext
diCompileUnit	Lib/LLVMJIT/EmitModuleContext.h	/^		llvm::DICompileUnit* diCompileUnit;$/;"	m	struct:WAVM::LLVMJIT::EmitModuleContext
diFunction	Lib/LLVMJIT/EmitFunctionContext.h	/^		llvm::DISubprogram* diFunction;$/;"	m	struct:WAVM::LLVMJIT::EmitFunctionContext
diModuleScope	Lib/LLVMJIT/EmitModuleContext.h	/^		llvm::DIFile* diModuleScope;$/;"	m	struct:WAVM::LLVMJIT::EmitModuleContext
diValueTypes	Lib/LLVMJIT/EmitModuleContext.h	/^		llvm::DIType* diValueTypes[(Uptr)IR::ValueType::num];$/;"	m	struct:WAVM::LLVMJIT::EmitModuleContext
difference_type	ThirdParty/libunwind/src/UnwindCursor.hpp	/^  typedef size_t difference_type;$/;"	t	struct:libunwind::EHABISectionIterator
digest	Include/WAVM/Inline/xxhash/xxhash.h	/^typedef struct { unsigned char digest[4]; } XXH32_canonical_t;$/;"	m	struct:__anon34
digest	Include/WAVM/Inline/xxhash/xxhash.h	/^typedef struct { unsigned char digest[8]; } XXH64_canonical_t;$/;"	m	struct:__anon35
dir	Lib/WASI/WASIDefinitions.h	/^		} dir;$/;"	m	union:__wasi_prestat_t::__wasi_prestat_u	typeref:struct:__wasi_prestat_t::__wasi_prestat_u::__wasi_prestat_u_dir_t
disassembleFunction	Lib/LLVMJIT/LLVMModule.cpp	/^static void disassembleFunction(U8* bytes, Uptr numBytes)$/;"	f	file:
disassemblyNames	Lib/WASTParse/Parse.h	/^		IR::DisassemblyNames disassemblyNames;$/;"	m	struct:WAVM::WAST::ModuleState
divideAndRoundUp	Include/WAVM/Inline/HashTable.h	/^		static Uptr divideAndRoundUp(Uptr numerator, Uptr denominator)$/;"	f	struct:WAVM::DefaultHashTableAllocPolicy
does_fit	ThirdParty/libunwind/src/config.h	/^  static const bool does_fit =$/;"	m	struct:check_fit
dp0	ThirdParty/dtoa/dtoa.c	/^BCinfo { int dp0, dp1, dplen, dsign, e0, inexact, nd, nd0, rounding, scale, uflchk; };$/;"	m	struct:BCinfo	file:
dp1	ThirdParty/dtoa/dtoa.c	/^BCinfo { int dp0, dp1, dplen, dsign, e0, inexact, nd, nd0, rounding, scale, uflchk; };$/;"	m	struct:BCinfo	file:
dplen	ThirdParty/dtoa/dtoa.c	/^BCinfo { int dp0, dp1, dplen, dsign, e0, inexact, nd, nd0, rounding, scale, uflchk; };$/;"	m	struct:BCinfo	file:
drop	Include/WAVM/Emscripten/gas-visit-context.h	/^    Result drop(NoImm imm)$/;"	f	struct:GasVisitor
drop	Lib/IR/Validate.cpp	/^	void drop(NoImm) { popAndValidateOperand("drop", ValueType::any); }$/;"	f	struct:FunctionValidationContext
drop	Lib/LLVMJIT/EmitCore.cpp	/^void EmitFunctionContext::drop(IR::NoImm) { stack.pop_back(); }$/;"	f	class:EmitFunctionContext
drop	Lib/WASTPrint/Print.cpp	/^	void drop(NoImm) { string += "\\ndrop"; }$/;"	f	struct:FunctionPrintContext
dsign	ThirdParty/dtoa/dtoa.c	/^BCinfo { int dp0, dp1, dplen, dsign, e0, inexact, nd, nd0, rounding, scale, uflchk; };$/;"	m	struct:BCinfo	file:
dso_base	ThirdParty/libunwind/src/AddressSpace.hpp	/^  uintptr_t       dso_base;$/;"	m	struct:libunwind::UnwindInfoSections
dtoa	Lib/WASTParse/ParseNumbers.cpp	/^#define dtoa /;"	d	file:
dtoa	Lib/WASTParse/ParseNumbers.cpp	/^#undef dtoa$/;"	d	file:
dummyReferenceAtomics	Lib/Runtime/Atomics.cpp	/^void Runtime::dummyReferenceAtomics()$/;"	f	class:Runtime
dummyReferenceWAVMIntrinsics	Lib/Runtime/WAVMIntrinsics.cpp	/^void Runtime::dummyReferenceWAVMIntrinsics()$/;"	f	class:Runtime
dummy_func	Examples/gas.cpp	/^IMPORT void dummy_func() {$/;"	f
dumpCommandModules	Test/DumpTestModules/DumpTestModules.cpp	/^static void dumpCommandModules(const Command* command, const char* outputDir, DumpFormat dumpFormat)$/;"	f	file:
dumpDFAGraphViz	Lib/NFA/NFA.cpp	/^std::string NFA::Machine::dumpDFAGraphViz() const$/;"	f	class:NFA::Machine
dumpErrorCallStack	Lib/Platform/POSIX/Diagnostics.cpp	/^void Platform::dumpErrorCallStack(Uptr numOmittedFramesFromTop)$/;"	f	class:Platform
dumpErrorCallStack	Lib/Platform/Windows/Diagnostics.cpp	/^static void dumpErrorCallStack(Uptr numOmittedFramesFromTop)$/;"	f	file:
dumpHashMapSpaceAnalysis	Lib/WASTParse/ParseModule.cpp	/^template<typename Map> void dumpHashMapSpaceAnalysis(const Map& map, const char* description)$/;"	f
dumpModule	Test/DumpTestModules/DumpTestModules.cpp	/^static void dumpModule(const Module& module, const char* outputDir, DumpFormat dumpFormat)$/;"	f	file:
dumpNFAGraphViz	Lib/NFA/NFA.cpp	/^std::string NFA::dumpNFAGraphViz(const Builder* builder)$/;"	f	class:NFA
dumpWASM	Test/DumpTestModules/DumpTestModules.cpp	/^static void dumpWASM(const U8* wasmBytes, Uptr numBytes, const char* outputDir)$/;"	f	file:
dumpWAST	Test/DumpTestModules/DumpTestModules.cpp	/^static void dumpWAST(const std::string& wastString, const char* outputDir)$/;"	f	file:
dval	ThirdParty/dtoa/dtoa.c	/^#define dval(/;"	d	file:
dwarfEncoding	ThirdParty/libunwind/src/UnwindCursor.hpp	/^  compact_unwind_encoding_t dwarfEncoding() const {$/;"	f	class:libunwind::UnwindCursor
dwarfEncoding	ThirdParty/libunwind/src/UnwindCursor.hpp	/^  compact_unwind_encoding_t dwarfEncoding(Registers_arm &) const {$/;"	f	class:libunwind::UnwindCursor
dwarfEncoding	ThirdParty/libunwind/src/UnwindCursor.hpp	/^  compact_unwind_encoding_t dwarfEncoding(Registers_arm64 &) const {$/;"	f	class:libunwind::UnwindCursor
dwarfEncoding	ThirdParty/libunwind/src/UnwindCursor.hpp	/^  compact_unwind_encoding_t dwarfEncoding(Registers_mips_newabi &) const {$/;"	f	class:libunwind::UnwindCursor
dwarfEncoding	ThirdParty/libunwind/src/UnwindCursor.hpp	/^  compact_unwind_encoding_t dwarfEncoding(Registers_mips_o32 &) const {$/;"	f	class:libunwind::UnwindCursor
dwarfEncoding	ThirdParty/libunwind/src/UnwindCursor.hpp	/^  compact_unwind_encoding_t dwarfEncoding(Registers_or1k &) const {$/;"	f	class:libunwind::UnwindCursor
dwarfEncoding	ThirdParty/libunwind/src/UnwindCursor.hpp	/^  compact_unwind_encoding_t dwarfEncoding(Registers_ppc &) const {$/;"	f	class:libunwind::UnwindCursor
dwarfEncoding	ThirdParty/libunwind/src/UnwindCursor.hpp	/^  compact_unwind_encoding_t dwarfEncoding(Registers_ppc64 &) const {$/;"	f	class:libunwind::UnwindCursor
dwarfEncoding	ThirdParty/libunwind/src/UnwindCursor.hpp	/^  compact_unwind_encoding_t dwarfEncoding(Registers_x86 &) const {$/;"	f	class:libunwind::UnwindCursor
dwarfEncoding	ThirdParty/libunwind/src/UnwindCursor.hpp	/^  compact_unwind_encoding_t dwarfEncoding(Registers_x86_64 &) const {$/;"	f	class:libunwind::UnwindCursor
dwarf_eh_bases	ThirdParty/libunwind/include/unwind.h	/^struct dwarf_eh_bases {$/;"	s
dwarf_index_section	ThirdParty/libunwind/src/AddressSpace.hpp	/^  uintptr_t       dwarf_index_section;$/;"	m	struct:libunwind::UnwindInfoSections
dwarf_index_section_length	ThirdParty/libunwind/src/AddressSpace.hpp	/^  uintptr_t       dwarf_index_section_length;$/;"	m	struct:libunwind::UnwindInfoSections
dwarf_section	ThirdParty/libunwind/src/AddressSpace.hpp	/^    const void*                 dwarf_section;$/;"	m	struct:dyld_unwind_sections
dwarf_section	ThirdParty/libunwind/src/AddressSpace.hpp	/^  uintptr_t       dwarf_section;$/;"	m	struct:libunwind::UnwindInfoSections
dwarf_section_length	ThirdParty/libunwind/src/AddressSpace.hpp	/^    uintptr_t                   dwarf_section_length;$/;"	m	struct:dyld_unwind_sections
dwarf_section_length	ThirdParty/libunwind/src/AddressSpace.hpp	/^  uintptr_t       dwarf_section_length;$/;"	m	struct:libunwind::UnwindInfoSections
dyldUnloadHook	ThirdParty/libunwind/src/UnwindCursor.hpp	/^void DwarfFDECache<A>::dyldUnloadHook(const struct mach_header *mh, intptr_t ) {$/;"	f	class:libunwind::DwarfFDECache
dyld_unwind_sections	ThirdParty/libunwind/src/AddressSpace.hpp	/^  struct dyld_unwind_sections$/;"	s
dynamicAlloc	Lib/Emscripten/Emscripten.cpp	/^static U32 dynamicAlloc(Emscripten::Instance* instance, U32 numBytes)$/;"	f	file:
e0	ThirdParty/dtoa/dtoa.c	/^BCinfo { int dp0, dp1, dplen, dsign, e0, inexact, nd, nd0, rounding, scale, uflchk; };$/;"	m	struct:BCinfo	file:
edgeDoesntConsumeInputFlag	Include/WAVM/NFA/NFA.h	/^		edgeDoesntConsumeInputFlag = (StateIndex)0x4000,$/;"	e	enum:WAVM::NFA::__anon3
ehFramesAddr	Lib/LLVMJIT/LLVMModule.cpp	/^	const U8* ehFramesAddr;$/;"	m	struct:LLVMJIT::ModuleMemoryManager	file:
ehFramesNumBytes	Lib/LLVMJIT/LLVMModule.cpp	/^	Uptr ehFramesNumBytes;$/;"	m	struct:LLVMJIT::ModuleMemoryManager	file:
eh_frame_ptr	ThirdParty/libunwind/src/EHHeaderParser.hpp	/^    pint_t eh_frame_ptr;$/;"	m	struct:libunwind::EHHeaderParser::EHHeaderInfo
ehtp	ThirdParty/libunwind/include/unwind.h	/^    _Unwind_EHT_Header* ehtp; \/* pointer to EHT entry header word *\/$/;"	m	struct:_Unwind_Control_Block::__anon59
einval	Lib/Emscripten/Emscripten.cpp	/^	einval = 22$/;"	e	enum:ErrNo	file:
elapsedMicroseconds	Test/Benchmarks/invoke-bench.cpp	/^	U64 elapsedMicroseconds = 0;$/;"	m	struct:ThreadArgs	file:
elem	Lib/WASM/WASMSerialization.cpp	/^	elem,$/;"	m	class:SectionType	file:
elemNameToIndexMap	Lib/WASTParse/Parse.h	/^		NameToIndexMap elemNameToIndexMap;$/;"	m	struct:WAVM::WAST::ModuleState
elemSegment	Lib/IR/DisassemblyNames.cpp	/^	elemSegment = 8,$/;"	m	class:NameSubsectionType	file:
elemSegmentIndex	Include/WAVM/IR/Operators.h	/^		Uptr elemSegmentIndex;$/;"	m	struct:WAVM::IR::ElemSegmentAndTableImm
elemSegmentIndex	Include/WAVM/IR/Operators.h	/^		Uptr elemSegmentIndex;$/;"	m	struct:WAVM::IR::ElemSegmentImm
elemSegments	Include/WAVM/IR/Module.h	/^		std::vector<ElemSegment> elemSegments;$/;"	m	struct:WAVM::IR::Opcode::Elem::Module
elemSegments	Include/WAVM/IR/Module.h	/^		std::vector<std::string> elemSegments;$/;"	m	struct:WAVM::IR::Opcode::Elem::DisassemblyNames
elemType	Include/WAVM/IR/Module.h	/^		ReferenceType elemType;$/;"	m	struct:WAVM::IR::Opcode::Elem::ElemSegment
elem_drop	Lib/LLVMJIT/EmitTable.cpp	/^void EmitFunctionContext::elem_drop(ElemSegmentImm imm)$/;"	f	class:EmitFunctionContext
elementType	Include/WAVM/IR/Types.h	/^		ReferenceType elementType;$/;"	m	struct:WAVM::IR::ValueType::TableType
elements	Include/WAVM/Inline/DenseStaticIntSet.h	/^		Element elements[numElements];$/;"	m	struct:WAVM::DenseStaticIntSet
elements	Lib/Runtime/RuntimePrivate.h	/^		Element* elements = nullptr;$/;"	m	struct:WAVM::Runtime::Table
elems	Include/WAVM/IR/Module.h	/^		std::vector<Elem> elems;$/;"	m	struct:WAVM::IR::Opcode::Elem::ElemSegment
elems	Include/WAVM/IR/Types.h	/^			ValueType elems[1];$/;"	m	struct:WAVM::IR::ValueType::TypeTuple::Impl
elseArgs	Lib/LLVMJIT/EmitFunctionContext.h	/^			ValueVector elseArgs;$/;"	m	struct:WAVM::LLVMJIT::EmitFunctionContext::ControlContext
elseBlock	Lib/LLVMJIT/EmitFunctionContext.h	/^			llvm::BasicBlock* elseBlock;$/;"	m	struct:WAVM::LLVMJIT::EmitFunctionContext::ControlContext
elseParams	Lib/IR/Validate.cpp	/^		TypeTuple elseParams;$/;"	m	struct:FunctionValidationContext::ControlContext	file:
else_	Include/WAVM/Emscripten/gas-visit-context.h	/^	Result else_(NoImm imm)$/;"	f	struct:GasVisitor
else_	Include/WAVM/Emscripten/insert-imported-context.h	/^    Result else_(NoImm imm)$/;"	f	struct:ImportFunctionInsertVisitor
else_	Lib/IR/Validate.cpp	/^	void else_(NoImm imm)$/;"	f	struct:FunctionValidationContext
else_	Lib/LLVMJIT/EmitCore.cpp	/^void EmitFunctionContext::else_(NoImm imm)$/;"	f	class:EmitFunctionContext
else_	Lib/LLVMJIT/EmitFunction.cpp	/^	void else_(NoImm imm)$/;"	f	struct:UnreachableOpVisitor
else_	Lib/WASTPrint/Print.cpp	/^	void else_(NoImm imm)$/;"	f	struct:FunctionPrintContext
emit	Lib/LLVMJIT/EmitFunction.cpp	/^void EmitFunctionContext::emit()$/;"	f	class:EmitFunctionContext
emit	Test/fuzz/fuzz-compile-model.cpp	/^	OperatorEmitFunc* emit;$/;"	m	struct:OperatorInfo	file:
emitAddUnsignedSaturated	Lib/LLVMJIT/EmitNumeric.cpp	/^static llvm::Value* emitAddUnsignedSaturated(llvm::IRBuilder<>& irBuilder,$/;"	f	file:
emitAllTrue	Lib/LLVMJIT/EmitNumeric.cpp	/^static llvm::Value* emitAllTrue(llvm::IRBuilder<>& irBuilder,$/;"	f	file:
emitAnyTrue	Lib/LLVMJIT/EmitNumeric.cpp	/^static llvm::Value* emitAnyTrue(llvm::IRBuilder<>& irBuilder,$/;"	f	file:
emitBitSelect	Lib/LLVMJIT/EmitNumeric.cpp	/^llvm::Value* EmitFunctionContext::emitBitSelect(llvm::Value* mask,$/;"	f	class:EmitFunctionContext
emitCallOrInvoke	Lib/LLVMJIT/EmitContext.h	/^		ValueVector emitCallOrInvoke(llvm::Value* callee,$/;"	f	struct:WAVM::LLVMJIT::EmitContext
emitConditionalTrapIntrinsic	Lib/LLVMJIT/EmitFunction.cpp	/^void EmitFunctionContext::emitConditionalTrapIntrinsic($/;"	f	class:EmitFunctionContext
emitF64Promote	Lib/LLVMJIT/EmitConvert.cpp	/^llvm::Value* EmitFunctionContext::emitF64Promote(llvm::Value* operand)$/;"	f	class:EmitFunctionContext
emitFloatMax	Lib/LLVMJIT/EmitNumeric.cpp	/^llvm::Value* EmitFunctionContext::emitFloatMax(llvm::Value* left,$/;"	f	class:EmitFunctionContext
emitFloatMin	Lib/LLVMJIT/EmitNumeric.cpp	/^llvm::Value* EmitFunctionContext::emitFloatMin(llvm::Value* left,$/;"	f	class:EmitFunctionContext
emitLiteral	Lib/LLVMJIT/LLVMJITPrivate.h	/^	inline llvm::Constant* emitLiteral(llvm::LLVMContext& llvmContext, F32 value)$/;"	f	namespace:WAVM::LLVMJIT
emitLiteral	Lib/LLVMJIT/LLVMJITPrivate.h	/^	inline llvm::Constant* emitLiteral(llvm::LLVMContext& llvmContext, F64 value)$/;"	f	namespace:WAVM::LLVMJIT
emitLiteral	Lib/LLVMJIT/LLVMJITPrivate.h	/^	inline llvm::Constant* emitLiteral(llvm::LLVMContext& llvmContext, V128 value)$/;"	f	namespace:WAVM::LLVMJIT
emitLiteral	Lib/LLVMJIT/LLVMJITPrivate.h	/^	inline llvm::Constant* emitLiteral(llvm::LLVMContext& llvmContext, bool value)$/;"	f	namespace:WAVM::LLVMJIT
emitLiteral	Lib/LLVMJIT/LLVMJITPrivate.h	/^	inline llvm::ConstantInt* emitLiteral(llvm::LLVMContext& llvmContext, I32 value)$/;"	f	namespace:WAVM::LLVMJIT
emitLiteral	Lib/LLVMJIT/LLVMJITPrivate.h	/^	inline llvm::ConstantInt* emitLiteral(llvm::LLVMContext& llvmContext, I64 value)$/;"	f	namespace:WAVM::LLVMJIT
emitLiteral	Lib/LLVMJIT/LLVMJITPrivate.h	/^	inline llvm::ConstantInt* emitLiteral(llvm::LLVMContext& llvmContext, U32 value)$/;"	f	namespace:WAVM::LLVMJIT
emitLiteral	Lib/LLVMJIT/LLVMJITPrivate.h	/^	inline llvm::ConstantInt* emitLiteral(llvm::LLVMContext& llvmContext, U64 value)$/;"	f	namespace:WAVM::LLVMJIT
emitLiteralPointer	Lib/LLVMJIT/LLVMJITPrivate.h	/^	inline llvm::Constant* emitLiteralPointer(const void* pointer, llvm::Type* intOrPointerType)$/;"	f	namespace:WAVM::LLVMJIT
emitModule	Lib/LLVMJIT/EmitModule.cpp	/^void LLVMJIT::emitModule(const IR::Module& irModule,$/;"	f	class:LLVMJIT
emitReturn	Lib/LLVMJIT/EmitContext.h	/^		void emitReturn(IR::TypeTuple resultTypes, const llvm::ArrayRef<llvm::Value*>& results)$/;"	f	struct:WAVM::LLVMJIT::EmitContext
emitRotl	Lib/LLVMJIT/EmitNumeric.cpp	/^static llvm::Value* emitRotl(EmitContext& emitContext, llvm::Value* left, llvm::Value* right)$/;"	f	file:
emitRotr	Lib/LLVMJIT/EmitNumeric.cpp	/^static llvm::Value* emitRotr(EmitContext& emitContext, llvm::Value* left, llvm::Value* right)$/;"	f	file:
emitRuntimeIntrinsic	Lib/LLVMJIT/EmitFunction.cpp	/^ValueVector EmitFunctionContext::emitRuntimeIntrinsic($/;"	f	class:EmitFunctionContext
emitSRem	Lib/LLVMJIT/EmitNumeric.cpp	/^llvm::Value* EmitFunctionContext::emitSRem(ValueType type, llvm::Value* left, llvm::Value* right)$/;"	f	class:EmitFunctionContext
emitShiftCountMask	Lib/LLVMJIT/EmitNumeric.cpp	/^static llvm::Value* emitShiftCountMask(EmitContext& emitContext,$/;"	f	file:
emitSubUnsignedSaturated	Lib/LLVMJIT/EmitNumeric.cpp	/^static llvm::Value* emitSubUnsignedSaturated(llvm::IRBuilder<>& irBuilder,$/;"	f	file:
emitTruncFloatToInt	Lib/LLVMJIT/EmitConvert.cpp	/^llvm::Value* EmitFunctionContext::emitTruncFloatToInt(ValueType destType,$/;"	f	class:EmitFunctionContext
emitTruncFloatToIntSat	Lib/LLVMJIT/EmitConvert.cpp	/^llvm::Value* EmitFunctionContext::emitTruncFloatToIntSat(llvm::Type* destType,$/;"	f	class:EmitFunctionContext
emitTruncVectorFloatToIntSat	Lib/LLVMJIT/EmitConvert.cpp	/^llvm::Value* EmitFunctionContext::emitTruncVectorFloatToIntSat(llvm::Type* destType,$/;"	f	class:EmitFunctionContext
emitVectorSelect	Lib/LLVMJIT/EmitNumeric.cpp	/^llvm::Value* EmitFunctionContext::emitVectorSelect(llvm::Value* condition,$/;"	f	class:EmitFunctionContext
emscriptenInstance	Include/WAVM/Emscripten/xchain-service.h	/^        Emscripten::Instance* emscriptenInstance;$/;"	m	struct:xchain::XBridgeChainService
emscriptenMemoryImage	Include/WAVM/Emscripten/xchain-service.h	/^        std::vector<U8> emscriptenMemoryImage;$/;"	m	struct:xchain::XBridgeChainService
enableEmscripten	Programs/wavm-run/wavm-run.cpp	/^	bool enableEmscripten = true;$/;"	m	struct:CommandLineOptions	file:
enableThreadTest	Programs/wavm-run/wavm-run.cpp	/^	bool enableThreadTest = false;$/;"	m	struct:CommandLineOptions	file:
encodeUTF16CodePoint	Include/WAVM/Inline/Unicode.h	/^	template<typename String> void encodeUTF16CodePoint(U32 codePoint, String& outString)$/;"	f	namespace:WAVM::Unicode
encodeUTF8CodePoint	Include/WAVM/Inline/Unicode.h	/^	template<typename String> void encodeUTF8CodePoint(U32 codePoint, String& outString)$/;"	f	namespace:WAVM::Unicode
encodeValueType	Lib/WASM/WASMSerialization.cpp	/^	static I8 encodeValueType(ValueType valueType)$/;"	f	namespace:WAVM::IR
encodedType	Include/WAVM/Runtime/RuntimeData.h	/^		const IR::FunctionType::Encoding encodedType;$/;"	m	struct:WAVM::Runtime::Function
encoderStream	Include/WAVM/Emscripten/gas-visit-context.h	/^    CodeStream *encoderStream;$/;"	m	struct:GasVisitor
encoding	ThirdParty/libunwind/include/mach-o/compact_unwind_encoding.h	/^    compact_unwind_encoding_t    encoding;$/;"	m	struct:unwind_info_regular_second_level_entry
encoding	ThirdParty/libunwind/src/UnwindCursor.hpp	/^  uint32_t encoding(uint32_t index) const {$/;"	f	class:libunwind::UnwindSectionRegularArray
encoding	ThirdParty/libunwind/src/Unwind_AppleExtras.cpp	/^  unsigned long  encoding;$/;"	m	struct:libgcc_object	file:
encodingIndex	ThirdParty/libunwind/src/UnwindCursor.hpp	/^  uint16_t encodingIndex(uint32_t index) const {$/;"	f	class:libunwind::UnwindSectionCompressedArray
encodingsCount	ThirdParty/libunwind/include/mach-o/compact_unwind_encoding.h	/^    uint16_t    encodingsCount;$/;"	m	struct:unwind_info_compressed_second_level_page_header
encodingsCount	ThirdParty/libunwind/src/UnwindCursor.hpp	/^  uint16_t encodingsCount() const {$/;"	f	class:libunwind::UnwindSectionCompressedPageHeader
encodingsPageOffset	ThirdParty/libunwind/include/mach-o/compact_unwind_encoding.h	/^    uint16_t    encodingsPageOffset;$/;"	m	struct:unwind_info_compressed_second_level_page_header
encodingsPageOffset	ThirdParty/libunwind/src/UnwindCursor.hpp	/^  uint16_t encodingsPageOffset() const {$/;"	f	class:libunwind::UnwindSectionCompressedPageHeader
end	Include/WAVM/Emscripten/gas-visit-context.h	/^	Result end(NoImm imm)$/;"	f	struct:GasVisitor
end	Include/WAVM/Emscripten/insert-imported-context.h	/^    Result end(NoImm imm)$/;"	f	struct:ImportFunctionInsertVisitor
end	Include/WAVM/IR/Operators.h	/^		const U8* end;$/;"	m	struct:WAVM::IR::OperatorDecoderStream
end	Include/WAVM/IR/Types.h	/^		const ValueType* end() const { return impl->elems + impl->numElems; }$/;"	f	struct:WAVM::IR::ValueType::TypeTuple
end	Include/WAVM/Inline/HashMapImpl.h	/^template<HASHMAP_PARAMETERS> HashMapIterator<Key, Value> HashMap<HASHMAP_ARGUMENTS>::end() const$/;"	f	class:HashMap
end	Include/WAVM/Inline/HashSetImpl.h	/^HashSetIterator<Element> HashSet<Element, ElementHashPolicy>::end() const$/;"	f	class:HashSet
end	Include/WAVM/Inline/IndexMap.h	/^		Iterator end() const { return Iterator(map.end()); }$/;"	f	struct:WAVM::IndexMap
end	Include/WAVM/Inline/Serialization.h	/^		U8* end;$/;"	m	struct:WAVM::Serialization::OutputStream
end	Include/WAVM/Inline/Serialization.h	/^		const U8* end;$/;"	m	struct:WAVM::Serialization::InputStream
end	Include/WAVM/Platform/File.h	/^		end = 2$/;"	m	class:WAVM::Platform::FileSeekOrigin
end	Lib/IR/Validate.cpp	/^	void end(NoImm)$/;"	f	struct:FunctionValidationContext
end	Lib/LLVMJIT/EmitCore.cpp	/^void EmitFunctionContext::end(NoImm)$/;"	f	class:EmitFunctionContext
end	Lib/LLVMJIT/EmitFunction.cpp	/^	void end(NoImm imm)$/;"	f	struct:UnreachableOpVisitor
end	Lib/WASTPrint/Print.cpp	/^	void end(NoImm)$/;"	f	struct:FunctionPrintContext
end	Test/fuzz/fuzz-compile-model.cpp	/^	const U8* end;$/;"	m	struct:RandomStream	file:
end	ThirdParty/libunwind/src/UnwindCursor.hpp	/^  static _Self end(A& addressSpace, const UnwindInfoSections& sects) {$/;"	f	struct:libunwind::EHABISectionIterator
endBlock	Lib/LLVMJIT/EmitFunctionContext.h	/^			llvm::BasicBlock* endBlock;$/;"	m	struct:WAVM::LLVMJIT::EmitFunctionContext::ControlContext
endBucket	Include/WAVM/Inline/HashMap.h	/^		const HashTableBucket<Pair>* endBucket;$/;"	m	struct:WAVM::HashMapIterator
endBucket	Include/WAVM/Inline/HashSet.h	/^		const HashTableBucket<Element>* endBucket;$/;"	m	struct:WAVM::HashSetIterator
endPHIs	Lib/LLVMJIT/EmitFunctionContext.h	/^			PHIVector endPHIs;$/;"	m	struct:WAVM::LLVMJIT::EmitFunctionContext::ControlContext
endTime	Include/WAVM/Inline/Timing.h	/^		std::chrono::high_resolution_clock::time_point endTime;$/;"	m	struct:WAVM::Timing::Timer
endTryCatch	Lib/LLVMJIT/EmitExceptions.cpp	/^void EmitFunctionContext::endTryCatch()$/;"	f	class:EmitFunctionContext
endTryWithoutCatch	Lib/LLVMJIT/EmitExceptions.cpp	/^void EmitFunctionContext::endTryWithoutCatch()$/;"	f	class:EmitFunctionContext
end_ip	ThirdParty/libunwind/include/libunwind.h	/^  unw_word_t  end_ip;           \/* address after end of function *\/$/;"	m	struct:unw_proc_info_t
enterUnreachable	Lib/IR/Validate.cpp	/^	void enterUnreachable()$/;"	f	struct:FunctionValidationContext	file:
enterUnreachable	Lib/LLVMJIT/EmitFunction.cpp	/^void EmitFunctionContext::enterUnreachable()$/;"	f	class:EmitFunctionContext
enterUnreachable	Lib/WASTPrint/Print.cpp	/^	void enterUnreachable() {}$/;"	f	struct:FunctionPrintContext	file:
entry	Lib/Platform/POSIX/Thread.cpp	/^	I64 (*entry)(void*);$/;"	m	struct:CreateThreadArgs	file:
entry	Lib/Platform/Windows/Thread.cpp	/^	I64 (*entry)(void*);$/;"	m	struct:CreateThreadArgs	file:
entry	ThirdParty/libunwind/src/UnwindCursor.hpp	/^  struct entry {$/;"	s	class:libunwind::DwarfFDECache
entryArgument	Lib/Platform/POSIX/Thread.cpp	/^	void* entryArgument;$/;"	m	struct:CreateThreadArgs	file:
entryArgument	Lib/Platform/Windows/Thread.cpp	/^	void* entryArgument;$/;"	m	struct:CreateThreadArgs	file:
entryCount	ThirdParty/libunwind/include/mach-o/compact_unwind_encoding.h	/^    uint16_t    entryCount;$/;"	m	struct:unwind_info_compressed_second_level_page_header
entryCount	ThirdParty/libunwind/include/mach-o/compact_unwind_encoding.h	/^    uint16_t    entryCount;$/;"	m	struct:unwind_info_regular_second_level_page_header
entryCount	ThirdParty/libunwind/src/UnwindCursor.hpp	/^  uint16_t entryCount() const {$/;"	f	class:libunwind::UnwindSectionCompressedPageHeader
entryCount	ThirdParty/libunwind/src/UnwindCursor.hpp	/^  uint16_t entryCount() const {$/;"	f	class:libunwind::UnwindSectionRegularPageHeader
entryFunction	Lib/ThreadTest/ThreadTest.cpp	/^	GCPointer<Function> entryFunction;$/;"	m	struct:Thread	file:
entryPageOffset	ThirdParty/libunwind/include/mach-o/compact_unwind_encoding.h	/^    uint16_t    entryPageOffset;$/;"	m	struct:unwind_info_compressed_second_level_page_header
entryPageOffset	ThirdParty/libunwind/include/mach-o/compact_unwind_encoding.h	/^    uint16_t    entryPageOffset;$/;"	m	struct:unwind_info_regular_second_level_page_header
entryPageOffset	ThirdParty/libunwind/src/UnwindCursor.hpp	/^  uint16_t entryPageOffset() const {$/;"	f	class:libunwind::UnwindSectionCompressedPageHeader
entryPageOffset	ThirdParty/libunwind/src/UnwindCursor.hpp	/^  uint16_t entryPageOffset() const {$/;"	f	class:libunwind::UnwindSectionRegularPageHeader
env	Include/WAVM/Emscripten/Emscripten.h	/^		Runtime::GCPointer<Runtime::ModuleInstance> env;$/;"	m	struct:WAVM::Emscripten::Instance
envs	Lib/WASI/WASI.cpp	/^		std::vector<std::string> envs;$/;"	m	struct:WAVM::WASI::Process	file:
epsilonNextStates	Lib/NFA/NFA.cpp	/^	std::vector<StateIndex> epsilonNextStates;$/;"	m	struct:NFAState	file:
eraseHashBucket	Include/WAVM/Inline/HashTableImpl.h	/^void HashTable<HASHTABLE_ARGUMENTS>::eraseHashBucket(Uptr eraseBucketIndex)$/;"	f	class:HashTable
err	Include/WAVM/Platform/File.h	/^		err,$/;"	m	class:WAVM::Platform::StdDevice
error	Include/WAVM/IR/Module.h	/^			error = 0xffff$/;"	m	class:WAVM::IR::Opcode::Type
error	Include/WAVM/Logging/Logging.h	/^		error,$/;"	e	enum:WAVM::Log::Category
error	Lib/WASI/WASIDefinitions.h	/^	__wasi_errno_t error;$/;"	m	struct:__wasi_event_t
errorIfFollowsDefinitions	Lib/WASTParse/ParseModule.cpp	/^static void errorIfFollowsDefinitions(CursorState* cursor)$/;"	f	file:
errorUnless	Include/WAVM/Inline/Assert.h	/^#define errorUnless(/;"	d
errors	Test/RunTestScript/RunTestScript.cpp	/^	std::vector<WAST::Error> errors;$/;"	m	struct:TestScriptState	file:
escapeName	Lib/WASTPrint/Print.cpp	/^static std::string escapeName(const std::string& name)$/;"	f	file:
escapeString	Lib/NFA/NFA.cpp	/^static std::string escapeString(const std::string& string)$/;"	f	file:
escapeString	Lib/WASTPrint/Print.cpp	/^static std::string escapeString(const char* string, Uptr numChars)$/;"	f	file:
escapeString	Lib/WASTPrint/Print.cpp	/^static std::string escapeString(const std::string& string)$/;"	f	file:
evaluateExpression	ThirdParty/libunwind/src/DwarfInstructions.hpp	/^DwarfInstructions<A, R>::evaluateExpression(pint_t expression, A &addressSpace,$/;"	f	class:libunwind::DwarfInstructions
evaluateInitializer	Lib/Runtime/Module.cpp	/^static Value evaluateInitializer(const std::vector<Global*>& moduleGlobals,$/;"	f	file:
evictHashBucket	Include/WAVM/Inline/HashTableImpl.h	/^void HashTable<HASHTABLE_ARGUMENTS>::evictHashBucket(Uptr bucketIndex)$/;"	f	class:HashTable
exception	Lib/ThreadTest/ThreadTest.cpp	/^	Exception* exception = nullptr;$/;"	m	struct:Thread	file:
exceptionHandling	Include/WAVM/IR/IR.h	/^		bool exceptionHandling = true;$/;"	m	struct:WAVM::IR::FeatureSpec
exceptionPointer	Lib/LLVMJIT/EmitFunctionContext.h	/^			llvm::Value* exceptionPointer;$/;"	m	struct:WAVM::LLVMJIT::EmitFunctionContext::CatchContext
exceptionType	Include/WAVM/IR/Types.h	/^			ExceptionType exceptionType;$/;"	m	union:WAVM::IR::ValueType::ExternType::__anon7
exceptionType	Include/WAVM/IR/Types.h	/^		exceptionType = 4,$/;"	m	class:WAVM::IR::ValueType::ExternKind
exceptionType	Include/WAVM/Runtime/RuntimeData.h	/^		exceptionType = 4,$/;"	m	class:WAVM::Runtime::ObjectKind
exceptionTypeExportName	Include/WAVM/WASTParse/TestScript.h	/^		std::string exceptionTypeExportName;$/;"	m	struct:WAVM::WAST::AssertThrowsCommand
exceptionTypeId	Lib/LLVMJIT/EmitFunctionContext.h	/^			llvm::Value* exceptionTypeId;$/;"	m	struct:WAVM::LLVMJIT::EmitFunctionContext::CatchContext
exceptionTypeIds	Lib/LLVMJIT/EmitModuleContext.h	/^		std::vector<llvm::Constant*> exceptionTypeIds;$/;"	m	struct:WAVM::LLVMJIT::EmitModuleContext
exceptionTypeIndex	Include/WAVM/IR/Operators.h	/^		Uptr exceptionTypeIndex;$/;"	m	struct:WAVM::IR::ExceptionTypeImm
exceptionTypeInternalModuleName	Include/WAVM/WASTParse/TestScript.h	/^		std::string exceptionTypeInternalModuleName;$/;"	m	struct:WAVM::WAST::AssertThrowsCommand
exceptionTypeNameToIndexMap	Lib/WASTParse/Parse.h	/^		NameToIndexMap exceptionTypeNameToIndexMap;$/;"	m	struct:WAVM::WAST::ModuleState
exceptionTypes	Include/WAVM/IR/Module.h	/^		IndexSpace<ExceptionTypeDef, ExceptionType> exceptionTypes;$/;"	m	struct:WAVM::IR::Opcode::Elem::Module
exceptionTypes	Include/WAVM/IR/Module.h	/^		std::vector<std::string> exceptionTypes;$/;"	m	struct:WAVM::IR::Opcode::Elem::DisassemblyNames
exceptionTypes	Include/WAVM/Runtime/Runtime.h	/^		std::vector<ExceptionType*> exceptionTypes;$/;"	m	struct:WAVM::Runtime::ImportBindings
exceptionTypes	Lib/IR/DisassemblyNames.cpp	/^	exceptionTypes = 10,$/;"	m	class:NameSubsectionType	file:
exceptionTypes	Lib/Runtime/RuntimePrivate.h	/^		IndexMap<Uptr, ExceptionType*> exceptionTypes;$/;"	m	struct:WAVM::Runtime::Compartment
exceptionTypes	Lib/Runtime/RuntimePrivate.h	/^		const std::vector<ExceptionType*> exceptionTypes;$/;"	m	struct:WAVM::Runtime::ModuleInstance
exceptionTypes	Lib/WASM/WASMSerialization.cpp	/^	exceptionTypes,$/;"	m	class:SectionType	file:
exception_class	ThirdParty/libunwind/include/unwind.h	/^  uint64_t exception_class;$/;"	m	struct:_Unwind_Control_Block
exception_class	ThirdParty/libunwind/include/unwind.h	/^  uint64_t exception_class;$/;"	m	struct:_Unwind_Exception
exception_cleanup	ThirdParty/libunwind/include/unwind.h	/^  void (*exception_cleanup)(_Unwind_Reason_Code reason,$/;"	m	struct:_Unwind_Exception
exception_cleanup	ThirdParty/libunwind/include/unwind.h	/^  void (*exception_cleanup)(_Unwind_Reason_Code, _Unwind_Control_Block*);$/;"	m	struct:_Unwind_Control_Block
exclude_patterns	ThirdParty/libunwind/docs/conf.py	/^exclude_patterns = ['_build']$/;"	v
execute	Include/WAVM/Platform/Memory.h	/^		execute,$/;"	m	class:WAVM::Platform::MemoryAccess
exitCatch	Lib/LLVMJIT/EmitExceptions.cpp	/^void EmitFunctionContext::exitCatch()$/;"	f	class:EmitFunctionContext
exitCode	Lib/Platform/POSIX/Thread.cpp	/^	I64 exitCode;$/;"	m	struct:ThreadEntryContext	file:
exitCode	Lib/WASI/WASI.cpp	/^	__wasi_exitcode_t exitCode;$/;"	m	struct:ExitException	file:
exitJump	Lib/Platform/POSIX/Thread.cpp	/^	jmp_buf exitJump;$/;"	m	struct:ThreadEntryContext	file:
expandIndentation	Lib/WASTPrint/Print.cpp	/^static std::string expandIndentation(std::string&& inString, U8 spacesPerIndentLevel = 2)$/;"	f	file:
expectLeakedObject	Include/WAVM/Platform/Diagnostics.h	/^	inline void expectLeakedObject(void*) {}$/;"	f	namespace:WAVM::Platform
expectLeakedObject	Lib/Platform/POSIX/Diagnostics.cpp	/^void Platform::expectLeakedObject(void* object) { __lsan_ignore_object(object); }$/;"	f	class:Platform
expectedArguments	Include/WAVM/WASTParse/TestScript.h	/^		IR::ValueTuple expectedArguments;$/;"	m	struct:WAVM::WAST::AssertThrowsCommand
expectedResults	Include/WAVM/WASTParse/TestScript.h	/^		IR::ValueTuple expectedResults;$/;"	m	struct:WAVM::WAST::AssertReturnCommand
expectedType	Include/WAVM/WASTParse/TestScript.h	/^		ExpectedTrapType expectedType;$/;"	m	struct:WAVM::WAST::AssertTrapCommand
explicitType	Lib/WASTParse/Parse.h	/^		IR::FunctionType explicitType;$/;"	m	struct:WAVM::WAST::UnresolvedFunctionType
exponent	Include/WAVM/Inline/FloatComponents.h	/^				U32 exponent : 8;$/;"	m	struct:__anon27::__anon28
exponent	Include/WAVM/Inline/FloatComponents.h	/^				U64 exponent : 11;$/;"	m	struct:WAVM::__anon25::__anon26
exponentBias	Include/WAVM/Inline/FloatComponents.h	/^			exponentBias = 1023,$/;"	m	struct:WAVM::FloatComponents	typeref:enum:WAVM::FloatComponents::
exponentBias	Include/WAVM/Inline/FloatComponents.h	/^			exponentBias = 127,$/;"	m	struct:FloatComponents	typeref:enum:FloatComponents::
exportMap	Lib/Runtime/RuntimePrivate.h	/^		const HashMap<std::string, Object*> exportMap;$/;"	m	struct:WAVM::Runtime::ModuleInstance
exportName	Include/WAVM/Emscripten/insert-imported-context.h	/^    std::string exportName;$/;"	m	struct:ImportFunctionInsertVisitor
exportName	Include/WAVM/IR/Module.h	/^		std::string exportName;$/;"	m	struct:WAVM::IR::Opcode::Import
exportName	Include/WAVM/Runtime/Linker.h	/^			std::string exportName;$/;"	m	struct:WAVM::Runtime::LinkResult::MissingImport
exportName	Include/WAVM/WASTParse/TestScript.h	/^		std::string exportName;$/;"	m	struct:WAVM::WAST::GetAction
exportName	Include/WAVM/WASTParse/TestScript.h	/^		std::string exportName;$/;"	m	struct:WAVM::WAST::InvokeAction
export_	Lib/WASM/WASMSerialization.cpp	/^	export_,$/;"	m	class:SectionType	file:
exports	Include/WAVM/IR/Module.h	/^		std::vector<Export> exports;$/;"	m	struct:WAVM::IR::Opcode::Elem::Module
extendBuffer	Include/WAVM/Inline/Serialization.h	/^		virtual void extendBuffer(Uptr numBytes)$/;"	f	struct:WAVM::Serialization::ArrayOutputStream
extendedNamesSection	Include/WAVM/IR/IR.h	/^		bool extendedNamesSection = true;$/;"	m	struct:WAVM::IR::FeatureSpec
extendedSignExtension	Include/WAVM/IR/IR.h	/^		bool extendedSignExtension = true;$/;"	m	struct:WAVM::IR::FeatureSpec
extensions	ThirdParty/libunwind/docs/conf.py	/^extensions = ['sphinx.ext.intersphinx', 'sphinx.ext.todo']$/;"	v
extra	ThirdParty/libunwind/include/libunwind.h	/^  unw_word_t  extra;            \/* mach_header of mach-o image containing func *\/$/;"	m	struct:unw_proc_info_t
f	ThirdParty/libunwind/src/Registers.hpp	/^      double f;$/;"	m	struct:libunwind::Registers_ppc64::ppc64_vsr_t::asfloat_s
f32	Include/WAVM/IR/Module.h	/^			F32 f32;$/;"	m	union:WAVM::IR::Opcode::Type::__anon10
f32	Include/WAVM/IR/Types.h	/^		f32 = 4,$/;"	m	class:WAVM::IR::ValueType
f32	Include/WAVM/IR/Value.h	/^			F32 f32;$/;"	m	union:WAVM::IR::UntaggedValue::__anon8
f32Type	Lib/LLVMJIT/LLVMJITPrivate.h	/^		llvm::Type* f32Type;$/;"	m	struct:WAVM::LLVMJIT::LLVMContext
f32_const	Include/WAVM/IR/Module.h	/^			f32_const = 0x0043,$/;"	m	class:WAVM::IR::Opcode::Type
f32x4Type	Lib/LLVMJIT/LLVMJITPrivate.h	/^		llvm::Type* f32x4Type;$/;"	m	struct:WAVM::LLVMJIT::LLVMContext
f64	Include/WAVM/IR/Module.h	/^			F64 f64;$/;"	m	union:WAVM::IR::Opcode::Type::__anon10
f64	Include/WAVM/IR/Types.h	/^		f64 = 5,$/;"	m	class:WAVM::IR::ValueType
f64	Include/WAVM/IR/Value.h	/^			F64 f64;$/;"	m	union:WAVM::IR::UntaggedValue::__anon8
f64Type	Lib/LLVMJIT/LLVMJITPrivate.h	/^		llvm::Type* f64Type;$/;"	m	struct:WAVM::LLVMJIT::LLVMContext
f64_const	Include/WAVM/IR/Module.h	/^			f64_const = 0x0044,$/;"	m	class:WAVM::IR::Opcode::Type
f64x2Type	Lib/LLVMJIT/LLVMJITPrivate.h	/^		llvm::Type* f64x2Type;$/;"	m	struct:WAVM::LLVMJIT::LLVMContext
fTask	ThirdParty/libunwind/src/AddressSpace.hpp	/^  task_t fTask;$/;"	m	class:libunwind::RemoteAddressSpace
failVerification	Test/fuzz/ModuleMatcher.h	/^		[[noreturn]] void failVerification()$/;"	f	struct:WAVM::ModuleMatcher
false	Lib/Platform/POSIX/POSIXPrivate.h	/^										  U8* trampolineFramePointer) noexcept(false);$/;"	v
false	Lib/Platform/POSIX/POSIXPrivate.h	/^extern "C" I64 saveExecutionState(ExecutionContext* outContext, I64 returnCode) noexcept(false);$/;"	v
false	Lib/Platform/Windows/WindowsPrivate.h	/^										  U8* trampolineFramePointer) noexcept(false);$/;"	v
fatal	Include/WAVM/Inline/Errors.h	/^	[[noreturn]] inline void fatal(const char* message) { fatalf("%s", message); }$/;"	f	namespace:WAVM::Errors
fatalf	Include/WAVM/Inline/Errors.h	/^	[[noreturn]] inline void fatalf(const char* messageFormat, ...)$/;"	f	namespace:WAVM::Errors
fatalfWithCallStack	Include/WAVM/Inline/Errors.h	/^	[[noreturn]] inline void fatalfWithCallStack(const char* messageFormat, ...)$/;"	f	namespace:WAVM::Errors
fd	Lib/WASI/WASIDefinitions.h	/^			__wasi_fd_t fd;$/;"	m	struct:__wasi_subscription_t::__wasi_subscription_u::__wasi_subscription_u_fd_readwrite_t
fd_readwrite	Lib/WASI/WASIDefinitions.h	/^		} fd_readwrite;$/;"	m	union:__wasi_event_t::__wasi_event_u	typeref:struct:__wasi_event_t::__wasi_event_u::__wasi_event_u_fd_readwrite_t
fd_readwrite	Lib/WASI/WASIDefinitions.h	/^		} fd_readwrite;$/;"	m	union:__wasi_subscription_t::__wasi_subscription_u	typeref:struct:__wasi_subscription_t::__wasi_subscription_u::__wasi_subscription_u_fd_readwrite_t
fde	ThirdParty/libunwind/src/UnwindCursor.hpp	/^    pint_t fde;$/;"	m	struct:libunwind::DwarfFDECache::entry
fde	ThirdParty/libunwind/src/Unwind_AppleExtras.cpp	/^  void          *fde;$/;"	m	struct:libgcc_object	file:
fdeInstructions	ThirdParty/libunwind/src/DwarfParser.hpp	/^    pint_t  fdeInstructions;$/;"	m	struct:libunwind::CFI_Parser::FDE_Info
fdeLength	ThirdParty/libunwind/src/DwarfParser.hpp	/^    pint_t  fdeLength;$/;"	m	struct:libunwind::CFI_Parser::FDE_Info
fdeStart	ThirdParty/libunwind/src/DwarfParser.hpp	/^    pint_t  fdeStart;$/;"	m	struct:libunwind::CFI_Parser::FDE_Info
fde_count	ThirdParty/libunwind/src/EHHeaderParser.hpp	/^    size_t fde_count;$/;"	m	struct:libunwind::EHHeaderParser::EHHeaderInfo
fde_end	ThirdParty/libunwind/src/Unwind_AppleExtras.cpp	/^  void          *fde_end;$/;"	m	struct:libgcc_object	file:
fdesHaveAugmentationData	ThirdParty/libunwind/src/DwarfParser.hpp	/^    bool      fdesHaveAugmentationData;$/;"	m	struct:libunwind::CFI_Parser::CIE_Info
featureSpec	Include/WAVM/IR/Module.h	/^		FeatureSpec featureSpec;$/;"	m	struct:WAVM::IR::Opcode::Elem::Module
features	output/CMakeFiles/feature_tests.c	/^  const char features[] = {"\\n"$/;"	v
features	output/CMakeFiles/feature_tests.cxx	/^  const char features[] = {"\\n"$/;"	v
feed	Include/WAVM/NFA/NFA.h	/^		inline StateIndex feed(const char*& nextChar) const$/;"	f	struct:WAVM::NFA::Machine
fetch_response	ThirdParty/bridge/rpc_inproc.cpp	/^uint32_t XChainServiceClient::fetch_response(std::string& buffer, uint32_t size) {$/;"	f	class:xchain::XChainServiceClient
fileHandleToPointer	Lib/Platform/Windows/File.cpp	/^static File* fileHandleToPointer(HANDLE handle)$/;"	f	file:
fileIndexToPtr	Lib/Platform/POSIX/File.cpp	/^static File* fileIndexToPtr(int index) { return reinterpret_cast<File*>(-Iptr(index) - 1); }$/;"	f	file:
filePointerToHandle	Lib/Platform/Windows/File.cpp	/^static HANDLE filePointerToHandle(File* file)$/;"	f	file:
filePtrToIndex	Lib/Platform/POSIX/File.cpp	/^static I32 filePtrToIndex(File* ptr) { return I32(-reinterpret_cast<Iptr>(ptr) - 1); }$/;"	f	file:
filename	Programs/wavm-run-wasi/wavm-run-wasi.cpp	/^	const char* filename = nullptr;$/;"	m	struct:CommandLineOptions	file:
filename	Programs/wavm-run/wavm-run.cpp	/^	const char* filename = nullptr;$/;"	m	struct:CommandLineOptions	file:
filter	Lib/Platform/POSIX/POSIXPrivate.h	/^		bool (*filter)(void*, Signal, CallStack&&);$/;"	m	struct:WAVM::Platform::SignalContext
filterArgument	Lib/Platform/POSIX/POSIXPrivate.h	/^		void* filterArgument;$/;"	m	struct:WAVM::Platform::SignalContext
findClosingParenthesis	Lib/WASTParse/Parse.cpp	/^void WAST::findClosingParenthesis(CursorState* cursor, const Token* openingParenthesisToken)$/;"	f	class:WAST
findFDE	ThirdParty/libunwind/src/DwarfParser.hpp	/^bool CFI_Parser<A>::findFDE(A &addressSpace, pint_t pc, pint_t ehSectionStart,$/;"	f	class:libunwind::CFI_Parser
findFDE	ThirdParty/libunwind/src/EHHeaderParser.hpp	/^bool EHHeaderParser<A>::findFDE(A &addressSpace, pint_t pc, pint_t ehHdrStart,$/;"	f	class:libunwind::EHHeaderParser
findFDE	ThirdParty/libunwind/src/UnwindCursor.hpp	/^typename A::pint_t DwarfFDECache<A>::findFDE(pint_t mh, pint_t pc) {$/;"	f	class:libunwind::DwarfFDECache
findFunctionName	ThirdParty/libunwind/src/AddressSpace.hpp	/^bool RemoteAddressSpace<P>::findFunctionName(pint_t addr, char *buf,$/;"	f	class:libunwind::RemoteAddressSpace
findFunctionName	ThirdParty/libunwind/src/AddressSpace.hpp	/^inline bool LocalAddressSpace::findFunctionName(pint_t addr, char *buf,$/;"	f	class:libunwind::LocalAddressSpace
findOtherFDE	ThirdParty/libunwind/src/AddressSpace.hpp	/^inline bool LocalAddressSpace::findOtherFDE(pint_t targetAddr, pint_t &fde) {$/;"	f	class:libunwind::LocalAddressSpace
findUnwindSections	ThirdParty/libunwind/src/AddressSpace.hpp	/^inline bool LocalAddressSpace::findUnwindSections(pint_t targetAddr,$/;"	f	class:libunwind::LocalAddressSpace
findUserSection	Include/WAVM/IR/Module.h	/^	inline bool findUserSection(const Module& module,$/;"	f	struct:WAVM::IR::Opcode::Elem
finish	Lib/IR/Validate.cpp	/^void IR::CodeValidationStream::finish()$/;"	f	class:IR::CodeValidationStream
finishValidation	Include/WAVM/IR/Validate.h	/^		void finishValidation() { codeValidationStream.finish(); }$/;"	f	struct:WAVM::IR::CodeValidationProxyStream
firstChild	Lib/RegExp/RegExp.cpp	/^	Node* firstChild;$/;"	m	struct:Binary	file:
flags	Lib/WASI/WASIDefinitions.h	/^			__wasi_eventrwflags_t flags;$/;"	m	struct:__wasi_event_t::__wasi_event_u::__wasi_event_u_fd_readwrite_t
flags	Lib/WASI/WASIDefinitions.h	/^			__wasi_subclockflags_t flags;$/;"	m	struct:__wasi_subscription_t::__wasi_subscription_u::__wasi_subscription_u_clock_t
flags	ThirdParty/libunwind/include/libunwind.h	/^  unw_word_t  flags;            \/* not used *\/$/;"	m	struct:unw_proc_info_t
floatAsString	Lib/IR/FloatPrinting.cpp	/^template<typename Float> static std::string floatAsString(Float f)$/;"	f	file:
floatCeil	Lib/Runtime/WAVMIntrinsics.cpp	/^template<typename Float> Float floatCeil(Float value)$/;"	f
floatFloor	Lib/Runtime/WAVMIntrinsics.cpp	/^template<typename Float> Float floatFloor(Float value)$/;"	f
floatNearest	Lib/Runtime/WAVMIntrinsics.cpp	/^template<typename Float> Float floatNearest(Float value)$/;"	f
floatTrunc	Lib/Runtime/WAVMIntrinsics.cpp	/^template<typename Float> Float floatTrunc(Float value)$/;"	f
floorLogTwo	Include/WAVM/Platform/Intrinsic.h	/^	inline U32 floorLogTwo(U32 value) { return value <= 1 ? 0 : 31 - countLeadingZeroes(value); }$/;"	f	namespace:WAVM::Platform
floorLogTwo	Include/WAVM/Platform/Intrinsic.h	/^	inline U64 floorLogTwo(U64 value) { return value <= 1 ? 0 : 63 - countLeadingZeroes(value); }$/;"	f	namespace:WAVM::Platform
flushFileWrites	Lib/Platform/POSIX/File.cpp	/^bool Platform::flushFileWrites(File* file) { return fsync(filePtrToIndex(file)) == 0; }$/;"	f	class:Platform
flushFileWrites	Lib/Platform/Windows/File.cpp	/^bool Platform::flushFileWrites(File* file)$/;"	f	class:Platform
fnstart	ThirdParty/libunwind/include/unwind.h	/^    uint32_t fnstart; \/* function start address *\/$/;"	m	struct:_Unwind_Control_Block::__anon59
forkContext	Lib/Platform/POSIX/Thread.cpp	/^	ExecutionContext forkContext;$/;"	m	struct:ForkThreadArgs	file:
forkContext	Lib/Platform/Windows/Thread.cpp	/^	ExecutionContext forkContext;$/;"	m	struct:ForkThreadArgs	file:
forkCurrentThread	Lib/Platform/POSIX/Thread.cpp	/^NO_ASAN Thread* Platform::forkCurrentThread()$/;"	f	class:Platform
forkCurrentThread	Lib/Platform/Windows/Thread.cpp	/^Thread* Platform::forkCurrentThread()$/;"	f	class:Platform
forkThreadEntry	Lib/Platform/POSIX/Thread.cpp	/^NO_ASAN static void* forkThreadEntry(void* argsVoid)$/;"	f	file:
forkThreadEntry	Lib/Platform/Windows/Thread.cpp	/^static DWORD WINAPI forkThreadEntry(void* argsVoid)$/;"	f	file:
forkedStackMutex	Lib/Platform/POSIX/Thread.cpp	/^	Platform::Mutex forkedStackMutex;$/;"	m	struct:ForkThreadArgs	file:
forkedStackTrampoline	Lib/Platform/Windows/Win64.asm	/^forkedStackTrampoline PROC FRAME$/;"	l
forkedStackTrampolineExit	Lib/Platform/POSIX/POSIX.S	/^forkedStackTrampolineExit:$/;"	l
format	Include/WAVM/IR/Types.h	/^		Format format;$/;"	m	struct:WAVM::IR::ValueType::IndexedBlockType
format	ThirdParty/libunwind/include/libunwind.h	/^  uint32_t    format;           \/* compact unwind encoding, or zero if none *\/$/;"	m	struct:unw_proc_info_t
fpExceptionMetadata	Lib/LLVMJIT/EmitModuleContext.h	/^		llvm::Value* fpExceptionMetadata;$/;"	m	struct:WAVM::LLVMJIT::EmitModuleContext
fpRoundingModeMetadata	Lib/LLVMJIT/EmitModuleContext.h	/^		llvm::Value* fpRoundingModeMetadata;$/;"	m	struct:WAVM::LLVMJIT::EmitModuleContext
framePointer	Lib/Platform/POSIX/Thread.cpp	/^	U8* framePointer = nullptr;$/;"	m	struct:ThreadEntryContext	file:
frameUnwind	ThirdParty/libunwind/src/CompactUnwinder.hpp	/^void CompactUnwinder_x86<A>::frameUnwind(A &addressSpace,$/;"	f	class:libunwind::CompactUnwinder_x86
frameUnwind	ThirdParty/libunwind/src/CompactUnwinder.hpp	/^void CompactUnwinder_x86_64<A>::frameUnwind(A &addressSpace,$/;"	f	class:libunwind::CompactUnwinder_x86_64
framelessUnwind	ThirdParty/libunwind/src/CompactUnwinder.hpp	/^void CompactUnwinder_x86<A>::framelessUnwind($/;"	f	class:libunwind::CompactUnwinder_x86
framelessUnwind	ThirdParty/libunwind/src/CompactUnwinder.hpp	/^void CompactUnwinder_x86_64<A>::framelessUnwind(A &addressSpace,$/;"	f	class:libunwind::CompactUnwinder_x86_64
freeAlignedVirtualPages	Lib/Platform/POSIX/Memory.cpp	/^void Platform::freeAlignedVirtualPages(U8* unalignedBaseAddress, Uptr numPages, Uptr alignmentLog2)$/;"	f	class:Platform
freeAlignedVirtualPages	Lib/Platform/Windows/Memory.cpp	/^void Platform::freeAlignedVirtualPages(U8* unalignedBaseAddress, Uptr numPages, Uptr alignmentLog2)$/;"	f	class:Platform
freeLineInfo	Lib/WASTParse/Lexer.cpp	/^void WAST::freeLineInfo(LineInfo* lineInfo)$/;"	f	class:WAST
freeTokens	Lib/WASTParse/Lexer.cpp	/^void WAST::freeTokens(Token* tokens) { free(tokens); }$/;"	f	class:WAST
freeVirtualPages	Lib/Platform/POSIX/Memory.cpp	/^void Platform::freeVirtualPages(U8* baseVirtualAddress, Uptr numPages)$/;"	f	class:Platform
freeVirtualPages	Lib/Platform/Windows/Memory.cpp	/^void Platform::freeVirtualPages(U8* baseVirtualAddress, Uptr numPages)$/;"	f	class:Platform
freelist	ThirdParty/dtoa/dtoa.c	/^ static thread_local Bigint *freelist[Kmax+1];$/;"	v	file:
fs_filetype	Lib/WASI/WASIDefinitions.h	/^	__wasi_filetype_t fs_filetype;$/;"	m	struct:__wasi_fdstat_t
fs_flags	Lib/WASI/WASIDefinitions.h	/^	__wasi_fdflags_t fs_flags;$/;"	m	struct:__wasi_fdstat_t
fs_rights_base	Lib/WASI/WASIDefinitions.h	/^	__wasi_rights_t fs_rights_base;$/;"	m	struct:__wasi_fdstat_t
fs_rights_inheriting	Lib/WASI/WASIDefinitions.h	/^	__wasi_rights_t fs_rights_inheriting;$/;"	m	struct:__wasi_fdstat_t
func	ThirdParty/libunwind/include/unwind.h	/^  uintptr_t func;$/;"	m	struct:dwarf_eh_bases
funcref	Include/WAVM/IR/Types.h	/^		funcref = 8,$/;"	m	class:WAVM::IR::ValueType
funcref	Include/WAVM/IR/Types.h	/^		funcref = 8,$/;"	m	class:WAVM::IR::ValueType::ReferenceType
function	Include/WAVM/Emscripten/gas-visit-context.h	/^            function,$/;"	m	class:GasVisitor::ControlContext::Type
function	Include/WAVM/Emscripten/insert-imported-context.h	/^            function,$/;"	m	class:ImportFunctionInsertVisitor::ControlContext::Type
function	Include/WAVM/IR/Types.h	/^			FunctionType function;$/;"	m	union:WAVM::IR::ValueType::ExternType::__anon7
function	Include/WAVM/IR/Types.h	/^		function = 0,$/;"	m	class:WAVM::IR::ValueType::ExternKind
function	Include/WAVM/IR/Value.h	/^			Runtime::Function* function;$/;"	m	union:WAVM::IR::UntaggedValue::__anon8
function	Include/WAVM/Runtime/RuntimeData.h	/^		Runtime::Function* function = nullptr;$/;"	m	struct:WAVM::Runtime::FunctionMutableData
function	Include/WAVM/Runtime/RuntimeData.h	/^		function = 0,$/;"	m	class:WAVM::Runtime::ObjectKind
function	Lib/IR/DisassemblyNames.cpp	/^	function = 1,$/;"	m	class:NameSubsectionType	file:
function	Lib/IR/Validate.cpp	/^			function,$/;"	m	class:FunctionValidationContext::ControlContext::Type	file:
function	Lib/LLVMJIT/EmitFunctionContext.h	/^				function,$/;"	m	class:WAVM::LLVMJIT::EmitFunctionContext::ControlContext::Type
function	Lib/LLVMJIT/EmitFunctionContext.h	/^		llvm::Function* function;$/;"	m	struct:WAVM::LLVMJIT::EmitFunctionContext
function	Lib/WASM/WASMSerialization.cpp	/^	function,$/;"	m	class:SectionType	file:
function	Lib/WASTPrint/Print.cpp	/^			function,$/;"	m	class:FunctionPrintContext::ControlContext::Type	file:
functionAddress	ThirdParty/libunwind/src/UnwindCursor.hpp	/^  typename A::pint_t functionAddress() const {$/;"	f	struct:libunwind::EHABISectionIterator
functionContext	Lib/IR/Validate.cpp	/^		FunctionValidationContext functionContext;$/;"	m	struct:WAVM::IR::CodeValidationStreamImpl	file:
functionDef	Include/WAVM/Emscripten/gas-visit-context.h	/^    IR::FunctionDef& functionDef;$/;"	m	struct:GasVisitor
functionDef	Include/WAVM/IR/OperatorPrinter.h	/^		const FunctionDef& functionDef;$/;"	m	struct:WAVM::IR::OperatorPrinter
functionDef	Lib/IR/Validate.cpp	/^	const FunctionDef& functionDef;$/;"	m	struct:FunctionValidationContext	file:
functionDef	Lib/LLVMJIT/EmitFunctionContext.h	/^		const IR::FunctionDef& functionDef;$/;"	m	struct:WAVM::LLVMJIT::EmitFunctionContext
functionDef	Lib/WASM/WASMSerialization.cpp	/^	FunctionDef& functionDef;$/;"	m	struct:OperatorSerializerStream	file:
functionDef	Lib/WASTParse/ParseFunction.cpp	/^		FunctionDef& functionDef;$/;"	m	struct:WAVM::WAST::FunctionState	file:
functionDef	Lib/WASTPrint/Print.cpp	/^	const FunctionDef& functionDef;$/;"	m	struct:FunctionPrintContext	file:
functionIndex	Include/WAVM/IR/Operators.h	/^		Uptr functionIndex;$/;"	m	struct:WAVM::IR::FunctionImm
functionMap	Lib/Runtime/Intrinsics.cpp	/^		HashMap<std::string, Intrinsics::Function*> functionMap;$/;"	m	struct:WAVM::Intrinsics::ModuleImpl	file:
functionName	Programs/wavm-run/wavm-run.cpp	/^	const char* functionName = nullptr;$/;"	m	struct:CommandLineOptions	file:
functionNameToIndexMap	Lib/WASTParse/Parse.h	/^		NameToIndexMap functionNameToIndexMap;$/;"	m	struct:WAVM::WAST::ModuleState
functionOffset	ThirdParty/libunwind/include/mach-o/compact_unwind_encoding.h	/^    uint32_t                    functionOffset;$/;"	m	struct:unwind_info_regular_second_level_entry
functionOffset	ThirdParty/libunwind/include/mach-o/compact_unwind_encoding.h	/^    uint32_t        functionOffset;$/;"	m	struct:unwind_info_section_header_index_entry
functionOffset	ThirdParty/libunwind/include/mach-o/compact_unwind_encoding.h	/^    uint32_t        functionOffset;$/;"	m	struct:unwind_info_section_header_lsda_index_entry
functionOffset	ThirdParty/libunwind/src/UnwindCursor.hpp	/^  uint32_t functionOffset(uint32_t index) const {$/;"	f	class:libunwind::UnwindSectionCompressedArray
functionOffset	ThirdParty/libunwind/src/UnwindCursor.hpp	/^  uint32_t functionOffset(uint32_t index) const {$/;"	f	class:libunwind::UnwindSectionIndexArray
functionOffset	ThirdParty/libunwind/src/UnwindCursor.hpp	/^  uint32_t functionOffset(uint32_t index) const {$/;"	f	class:libunwind::UnwindSectionLsdaArray
functionOffset	ThirdParty/libunwind/src/UnwindCursor.hpp	/^  uint32_t functionOffset(uint32_t index) const {$/;"	f	class:libunwind::UnwindSectionRegularArray
functionOffset	ThirdParty/libunwind/src/UnwindCursor.hpp	/^  uint32_t functionOffset;$/;"	m	struct:libunwind::EHABIIndexEntry
functionRefInstruction	Include/WAVM/IR/IR.h	/^		bool functionRefInstruction = true;$/;"	m	struct:WAVM::IR::FeatureSpec
functionState	Lib/WASTParse/Parse.h	/^		struct FunctionState* functionState;$/;"	m	struct:WAVM::WAST::CursorState	typeref:struct:WAVM::WAST::CursorState::FunctionState
functionState	Lib/WASTParse/ParseFunction.cpp	/^		FunctionState* functionState;$/;"	m	struct:__anon50::ScopedBranchTarget	file:
functionType	Include/WAVM/IR/Types.h	/^			functionType$/;"	e	enum:WAVM::IR::ValueType::IndexedBlockType::Format
functionType	Lib/IR/Validate.cpp	/^	FunctionType functionType;$/;"	m	struct:FunctionValidationContext	file:
functionType	Lib/LLVMJIT/EmitFunctionContext.h	/^		IR::FunctionType functionType;$/;"	m	struct:WAVM::LLVMJIT::EmitFunctionContext
functionType	Lib/WASTPrint/Print.cpp	/^	FunctionType functionType;$/;"	m	struct:FunctionPrintContext	file:
functionTypeToIndexMap	Lib/WASTParse/Parse.h	/^		HashMap<IR::FunctionType, Uptr> functionTypeToIndexMap;$/;"	m	struct:WAVM::WAST::ModuleState
functions	Include/WAVM/IR/Module.h	/^		IndexSpace<FunctionDef, IndexedFunctionType> functions;$/;"	m	struct:WAVM::IR::Opcode::Elem::Module
functions	Include/WAVM/IR/Module.h	/^		std::vector<Function> functions;$/;"	m	struct:WAVM::IR::Opcode::Elem::DisassemblyNames
functions	Include/WAVM/Runtime/Runtime.h	/^		std::vector<Function*> functions;$/;"	m	struct:WAVM::Runtime::ImportBindings
functions	Lib/LLVMJIT/EmitModuleContext.h	/^		std::vector<llvm::Function*> functions;$/;"	m	struct:WAVM::LLVMJIT::EmitModuleContext
functions	Lib/Runtime/RuntimePrivate.h	/^		const std::vector<Function*> functions;$/;"	m	struct:WAVM::Runtime::ModuleInstance
g_gas_cost_table	Include/WAVM/Emscripten/gas-cost-table.h	/^std::map<std::string, uint32_t> g_gas_cost_table = {$/;"	v
gasCounter	Include/WAVM/Emscripten/gas-visit-context.h	/^    I64 gasCounter;  \/\/trace gas used by current block$/;"	m	struct:GasVisitor
gasLimit	Lib/Emscripten/Emscripten.cpp	/^static thread_local U64 gasUsed, gasLimit;$/;"	v	file:
gasUsed	Lib/Emscripten/Emscripten.cpp	/^static thread_local U64 gasUsed, gasLimit;$/;"	v	file:
gas_trap	Include/WAVM/Emscripten/gas-visit-context.h	/^    void gas_trap()$/;"	f	struct:GasVisitor
gdbRegistrationListener	Lib/LLVMJIT/LLVMModule.cpp	/^static llvm::JITEventListener* gdbRegistrationListener = nullptr;$/;"	v	file:
gdbRegistrationListenerMutex	Lib/LLVMJIT/LLVMModule.cpp	/^static Platform::Mutex gdbRegistrationListenerMutex;$/;"	v	file:
generateBlockSig	Test/fuzz/fuzz-compile-model.cpp	/^FunctionType generateBlockSig(RandomStream& random) { return FunctionType(); }$/;"	f
generateFunction	Test/fuzz/fuzz-compile-model.cpp	/^static void generateFunction(RandomStream& random,$/;"	f	file:
generateImm	Test/fuzz/fuzz-compile-model.cpp	/^static void generateImm(RandomStream& random, IR::Module& module, DataSegmentAndMemImm& outImm)$/;"	f	file:
generateImm	Test/fuzz/fuzz-compile-model.cpp	/^static void generateImm(RandomStream& random, IR::Module& module, DataSegmentImm& outImm)$/;"	f	file:
generateImm	Test/fuzz/fuzz-compile-model.cpp	/^static void generateImm(RandomStream& random, IR::Module& module, ElemSegmentAndTableImm& outImm)$/;"	f	file:
generateImm	Test/fuzz/fuzz-compile-model.cpp	/^static void generateImm(RandomStream& random, IR::Module& module, ElemSegmentImm& outImm)$/;"	f	file:
generateImm	Test/fuzz/fuzz-compile-model.cpp	/^static void generateImm(RandomStream& random, IR::Module& module, FunctionImm& outImm)$/;"	f	file:
generateImm	Test/fuzz/fuzz-compile-model.cpp	/^static void generateImm(RandomStream& random, IR::Module& module, LaneIndexImm<numLanes>& outImm)$/;"	f	file:
generateImm	Test/fuzz/fuzz-compile-model.cpp	/^static void generateImm(RandomStream& random, IR::Module& module, LiteralImm<F32>& outImm)$/;"	f	file:
generateImm	Test/fuzz/fuzz-compile-model.cpp	/^static void generateImm(RandomStream& random, IR::Module& module, LiteralImm<F64>& outImm)$/;"	f	file:
generateImm	Test/fuzz/fuzz-compile-model.cpp	/^static void generateImm(RandomStream& random, IR::Module& module, LiteralImm<I32>& outImm)$/;"	f	file:
generateImm	Test/fuzz/fuzz-compile-model.cpp	/^static void generateImm(RandomStream& random, IR::Module& module, LiteralImm<I64>& outImm)$/;"	f	file:
generateImm	Test/fuzz/fuzz-compile-model.cpp	/^static void generateImm(RandomStream& random, IR::Module& module, LiteralImm<V128>& outImm)$/;"	f	file:
generateImm	Test/fuzz/fuzz-compile-model.cpp	/^static void generateImm(RandomStream& random, IR::Module& module, MemoryCopyImm& outImm)$/;"	f	file:
generateImm	Test/fuzz/fuzz-compile-model.cpp	/^static void generateImm(RandomStream& random, IR::Module& module, MemoryImm& outImm)$/;"	f	file:
generateImm	Test/fuzz/fuzz-compile-model.cpp	/^static void generateImm(RandomStream& random, IR::Module& module, NoImm& outImm) {}$/;"	f	file:
generateImm	Test/fuzz/fuzz-compile-model.cpp	/^static void generateImm(RandomStream& random, IR::Module& module, ShuffleImm<numLanes>& outImm)$/;"	f	file:
generateImm	Test/fuzz/fuzz-compile-model.cpp	/^static void generateImm(RandomStream& random, IR::Module& module, TableCopyImm& outImm)$/;"	f	file:
generateImm	Test/fuzz/fuzz-compile-model.cpp	/^static void generateImm(RandomStream& random, IR::Module& module, TableImm& outImm)$/;"	f	file:
generateImm	Test/fuzz/fuzz-compile-model.cpp	/^static void generateImm(RandomStream& random,$/;"	f	file:
generateRandomString	Test/Containers/HashMapTest.cpp	/^static std::string generateRandomString()$/;"	f	file:
generateRandomString	Test/Containers/HashSetTest.cpp	/^static std::string generateRandomString()$/;"	f	file:
generateValidModule	Test/fuzz/fuzz-compile-model.cpp	/^void generateValidModule(IR::Module& module, const U8* inputBytes, Uptr numBytes)$/;"	f
generateValueType	Test/fuzz/fuzz-compile-model.cpp	/^static ValueType generateValueType(RandomStream& random)$/;"	f	file:
get	Include/WAVM/Inline/ConcurrentHashMap.h	/^		Value get(const Key& key, Value&& nullValue) const$/;"	f	struct:WAVM::ConcurrentHashMap
get	Include/WAVM/Inline/HashMapImpl.h	/^template<HASHMAP_PARAMETERS> const Value* HashMap<HASHMAP_ARGUMENTS>::get(const Key& key) const$/;"	f	class:HashMap
get	Include/WAVM/Inline/HashSetImpl.h	/^const Element* HashSet<Element, ElementHashPolicy>::get(const Element& element) const$/;"	f	class:HashSet
get	Include/WAVM/WASTParse/TestScript.h	/^		get,$/;"	m	class:WAVM::WAST::ActionType
get	Lib/Platform/Windows/Diagnostics.cpp	/^	static DbgHelp* get()$/;"	f	struct:DbgHelp
get	Lib/WASTParse/Lexer.cpp	/^StaticData& StaticData::get(bool allowLegacyOperatorNames)$/;"	f	class:StaticData
get	Test/fuzz/fuzz-compile-model.cpp	/^	template<typename Result> Result get(Result maxResult)$/;"	f	struct:RandomStream
get16	ThirdParty/libunwind/src/AddressSpace.hpp	/^  uint16_t         get16(pint_t addr) {$/;"	f	class:libunwind::LocalAddressSpace
get16	ThirdParty/libunwind/src/AddressSpace.hpp	/^template <typename P> uint16_t RemoteAddressSpace<P>::get16(pint_t addr) {$/;"	f	class:libunwind::RemoteAddressSpace
get32	Test/fuzz/fuzz-compile-model.cpp	/^	U32 get32(U32 maxResult)$/;"	f	struct:RandomStream	file:
get32	ThirdParty/libunwind/src/AddressSpace.hpp	/^  uint32_t         get32(pint_t addr) {$/;"	f	class:libunwind::LocalAddressSpace
get32	ThirdParty/libunwind/src/AddressSpace.hpp	/^template <typename P> uint32_t RemoteAddressSpace<P>::get32(pint_t addr) {$/;"	f	class:libunwind::RemoteAddressSpace
get64	Test/fuzz/fuzz-compile-model.cpp	/^	U64 get64(U64 maxResult)$/;"	f	struct:RandomStream	file:
get64	ThirdParty/libunwind/src/AddressSpace.hpp	/^  uint64_t         get64(pint_t addr) {$/;"	f	class:libunwind::LocalAddressSpace
get64	ThirdParty/libunwind/src/AddressSpace.hpp	/^template <typename P> uint64_t RemoteAddressSpace<P>::get64(pint_t addr) {$/;"	f	class:libunwind::RemoteAddressSpace
get8	ThirdParty/libunwind/src/AddressSpace.hpp	/^  uint8_t         get8(pint_t addr) {$/;"	f	class:libunwind::LocalAddressSpace
get8	ThirdParty/libunwind/src/AddressSpace.hpp	/^template <typename P> uint8_t RemoteAddressSpace<P>::get8(pint_t addr) {$/;"	f	class:libunwind::RemoteAddressSpace
getBranchTargetByDepth	Lib/IR/Validate.cpp	/^	const ControlContext& getBranchTargetByDepth(Uptr depth) const$/;"	f	struct:FunctionValidationContext	file:
getBranchTargetByDepth	Lib/LLVMJIT/EmitFunctionContext.h	/^		BranchTarget& getBranchTargetByDepth(Uptr depth)$/;"	f	struct:WAVM::LLVMJIT::EmitFunctionContext
getBranchTargetId	Lib/WASTPrint/Print.cpp	/^	std::string getBranchTargetId(Uptr depth)$/;"	f	struct:FunctionPrintContext	file:
getBucketForAdd	Include/WAVM/Inline/HashTableImpl.h	/^HashTableBucket<Element>& HashTable<HASHTABLE_ARGUMENTS>::getBucketForAdd(Uptr hash, const Key& key)$/;"	f	class:HashTable
getBucketForModify	Include/WAVM/Inline/HashTableImpl.h	/^HashTableBucket<Element>* HashTable<HASHTABLE_ARGUMENTS>::getBucketForModify(Uptr hash,$/;"	f	class:HashTable
getBucketForRead	Include/WAVM/Inline/HashTableImpl.h	/^const HashTableBucket<Element>* HashTable<HASHTABLE_ARGUMENTS>::getBucketForRead($/;"	f	class:HashTable
getBucketForWrite	Include/WAVM/Inline/HashTableImpl.h	/^HashTableBucket<Element>& HashTable<HASHTABLE_ARGUMENTS>::getBucketForWrite(Uptr hash,$/;"	f	class:HashTable
getBuckets	Include/WAVM/Inline/HashTable.h	/^		Bucket* getBuckets() const { return buckets; }$/;"	f	struct:WAVM::HashTable
getByte	ThirdParty/libunwind/src/Unwind-EHABI.cpp	/^uint8_t getByte(const uint32_t* data, size_t offset) {$/;"	f	namespace:__anon79
getBytes	Include/WAVM/Inline/Serialization.h	/^		std::vector<U8>&& getBytes()$/;"	f	struct:WAVM::Serialization::ArrayOutputStream
getCFA	ThirdParty/libunwind/src/DwarfInstructions.hpp	/^  static pint_t getCFA(A &addressSpace, const PrologInfo &prolog,$/;"	f	class:libunwind::DwarfInstructions
getCXABeginCatchFunction	Lib/LLVMJIT/EmitExceptions.cpp	/^static llvm::Function* getCXABeginCatchFunction(EmitModuleContext& moduleContext)$/;"	f	file:
getCXAEndCatchFunction	Lib/LLVMJIT/EmitExceptions.cpp	/^static llvm::Function* getCXAEndCatchFunction(EmitModuleContext& moduleContext)$/;"	f	file:
getCallingConvention	Include/WAVM/Runtime/Intrinsics.h	/^		IR::CallingConvention getCallingConvention() const { return callingConvention; }$/;"	f	struct:WAVM::Intrinsics::Function
getCompartment	Lib/Runtime/Compartment.cpp	/^Compartment* Runtime::getCompartment(Object* object)$/;"	f	class:Runtime
getCompartmentAddress	Lib/LLVMJIT/EmitContext.h	/^		llvm::Value* getCompartmentAddress()$/;"	f	struct:WAVM::LLVMJIT::EmitContext
getCompartmentFromContextRuntimeData	Lib/Runtime/Runtime.cpp	/^Compartment* Runtime::getCompartmentFromContextRuntimeData($/;"	f	class:Runtime
getCompartmentRuntimeData	Include/WAVM/Runtime/RuntimeData.h	/^	inline CompartmentRuntimeData* getCompartmentRuntimeData(ContextRuntimeData* contextRuntimeData)$/;"	f	namespace:WAVM::Runtime
getContextFromRuntimeData	Lib/Runtime/Runtime.cpp	/^Context* Runtime::getContextFromRuntimeData(ContextRuntimeData* contextRuntimeData)$/;"	f	class:Runtime
getContextRuntimeData	Lib/Runtime/Runtime.cpp	/^ContextRuntimeData* Runtime::getContextRuntimeData(const Context* context)$/;"	f	class:Runtime
getControlStackSize	Lib/IR/Validate.cpp	/^	Uptr getControlStackSize() { return controlStack.size(); }$/;"	f	struct:FunctionValidationContext
getCurrentModule	Lib/Platform/Windows/Diagnostics.cpp	/^static HMODULE getCurrentModule()$/;"	f	file:
getCurrentThread	Lib/ThreadTest/ThreadTest.cpp	/^FORCENOINLINE static Thread* getCurrentThread() { return currentThread; }$/;"	f	file:
getCurrentWorkingDirectory	Lib/Platform/POSIX/File.cpp	/^std::string Platform::getCurrentWorkingDirectory()$/;"	f	class:Platform
getCurrentWorkingDirectory	Lib/Platform/Windows/File.cpp	/^std::string Platform::getCurrentWorkingDirectory()$/;"	f	class:Platform
getDef	Include/WAVM/IR/Module.h	/^		const Definition& getDef(Uptr index) const$/;"	f	struct:WAVM::IR::Opcode::Elem::IndexSpace
getDefaultMemory	Lib/Runtime/Module.cpp	/^Memory* Runtime::getDefaultMemory(ModuleInstance* moduleInstance)$/;"	f	class:Runtime
getDefaultTable	Lib/Runtime/Module.cpp	/^Table* Runtime::getDefaultTable(ModuleInstance* moduleInstance)$/;"	f	class:Runtime
getDisassemblyNames	Lib/IR/DisassemblyNames.cpp	/^void IR::getDisassemblyNames(const Module& module, DisassemblyNames& outNames)$/;"	f	class:NameSubsectionType::IR	file:
getDouble	ThirdParty/libunwind/src/AddressSpace.hpp	/^  double           getDouble(pint_t addr) {$/;"	f	class:libunwind::LocalAddressSpace
getEBP	ThirdParty/libunwind/src/Registers.hpp	/^  uint32_t  getEBP() const         { return _registers.__ebp; }$/;"	f	class:libunwind::Registers_x86
getEBX	ThirdParty/libunwind/src/Registers.hpp	/^  uint32_t  getEBX() const         { return _registers.__ebx; }$/;"	f	class:libunwind::Registers_x86
getECX	ThirdParty/libunwind/src/Registers.hpp	/^  uint32_t  getECX() const         { return _registers.__ecx; }$/;"	f	class:libunwind::Registers_x86
getEDI	ThirdParty/libunwind/src/Registers.hpp	/^  uint32_t  getEDI() const         { return _registers.__edi; }$/;"	f	class:libunwind::Registers_x86
getEDX	ThirdParty/libunwind/src/Registers.hpp	/^  uint32_t  getEDX() const         { return _registers.__edx; }$/;"	f	class:libunwind::Registers_x86
getESI	ThirdParty/libunwind/src/Registers.hpp	/^  uint32_t  getESI() const         { return _registers.__esi; }$/;"	f	class:libunwind::Registers_x86
getEmscriptenInstance	Lib/Emscripten/Emscripten.cpp	/^static Emscripten::Instance* getEmscriptenInstance(Runtime::ContextRuntimeData* contextRuntimeData)$/;"	f	file:
getEncodedP	ThirdParty/libunwind/src/AddressSpace.hpp	/^LocalAddressSpace::getEncodedP(pint_t &addr, pint_t end, uint8_t encoding,$/;"	f	class:libunwind::LocalAddressSpace
getEncoding	Include/WAVM/IR/Types.h	/^		Encoding getEncoding() const { return Encoding{reinterpret_cast<Uptr>(impl)}; }$/;"	f	struct:WAVM::IR::ValueType::FunctionType
getEndTimeFromTimeout	Lib/Runtime/Atomics.cpp	/^static U64 getEndTimeFromTimeout(U64 startTimeMicroseconds, I64 timeoutNanoseconds)$/;"	f	file:
getErrorReportingMutex	Lib/Platform/POSIX/Diagnostics.cpp	/^static Mutex& getErrorReportingMutex()$/;"	f	file:
getErrorReportingMutex	Lib/Platform/Windows/Diagnostics.cpp	/^static Mutex& getErrorReportingMutex()$/;"	f	file:
getExceptionArgument	Lib/Runtime/Exception.cpp	/^IR::UntaggedValue Runtime::getExceptionArgument(const Exception* exception, Uptr argIndex)$/;"	f	class:Runtime
getExceptionType	Lib/Runtime/Exception.cpp	/^ExceptionType* Runtime::getExceptionType(const Exception* exception) { return exception->type; }$/;"	f	class:Runtime
getExceptionTypeParameters	Lib/Runtime/Exception.cpp	/^IR::TypeTuple Runtime::getExceptionTypeParameters(const ExceptionType* type)$/;"	f	class:Runtime
getExpectedTrapType	Test/RunTestScript/RunTestScript.cpp	/^static Runtime::ExceptionType* getExpectedTrapType(WAST::ExpectedTrapType expectedType)$/;"	f	file:
getExternalName	Lib/LLVMJIT/LLVMJITPrivate.h	/^	inline std::string getExternalName(const char* baseName, Uptr index)$/;"	f	namespace:WAVM::LLVMJIT
getFP	ThirdParty/libunwind/src/Registers.hpp	/^  uint64_t  getFP() const         { return _registers.__fp; }$/;"	f	class:libunwind::Registers_arm64
getFileForCategory	Lib/Logging/Logging.cpp	/^static FILE* getFileForCategory(Log::Category category)$/;"	f	file:
getFloatReg	ThirdParty/libunwind/src/UnwindCursor.hpp	/^  virtual unw_fpreg_t getFloatReg(int) {$/;"	f	class:libunwind::AbstractUnwindCursor
getFloatReg	ThirdParty/libunwind/src/UnwindCursor.hpp	/^unw_fpreg_t UnwindCursor<A, R>::getFloatReg(int regNum) {$/;"	f	class:libunwind::UnwindCursor
getFloatRegister	ThirdParty/libunwind/src/Registers.hpp	/^inline double Registers_arm64::getFloatRegister(int regNum) const {$/;"	f	class:libunwind::Registers_arm64
getFloatRegister	ThirdParty/libunwind/src/Registers.hpp	/^inline double Registers_mips_newabi::getFloatRegister(int \/* regNum *\/) const {$/;"	f	class:libunwind::Registers_mips_newabi
getFloatRegister	ThirdParty/libunwind/src/Registers.hpp	/^inline double Registers_mips_o32::getFloatRegister(int \/* regNum *\/) const {$/;"	f	class:libunwind::Registers_mips_o32
getFloatRegister	ThirdParty/libunwind/src/Registers.hpp	/^inline double Registers_or1k::getFloatRegister(int \/* regNum *\/) const {$/;"	f	class:libunwind::Registers_or1k
getFloatRegister	ThirdParty/libunwind/src/Registers.hpp	/^inline double Registers_ppc64::getFloatRegister(int regNum) const {$/;"	f	class:libunwind::Registers_ppc64
getFloatRegister	ThirdParty/libunwind/src/Registers.hpp	/^inline double Registers_ppc::getFloatRegister(int regNum) const {$/;"	f	class:libunwind::Registers_ppc
getFloatRegister	ThirdParty/libunwind/src/Registers.hpp	/^inline double Registers_x86::getFloatRegister(int) const {$/;"	f	class:libunwind::Registers_x86
getFloatRegister	ThirdParty/libunwind/src/Registers.hpp	/^inline double Registers_x86_64::getFloatRegister(int) const {$/;"	f	class:libunwind::Registers_x86_64
getFloatRegister	ThirdParty/libunwind/src/Registers.hpp	/^inline unw_fpreg_t Registers_arm::getFloatRegister(int regNum) {$/;"	f	class:libunwind::Registers_arm
getFunctionByAddress	Lib/LLVMJIT/LLVMModule.cpp	/^Runtime::Function* LLVMJIT::getFunctionByAddress(Uptr address)$/;"	f	class:LLVMJIT
getFunctionName	ThirdParty/libunwind/src/UnwindCursor.hpp	/^  virtual bool getFunctionName(char *, size_t, unw_word_t *) {$/;"	f	class:libunwind::AbstractUnwindCursor
getFunctionName	ThirdParty/libunwind/src/UnwindCursor.hpp	/^bool UnwindCursor<A, R>::getFunctionName(char *buf, size_t bufLen,$/;"	f	class:libunwind::UnwindCursor
getFunctionType	Lib/Runtime/Runtime.cpp	/^FunctionType Runtime::getFunctionType(Function* function) { return function->encodedType; }$/;"	f	class:Runtime
getGasUsed	Lib/Emscripten/Emscripten.cpp	/^U64 Emscripten::getGasUsed(Emscripten::Instance* instance) {$/;"	f	class:ioStreamVMHandle::Emscripten	file:
getGlobalValue	Lib/Runtime/Global.cpp	/^Value Runtime::getGlobalValue(const Context* context, Global* global)$/;"	f	class:Runtime
getGraphEdgeCharLabel	Lib/NFA/NFA.cpp	/^static std::string getGraphEdgeCharLabel(Uptr charIndex)$/;"	f	file:
getGraphEdgeLabel	Lib/NFA/NFA.cpp	/^static std::string getGraphEdgeLabel(const CharSet& charSet)$/;"	f	file:
getHash	Include/WAVM/IR/Types.h	/^		Uptr getHash() const { return impl->hash; }$/;"	f	struct:WAVM::IR::ValueType::FunctionType
getHash	Include/WAVM/IR/Types.h	/^		Uptr getHash() const { return impl->hash; }$/;"	f	struct:WAVM::IR::ValueType::TypeTuple
getHash	Include/WAVM/Inline/DenseStaticIntSet.h	/^		Uptr getHash(Uptr seed = 0) const { return XXH<Uptr>(elements, sizeof(elements), seed); }$/;"	f	struct:WAVM::DenseStaticIntSet
getHash	Lib/WASTParse/Parse.h	/^		Uptr getHash() const { return XXH<Uptr>(begin, numChars, 0); }$/;"	f	struct:WAVM::WAST::Name
getIP	ThirdParty/libunwind/src/Registers.hpp	/^  uint32_t  getIP() const          { return _registers.__eip; }$/;"	f	class:libunwind::Registers_x86
getIP	ThirdParty/libunwind/src/Registers.hpp	/^  uint32_t  getIP() const         { return _registers.__pc; }$/;"	f	class:libunwind::Registers_arm
getIP	ThirdParty/libunwind/src/Registers.hpp	/^  uint32_t  getIP() const         { return _registers.__pc; }$/;"	f	class:libunwind::Registers_mips_o32
getIP	ThirdParty/libunwind/src/Registers.hpp	/^  uint64_t  getIP() const          { return _registers.__rip; }$/;"	f	class:libunwind::Registers_x86_64
getIP	ThirdParty/libunwind/src/Registers.hpp	/^  uint64_t  getIP() const         { return _registers.__pc; }$/;"	f	class:libunwind::Registers_arm64
getIP	ThirdParty/libunwind/src/Registers.hpp	/^  uint64_t  getIP() const         { return _registers.__pc; }$/;"	f	class:libunwind::Registers_mips_newabi
getIP	ThirdParty/libunwind/src/Registers.hpp	/^  uint64_t  getIP() const         { return _registers.__r[9]; }$/;"	f	class:libunwind::Registers_or1k
getIP	ThirdParty/libunwind/src/Registers.hpp	/^  uint64_t  getIP() const         { return _registers.__srr0; }$/;"	f	class:libunwind::Registers_ppc
getIP	ThirdParty/libunwind/src/Registers.hpp	/^  uint64_t  getIP() const         { return _registers.__srr0; }$/;"	f	class:libunwind::Registers_ppc64
getImageBaseAddress	Lib/LLVMJIT/LLVMModule.cpp	/^	U8* getImageBaseAddress() const { return imageBaseAddress; }$/;"	f	struct:LLVMJIT::ModuleMemoryManager
getImportedImmutableGlobalValue	Lib/LLVMJIT/EmitVar.cpp	/^static llvm::Value* getImportedImmutableGlobalValue(EmitFunctionContext& functionContext,$/;"	f	file:
getIndexedBlockType	Test/fuzz/fuzz-compile-model.cpp	/^IndexedBlockType getIndexedBlockType(IR::Module& module,$/;"	f
getInfo	ThirdParty/libunwind/src/UnwindCursor.hpp	/^  virtual void getInfo(unw_proc_info_t *) {$/;"	f	class:libunwind::AbstractUnwindCursor
getInfo	ThirdParty/libunwind/src/UnwindCursor.hpp	/^void UnwindCursor<A, R>::getInfo(unw_proc_info_t *info) {$/;"	f	class:libunwind::UnwindCursor
getInfoFromCompactEncodingSection	ThirdParty/libunwind/src/UnwindCursor.hpp	/^bool UnwindCursor<A, R>::getInfoFromCompactEncodingSection(pint_t pc,$/;"	f	class:libunwind::UnwindCursor
getInfoFromDwarfSection	ThirdParty/libunwind/src/UnwindCursor.hpp	/^bool UnwindCursor<A, R>::getInfoFromDwarfSection(pint_t pc,$/;"	f	class:libunwind::UnwindCursor
getInfoFromEHABISection	ThirdParty/libunwind/src/UnwindCursor.hpp	/^bool UnwindCursor<A, R>::getInfoFromEHABISection($/;"	f	class:libunwind::UnwindCursor
getInnermostUnwindToBlock	Lib/LLVMJIT/EmitExceptions.cpp	/^llvm::BasicBlock* EmitFunctionContext::getInnermostUnwindToBlock()$/;"	f	class:EmitFunctionContext
getInstance	Include/WAVM/Runtime/Intrinsics.h	/^		Runtime::Memory* getInstance(Runtime::ModuleInstance* moduleInstance)$/;"	f	struct:WAVM::Intrinsics::Memory
getInstance	Include/WAVM/Runtime/Intrinsics.h	/^		Runtime::Table* getInstance(Runtime::ModuleInstance* moduleInstance)$/;"	f	struct:WAVM::Intrinsics::Table
getInstanceExport	Lib/Runtime/Module.cpp	/^Object* Runtime::getInstanceExport(ModuleInstance* moduleInstance, const std::string& name)$/;"	f	class:Runtime
getIntrinsicThunk	Lib/LLVMJIT/Thunk.cpp	/^Runtime::Function* LLVMJIT::getIntrinsicThunk(void* nativeFunction,$/;"	f	class:LLVMJIT
getInvokeThunk	Lib/LLVMJIT/Thunk.cpp	/^InvokeThunkPointer LLVMJIT::getInvokeThunk(FunctionType functionType)$/;"	f	class:LLVMJIT
getKey	Include/WAVM/Inline/HashMap.h	/^			FORCEINLINE static const Key& getKey(const Pair& pair) { return pair.key; }$/;"	f	struct:WAVM::HashMap::HashTablePolicy
getKey	Include/WAVM/Inline/HashSet.h	/^			FORCEINLINE static const Element& getKey(const Element& element) { return element; }$/;"	f	struct:WAVM::HashSet::HashTablePolicy
getKeyHash	Include/WAVM/Inline/Hash.h	/^		static Uptr getKeyHash(const Key& key) { return Hash<Key>()(key); }$/;"	f	struct:WAVM::DefaultHashPolicy
getKeyHash	Lib/IR/Types.cpp	/^	static Uptr getKeyHash(FunctionType functionType) { return functionType.getHash(); }$/;"	f	struct:FunctionTypeHashPolicy
getKeyHash	Lib/IR/Types.cpp	/^	static Uptr getKeyHash(TypeTuple typeTuple) { return typeTuple.getHash(); }$/;"	f	struct:TypeTupleHashPolicy
getKeyHash	Lib/WASTParse/Parse.h	/^			static Uptr getKeyHash(const Name& name) { return name.getHash(); }$/;"	f	struct:WAVM::WAST::Name::HashPolicy
getLLVMIntrinsic	Lib/LLVMJIT/EmitModuleContext.h	/^		inline llvm::Function* getLLVMIntrinsic(llvm::ArrayRef<llvm::Type*> typeArguments,$/;"	f	struct:WAVM::LLVMJIT::EmitModuleContext
getLLVMReturnStructType	Lib/LLVMJIT/LLVMJITPrivate.h	/^	inline llvm::StructType* getLLVMReturnStructType(LLVMContext& llvmContext,$/;"	f	namespace:WAVM::LLVMJIT
getLineOffset	Lib/WASTParse/Lexer.cpp	/^static Uptr getLineOffset(const LineInfo* lineInfo, Uptr lineIndex)$/;"	f	file:
getMaxCastableF64	Lib/WASTParse/ParseNumbers.cpp	/^template<typename DestFloat> static F64 getMaxCastableF64()$/;"	f	file:
getMaxDesiredBuckets	Include/WAVM/Inline/HashTable.h	/^		static Uptr getMaxDesiredBuckets(Uptr numDesiredElements)$/;"	f	struct:WAVM::DefaultHashTableAllocPolicy
getMaxIndex	Include/WAVM/Inline/IndexMap.h	/^		Index getMaxIndex() const { return maxIndex; }$/;"	f	struct:WAVM::IndexMap
getMemoryBaseAddress	Lib/Runtime/Memory.cpp	/^U8* Runtime::getMemoryBaseAddress(Memory* memory) { return memory->baseAddress; }$/;"	f	class:Runtime
getMemoryFromRuntimeData	Lib/Runtime/Runtime.cpp	/^Memory* Runtime::getMemoryFromRuntimeData(ContextRuntimeData* contextRuntimeData, Uptr memoryId)$/;"	f	class:Runtime
getMemoryIdFromOffset	Lib/LLVMJIT/LLVMJITPrivate.h	/^	inline llvm::Constant* getMemoryIdFromOffset(LLVMContext& llvmContext,$/;"	f	namespace:WAVM::LLVMJIT
getMemoryImage	Lib/Emscripten/Emscripten.cpp	/^void Emscripten::getMemoryImage(Emscripten::Instance* instance, std::vector<U8>& memImage) {$/;"	f	class:ioStreamVMHandle::Emscripten	file:
getMemoryImage	Lib/Runtime/Memory.cpp	/^void Runtime::getMemoryImage(Memory* memory, std::vector<U8>& memImage) {$/;"	f	class:Runtime
getMemoryMaxPages	Lib/Runtime/Memory.cpp	/^Uptr Runtime::getMemoryMaxPages(Memory* memory)$/;"	f	class:Runtime
getMemoryNumPages	Lib/Runtime/Memory.cpp	/^Uptr Runtime::getMemoryNumPages(Memory* memory)$/;"	f	class:Runtime
getMicroseconds	Include/WAVM/Inline/Timing.h	/^		U64 getMicroseconds()$/;"	f	struct:WAVM::Timing::Timer
getMilliseconds	Include/WAVM/Inline/Timing.h	/^		F64 getMilliseconds() { return getMicroseconds() \/ 1000.0; }$/;"	f	struct:WAVM::Timing::Timer
getMinDesiredBuckets	Include/WAVM/Inline/HashTable.h	/^		static Uptr getMinDesiredBuckets(Uptr numDesiredElements)$/;"	f	struct:WAVM::DefaultHashTableAllocPolicy
getMinIndex	Include/WAVM/Inline/IndexMap.h	/^		Index getMinIndex() const { return minIndex; }$/;"	f	struct:WAVM::IndexMap
getModuleContextByInternalName	Test/RunTestScript/RunTestScript.cpp	/^static ModuleInstance* getModuleContextByInternalName(TestScriptState& state,$/;"	f	file:
getModuleFromBaseAddress	Lib/Platform/Windows/Diagnostics.cpp	/^static HMODULE getModuleFromBaseAddress(Uptr baseAddress)$/;"	f	file:
getModuleIR	Lib/Runtime/Module.cpp	/^const IR::Module& Runtime::getModuleIR(ModuleConstRefParam module) { return module->ir; }$/;"	f	class:Runtime
getModuleInstanceFromRuntimeData	Lib/Runtime/Runtime.cpp	/^ModuleInstance* Runtime::getModuleInstanceFromRuntimeData(ContextRuntimeData* contextRuntimeData,$/;"	f	class:Runtime
getModuleName	Lib/Platform/Windows/Diagnostics.cpp	/^static std::string getModuleName(HMODULE module)$/;"	f	file:
getMonotonicClock	Lib/Platform/POSIX/Clock.cpp	/^U64 Platform::getMonotonicClock()$/;"	f	class:Platform
getMonotonicClock	Lib/Platform/Windows/Clock.cpp	/^U64 Platform::getMonotonicClock()$/;"	f	class:Platform
getMoreData	Include/WAVM/Inline/Serialization.h	/^		virtual void getMoreData(Uptr numBytes)$/;"	f	struct:WAVM::Serialization::MemoryInputStream
getNativeFunction	Include/WAVM/Runtime/Intrinsics.h	/^		void* getNativeFunction() const { return nativeFunction; }$/;"	f	struct:WAVM::Intrinsics::Function
getNextNibble	ThirdParty/libunwind/src/Unwind-EHABI.cpp	/^const char* getNextNibble(const char* data, uint32_t* out) {$/;"	f	namespace:__anon79
getNextWord	ThirdParty/libunwind/src/Unwind-EHABI.cpp	/^const char* getNextWord(const char* data, uint32_t* out) {$/;"	f	namespace:__anon79
getNonParametricOpSigs	Lib/IR/Operators.cpp	/^const IR::NonParametricOpSignatures& IR::getNonParametricOpSigs()$/;"	f	class:IR
getNonSignalStack	Lib/Platform/POSIX/Thread.cpp	/^void SigAltStack::getNonSignalStack(U8*& outMinGuardAddr, U8*& outMinAddr, U8*& outMaxAddr)$/;"	f	class:SigAltStack
getNonTerminalEdge	Lib/NFA/NFA.cpp	/^StateIndex NFA::getNonTerminalEdge(Builder* builder, StateIndex initialState, char c)$/;"	f	class:NFA
getNumImageBytes	Lib/LLVMJIT/LLVMModule.cpp	/^	Uptr getNumImageBytes() const { return numAllocatedImagePages << Platform::getPageSizeLog2(); }$/;"	f	struct:LLVMJIT::ModuleMemoryManager
getNumPlatformPages	Lib/Runtime/Table.cpp	/^static Uptr getNumPlatformPages(Uptr numBytes)$/;"	f	file:
getNumberOfHardwareThreads	Lib/Platform/POSIX/Thread.cpp	/^Uptr Platform::getNumberOfHardwareThreads() { return std::thread::hardware_concurrency(); }$/;"	f	class:Platform
getNumberOfHardwareThreads	Lib/Platform/Windows/Thread.cpp	/^Uptr Platform::getNumberOfHardwareThreads()$/;"	f	class:Platform
getNumberOfHardwareThreadsImpl	Lib/Platform/Windows/Thread.cpp	/^static Uptr getNumberOfHardwareThreadsImpl()$/;"	f	file:
getObjectCode	Lib/Runtime/Module.cpp	/^std::vector<U8> Runtime::getObjectCode(ModuleConstRefParam module) { return module->objectCode; }$/;"	f	class:Runtime
getObjectType	Lib/Runtime/Runtime.cpp	/^ExternType Runtime::getObjectType(Object* object)$/;"	f	class:Runtime
getOffsetAndBoundedAddress	Lib/LLVMJIT/EmitMem.cpp	/^static llvm::Value* getOffsetAndBoundedAddress(EmitContext& emitContext,$/;"	f	file:
getOpcodeName	Lib/IR/Operators.cpp	/^const char* IR::getOpcodeName(Opcode opcode)$/;"	f	class:IR
getOrAdd	Include/WAVM/Inline/ConcurrentHashMap.h	/^		template<typename... ValueArgs> Value getOrAdd(const Key& key, ValueArgs&&... valueArgs)$/;"	f	struct:WAVM::ConcurrentHashMap
getOrAdd	Include/WAVM/Inline/HashMapImpl.h	/^Value& HashMap<HASHMAP_ARGUMENTS>::getOrAdd(const Key& key, ValueArgs&&... valueArgs)$/;"	f	class:HashMap
getOutOfBoundsElement	Lib/Runtime/Table.cpp	/^Object* Runtime::getOutOfBoundsElement()$/;"	f	class:Runtime
getOutput	Lib/LLVMJIT/LLVMCompile.cpp	/^	std::vector<U8>&& getOutput() { return std::move(output); }$/;"	f	struct:LLVMArrayOutputStream
getP	ThirdParty/libunwind/src/AddressSpace.hpp	/^inline uintptr_t LocalAddressSpace::getP(pint_t addr) {$/;"	f	class:libunwind::LocalAddressSpace
getP	ThirdParty/libunwind/src/AddressSpace.hpp	/^typename P::uint_t RemoteAddressSpace<P>::getP(pint_t addr) {$/;"	f	class:libunwind::RemoteAddressSpace
getPageSizeLog2	Lib/Platform/POSIX/Memory.cpp	/^Uptr Platform::getPageSizeLog2()$/;"	f	class:Platform
getPageSizeLog2	Lib/Platform/Windows/Memory.cpp	/^Uptr Platform::getPageSizeLog2()$/;"	f	class:Platform
getPair	Include/WAVM/Inline/HashMapImpl.h	/^const HashMapPair<Key, Value>* HashMap<HASHMAP_ARGUMENTS>::getPair(const Key& key) const$/;"	f	class:HashMap
getPlatformPagesPerWebAssemblyPageLog2	Lib/Runtime/Memory.cpp	/^static Uptr getPlatformPagesPerWebAssemblyPageLog2()$/;"	f	file:
getProcessFromContextRuntimeData	Lib/WASI/WASI.cpp	/^static Process* getProcessFromContextRuntimeData(ContextRuntimeData* contextRuntimeData)$/;"	f	file:
getProcessorGroupInfos	Lib/Platform/Windows/Thread.cpp	/^static std::vector<ProcessorGroupInfo> getProcessorGroupInfos()$/;"	f	file:
getR12	ThirdParty/libunwind/src/Registers.hpp	/^  uint64_t  getR12() const         { return _registers.__r12; }$/;"	f	class:libunwind::Registers_x86_64
getR13	ThirdParty/libunwind/src/Registers.hpp	/^  uint64_t  getR13() const         { return _registers.__r13; }$/;"	f	class:libunwind::Registers_x86_64
getR14	ThirdParty/libunwind/src/Registers.hpp	/^  uint64_t  getR14() const         { return _registers.__r14; }$/;"	f	class:libunwind::Registers_x86_64
getR15	ThirdParty/libunwind/src/Registers.hpp	/^  uint64_t  getR15() const         { return _registers.__r15; }$/;"	f	class:libunwind::Registers_x86_64
getRBP	ThirdParty/libunwind/src/Registers.hpp	/^  uint64_t  getRBP() const         { return _registers.__rbp; }$/;"	f	class:libunwind::Registers_x86_64
getRBX	ThirdParty/libunwind/src/Registers.hpp	/^  uint64_t  getRBX() const         { return _registers.__rbx; }$/;"	f	class:libunwind::Registers_x86_64
getReg	ThirdParty/libunwind/src/UnwindCursor.hpp	/^  virtual unw_word_t getReg(int) { _LIBUNWIND_ABORT("getReg not implemented"); }$/;"	f	class:libunwind::AbstractUnwindCursor
getReg	ThirdParty/libunwind/src/UnwindCursor.hpp	/^unw_word_t UnwindCursor<A, R>::getReg(int regNum) {$/;"	f	class:libunwind::UnwindCursor
getRegister	ThirdParty/libunwind/src/AddressSpace.hpp	/^inline uint64_t LocalAddressSpace::getRegister(pint_t addr) {$/;"	f	class:libunwind::LocalAddressSpace
getRegister	ThirdParty/libunwind/src/AddressSpace.hpp	/^typename P::uint_t OtherAddressSpace<P>::getRegister(pint_t addr) {$/;"	f	class:libunwind::OtherAddressSpace
getRegister	ThirdParty/libunwind/src/Registers.hpp	/^inline uint32_t Registers_arm::getRegister(int regNum) const {$/;"	f	class:libunwind::Registers_arm
getRegister	ThirdParty/libunwind/src/Registers.hpp	/^inline uint32_t Registers_mips_o32::getRegister(int regNum) const {$/;"	f	class:libunwind::Registers_mips_o32
getRegister	ThirdParty/libunwind/src/Registers.hpp	/^inline uint32_t Registers_or1k::getRegister(int regNum) const {$/;"	f	class:libunwind::Registers_or1k
getRegister	ThirdParty/libunwind/src/Registers.hpp	/^inline uint32_t Registers_ppc::getRegister(int regNum) const {$/;"	f	class:libunwind::Registers_ppc
getRegister	ThirdParty/libunwind/src/Registers.hpp	/^inline uint32_t Registers_x86::getRegister(int regNum) const {$/;"	f	class:libunwind::Registers_x86
getRegister	ThirdParty/libunwind/src/Registers.hpp	/^inline uint64_t Registers_arm64::getRegister(int regNum) const {$/;"	f	class:libunwind::Registers_arm64
getRegister	ThirdParty/libunwind/src/Registers.hpp	/^inline uint64_t Registers_mips_newabi::getRegister(int regNum) const {$/;"	f	class:libunwind::Registers_mips_newabi
getRegister	ThirdParty/libunwind/src/Registers.hpp	/^inline uint64_t Registers_ppc64::getRegister(int regNum) const {$/;"	f	class:libunwind::Registers_ppc64
getRegister	ThirdParty/libunwind/src/Registers.hpp	/^inline uint64_t Registers_x86_64::getRegister(int regNum) const {$/;"	f	class:libunwind::Registers_x86_64
getRegisterName	ThirdParty/libunwind/src/Registers.hpp	/^inline const char *Registers_arm64::getRegisterName(int regNum) {$/;"	f	class:libunwind::Registers_arm64
getRegisterName	ThirdParty/libunwind/src/Registers.hpp	/^inline const char *Registers_arm::getRegisterName(int regNum) {$/;"	f	class:libunwind::Registers_arm
getRegisterName	ThirdParty/libunwind/src/Registers.hpp	/^inline const char *Registers_mips_newabi::getRegisterName(int regNum) {$/;"	f	class:libunwind::Registers_mips_newabi
getRegisterName	ThirdParty/libunwind/src/Registers.hpp	/^inline const char *Registers_mips_o32::getRegisterName(int regNum) {$/;"	f	class:libunwind::Registers_mips_o32
getRegisterName	ThirdParty/libunwind/src/Registers.hpp	/^inline const char *Registers_or1k::getRegisterName(int regNum) {$/;"	f	class:libunwind::Registers_or1k
getRegisterName	ThirdParty/libunwind/src/Registers.hpp	/^inline const char *Registers_ppc64::getRegisterName(int regNum) {$/;"	f	class:libunwind::Registers_ppc64
getRegisterName	ThirdParty/libunwind/src/Registers.hpp	/^inline const char *Registers_ppc::getRegisterName(int regNum) {$/;"	f	class:libunwind::Registers_ppc
getRegisterName	ThirdParty/libunwind/src/Registers.hpp	/^inline const char *Registers_x86::getRegisterName(int regNum) {$/;"	f	class:libunwind::Registers_x86
getRegisterName	ThirdParty/libunwind/src/Registers.hpp	/^inline const char *Registers_x86_64::getRegisterName(int regNum) {$/;"	f	class:libunwind::Registers_x86_64
getRegisterName	ThirdParty/libunwind/src/UnwindCursor.hpp	/^  virtual const char *getRegisterName(int) {$/;"	f	class:libunwind::AbstractUnwindCursor
getRegisterName	ThirdParty/libunwind/src/UnwindCursor.hpp	/^const char *UnwindCursor<A, R>::getRegisterName(int regNum) {$/;"	f	class:libunwind::UnwindCursor
getReservedMemoryOffsetRange	Lib/Runtime/Memory.cpp	/^U8* Runtime::getReservedMemoryOffsetRange(Memory* memory, Uptr address, Uptr numBytes)$/;"	f	class:Runtime
getSLEB128	ThirdParty/libunwind/src/AddressSpace.hpp	/^inline int64_t LocalAddressSpace::getSLEB128(pint_t &addr, pint_t end) {$/;"	f	class:libunwind::LocalAddressSpace
getSLEB128	ThirdParty/libunwind/src/AddressSpace.hpp	/^int64_t RemoteAddressSpace<P>::getSLEB128(pint_t &addr, pint_t end) {$/;"	f	class:libunwind::RemoteAddressSpace
getSP	ThirdParty/libunwind/src/Registers.hpp	/^  uint32_t  getSP() const          { return _registers.__esp; }$/;"	f	class:libunwind::Registers_x86
getSP	ThirdParty/libunwind/src/Registers.hpp	/^  uint32_t  getSP() const         { return _registers.__r[29]; }$/;"	f	class:libunwind::Registers_mips_o32
getSP	ThirdParty/libunwind/src/Registers.hpp	/^  uint32_t  getSP() const         { return _registers.__sp; }$/;"	f	class:libunwind::Registers_arm
getSP	ThirdParty/libunwind/src/Registers.hpp	/^  uint64_t  getSP() const          { return _registers.__rsp; }$/;"	f	class:libunwind::Registers_x86_64
getSP	ThirdParty/libunwind/src/Registers.hpp	/^  uint64_t  getSP() const         { return _registers.__r1; }$/;"	f	class:libunwind::Registers_ppc
getSP	ThirdParty/libunwind/src/Registers.hpp	/^  uint64_t  getSP() const         { return _registers.__r1; }$/;"	f	class:libunwind::Registers_ppc64
getSP	ThirdParty/libunwind/src/Registers.hpp	/^  uint64_t  getSP() const         { return _registers.__r[1]; }$/;"	f	class:libunwind::Registers_or1k
getSP	ThirdParty/libunwind/src/Registers.hpp	/^  uint64_t  getSP() const         { return _registers.__r[29]; }$/;"	f	class:libunwind::Registers_mips_newabi
getSP	ThirdParty/libunwind/src/Registers.hpp	/^  uint64_t  getSP() const         { return _registers.__sp; }$/;"	f	class:libunwind::Registers_arm64
getSavedFloatRegister	ThirdParty/libunwind/src/DwarfInstructions.hpp	/^double DwarfInstructions<A, R>::getSavedFloatRegister($/;"	f	class:libunwind::DwarfInstructions
getSavedRegister	ThirdParty/libunwind/src/DwarfInstructions.hpp	/^typename A::pint_t DwarfInstructions<A, R>::getSavedRegister($/;"	f	class:libunwind::DwarfInstructions
getSavedVectorRegister	ThirdParty/libunwind/src/DwarfInstructions.hpp	/^v128 DwarfInstructions<A, R>::getSavedVectorRegister($/;"	f	class:libunwind::DwarfInstructions
getSeconds	Include/WAVM/Inline/Timing.h	/^		F64 getSeconds() { return getMicroseconds() \/ 1000000.0; }$/;"	f	struct:WAVM::Timing::Timer
getSmallestMember	Include/WAVM/Inline/DenseStaticIntSet.h	/^		inline Index getSmallestMember() const$/;"	f	struct:WAVM::DenseStaticIntSet
getSmallestNonMember	Include/WAVM/Inline/DenseStaticIntSet.h	/^		inline Index getSmallestNonMember() const$/;"	f	struct:WAVM::DenseStaticIntSet
getSourceOffset	Lib/WASTParse/Parse.h	/^		constexpr Uptr getSourceOffset() const { return sourceOffset; }$/;"	f	struct:WAVM::WAST::Name
getStackPointer	Lib/Platform/POSIX/POSIXPrivate.h	/^inline U8* getStackPointer() { WAVM::Errors::fatal("getStackPointer is unimplemented on Wavix"); }$/;"	f
getStackPointer	Lib/Platform/Windows/Win64.asm	/^getStackPointer PROC$/;"	l
getStartFunction	Lib/Runtime/Module.cpp	/^Function* Runtime::getStartFunction(ModuleInstance* moduleInstance)$/;"	f	class:Runtime
getStdFile	Lib/Platform/POSIX/File.cpp	/^File* Platform::getStdFile(StdDevice device)$/;"	f	class:Platform
getStdFile	Lib/Platform/Windows/File.cpp	/^File* Platform::getStdFile(StdDevice device)$/;"	f	class:Platform
getString	Lib/WASTParse/Parse.h	/^		std::string getString() const$/;"	f	struct:WAVM::WAST::Name
getStripeIndex	Include/WAVM/Inline/ConcurrentHashMap.h	/^		static Uptr getStripeIndex(const Key& key)$/;"	f	struct:WAVM::ConcurrentHashMap
getStubObject	Lib/Emscripten/Interface.cpp	/^    Object* getStubObject(const std::string& exportName,ExternType type) const$/;"	f	struct:RootResolver
getStubObject	Programs/wavm-run/wavm-run.cpp	/^	Object* getStubObject(const std::string& exportName, ExternType type) const$/;"	f	struct:RootResolver
getStubObject	Test/fuzz/fuzz-instantiate.cpp	/^	Runtime::Object* getStubObject(const std::string& exportName, IR::ExternType type) const$/;"	f	struct:StubResolver
getTableElement	Lib/Runtime/Table.cpp	/^Object* Runtime::getTableElement(Table* table, Uptr index)$/;"	f	class:Runtime
getTableElementNonNull	Lib/Runtime/Table.cpp	/^static Object* getTableElementNonNull(Table* table, Uptr index)$/;"	f	file:
getTableEntrySize	ThirdParty/libunwind/src/EHHeaderParser.hpp	/^size_t EHHeaderParser<A>::getTableEntrySize(uint8_t tableEnc) {$/;"	f	class:libunwind::EHHeaderParser
getTableFromRuntimeData	Lib/Runtime/Runtime.cpp	/^Table* Runtime::getTableFromRuntimeData(ContextRuntimeData* contextRuntimeData, Uptr tableId)$/;"	f	class:Runtime
getTableIdFromOffset	Lib/LLVMJIT/LLVMJITPrivate.h	/^	inline llvm::Constant* getTableIdFromOffset(LLVMContext& llvmContext,$/;"	f	namespace:WAVM::LLVMJIT
getTableNumElements	Lib/Runtime/Table.cpp	/^Uptr Runtime::getTableNumElements(Table* table)$/;"	f	class:Runtime
getThreadStack	Lib/Platform/POSIX/Thread.cpp	/^static void getThreadStack(pthread_t thread, U8*& outMinGuardAddr, U8*& outMinAddr, U8*& outMaxAddr)$/;"	f	file:
getTriviallyNonConstantZero	Lib/LLVMJIT/EmitWorkarounds.h	/^inline llvm::Value* getTriviallyNonConstantZero(llvm::IRBuilder<>& irBuilder, llvm::Type* type)$/;"	f
getType	Include/WAVM/IR/Module.h	/^		Type getType(Uptr index) const$/;"	f	struct:WAVM::IR::Opcode::Elem::IndexSpace
getTypeBitWidth	Include/WAVM/IR/Types.h	/^	inline U8 getTypeBitWidth(ValueType type) { return getTypeByteWidth(type) * 8; }$/;"	f	class:WAVM::IR::ValueType
getTypeByteWidth	Include/WAVM/IR/Types.h	/^	inline U8 getTypeByteWidth(ValueType type)$/;"	f	class:WAVM::IR::ValueType
getULEB128	ThirdParty/libunwind/src/AddressSpace.hpp	/^inline uint64_t LocalAddressSpace::getULEB128(pint_t &addr, pint_t end) {$/;"	f	class:libunwind::LocalAddressSpace
getULEB128	ThirdParty/libunwind/src/AddressSpace.hpp	/^uint64_t OtherAddressSpace<P>::getULEB128(pint_t &addr, pint_t end) {$/;"	f	class:libunwind::OtherAddressSpace
getUninitializedElement	Lib/Runtime/Table.cpp	/^static Object* getUninitializedElement()$/;"	f	file:
getUninstantiatedFunctions	Lib/Runtime/Intrinsics.cpp	/^HashMap<std::string, Intrinsics::Function*> Intrinsics::getUninstantiatedFunctions($/;"	f	class:Intrinsics
getUniqueFunctionTypeIndex	Lib/WASTParse/Parse.cpp	/^IndexedFunctionType WAST::getUniqueFunctionTypeIndex(ModuleState* moduleState,$/;"	f	class:WAST
getUniqueImpl	Lib/IR/Types.cpp	/^const FunctionType::Impl* IR::FunctionType::getUniqueImpl(TypeTuple results, TypeTuple params)$/;"	f	class:IR::FunctionType
getUniqueImpl	Lib/IR/Types.cpp	/^const TypeTuple::Impl* IR::TypeTuple::getUniqueImpl(Uptr numElems, const ValueType* inElems)$/;"	f	class:IR::TypeTuple
getUnwindRegisterName	Lib/LLVMJIT/Win64EH.cpp	/^static const char* getUnwindRegisterName(U8 registerIndex)$/;"	f	file:
getUserData	Lib/Runtime/Runtime.cpp	/^void* Runtime::getUserData(const Runtime::Function* function)$/;"	f	class:Runtime
getValidatedMemoryOffsetRange	Lib/Runtime/Memory.cpp	/^U8* Runtime::getValidatedMemoryOffsetRange(Memory* memory, Uptr address, Uptr numBytes)$/;"	f	class:Runtime
getValidatedMemoryOffsetRangeImpl	Lib/Runtime/Memory.cpp	/^static U8* getValidatedMemoryOffsetRangeImpl(Memory* memory,$/;"	f	file:
getValue	Include/WAVM/Runtime/Intrinsics.h	/^		IR::Value getValue() const { return value; }$/;"	f	struct:WAVM::Intrinsics::Global
getValueFromTop	Lib/LLVMJIT/EmitFunctionContext.h	/^		llvm::Value* getValueFromTop(Uptr offset = 0) const$/;"	f	struct:WAVM::LLVMJIT::EmitFunctionContext
getVector	ThirdParty/libunwind/src/AddressSpace.hpp	/^  v128             getVector(pint_t addr) {$/;"	f	class:libunwind::LocalAddressSpace
getVectorRegNum	ThirdParty/libunwind/src/Registers.hpp	/^inline int Registers_ppc64::getVectorRegNum(int num)$/;"	f	class:libunwind::Registers_ppc64
getVectorRegister	ThirdParty/libunwind/src/Registers.hpp	/^inline v128 Registers_arm64::getVectorRegister(int) const {$/;"	f	class:libunwind::Registers_arm64
getVectorRegister	ThirdParty/libunwind/src/Registers.hpp	/^inline v128 Registers_arm::getVectorRegister(int) const {$/;"	f	class:libunwind::Registers_arm
getVectorRegister	ThirdParty/libunwind/src/Registers.hpp	/^inline v128 Registers_mips_newabi::getVectorRegister(int \/* regNum *\/) const {$/;"	f	class:libunwind::Registers_mips_newabi
getVectorRegister	ThirdParty/libunwind/src/Registers.hpp	/^inline v128 Registers_mips_o32::getVectorRegister(int \/* regNum *\/) const {$/;"	f	class:libunwind::Registers_mips_o32
getVectorRegister	ThirdParty/libunwind/src/Registers.hpp	/^inline v128 Registers_or1k::getVectorRegister(int \/* regNum *\/) const {$/;"	f	class:libunwind::Registers_or1k
getVectorRegister	ThirdParty/libunwind/src/Registers.hpp	/^inline v128 Registers_ppc64::getVectorRegister(int regNum) const {$/;"	f	class:libunwind::Registers_ppc64
getVectorRegister	ThirdParty/libunwind/src/Registers.hpp	/^inline v128 Registers_ppc::getVectorRegister(int regNum) const {$/;"	f	class:libunwind::Registers_ppc
getVectorRegister	ThirdParty/libunwind/src/Registers.hpp	/^inline v128 Registers_x86::getVectorRegister(int) const {$/;"	f	class:libunwind::Registers_x86
getVectorRegister	ThirdParty/libunwind/src/Registers.hpp	/^inline v128 Registers_x86_64::getVectorRegister(int regNum) const {$/;"	f	class:libunwind::Registers_x86_64
getZeroedLLVMReturnStruct	Lib/LLVMJIT/LLVMJITPrivate.h	/^	inline llvm::Constant* getZeroedLLVMReturnStruct(LLVMContext& llvmContext,$/;"	f	namespace:WAVM::LLVMJIT
global	Include/WAVM/Emscripten/Emscripten.h	/^		Runtime::GCPointer<Runtime::ModuleInstance> global;$/;"	m	struct:WAVM::Emscripten::Instance
global	Include/WAVM/IR/Types.h	/^			GlobalType global;$/;"	m	union:WAVM::IR::ValueType::ExternType::__anon7
global	Include/WAVM/IR/Types.h	/^		global = 3,$/;"	m	class:WAVM::IR::ValueType::ExternKind
global	Include/WAVM/Runtime/RuntimeData.h	/^		global = 3,$/;"	m	class:WAVM::Runtime::ObjectKind
global	Lib/IR/DisassemblyNames.cpp	/^	global = 7,$/;"	m	class:NameSubsectionType	file:
global	Lib/WASM/WASMSerialization.cpp	/^	global,$/;"	m	class:SectionType	file:
globalDataAllocationMask	Lib/Runtime/RuntimePrivate.h	/^		DenseStaticIntSet<U32, maxMutableGlobals> globalDataAllocationMask;$/;"	m	struct:WAVM::Runtime::Compartment
globalInitLLVM	Lib/LLVMJIT/LLVMJIT.cpp	/^static bool globalInitLLVM()$/;"	f	file:
globalMap	Lib/Runtime/Intrinsics.cpp	/^		HashMap<std::string, Intrinsics::Global*> globalMap;$/;"	m	struct:WAVM::Intrinsics::ModuleImpl	file:
globalNameToIndexMap	Lib/WASTParse/Parse.h	/^		NameToIndexMap globalNameToIndexMap;$/;"	m	struct:WAVM::WAST::ModuleState
global_get	Include/WAVM/Emscripten/gas-visit-context.h	/^    Result global_get(GetOrSetVariableImm<true> imm)$/;"	f	struct:GasVisitor
global_get	Include/WAVM/IR/Module.h	/^			global_get = 0x0023,$/;"	m	class:WAVM::IR::Opcode::Type
global_get	Lib/IR/Validate.cpp	/^	void global_get(GetOrSetVariableImm<true> imm)$/;"	f	struct:FunctionValidationContext
global_get	Lib/LLVMJIT/EmitVar.cpp	/^void EmitFunctionContext::global_get(GetOrSetVariableImm<true> imm)$/;"	f	class:EmitFunctionContext
global_get	Lib/WASTPrint/Print.cpp	/^	void global_get(GetOrSetVariableImm<true> imm)$/;"	f	struct:FunctionPrintContext
global_set	Include/WAVM/Emscripten/gas-visit-context.h	/^    Result global_set(GetOrSetVariableImm<true> imm)$/;"	f	struct:GasVisitor
global_set	Lib/IR/Validate.cpp	/^	void global_set(GetOrSetVariableImm<true> imm)$/;"	f	struct:FunctionValidationContext
global_set	Lib/LLVMJIT/EmitVar.cpp	/^void EmitFunctionContext::global_set(GetOrSetVariableImm<true> imm)$/;"	f	class:EmitFunctionContext
global_set	Lib/WASTPrint/Print.cpp	/^	void global_set(GetOrSetVariableImm<true> imm)$/;"	f	struct:FunctionPrintContext
globals	Include/WAVM/IR/Module.h	/^		IndexSpace<GlobalDef, GlobalType> globals;$/;"	m	struct:WAVM::IR::Opcode::Elem::Module
globals	Include/WAVM/IR/Module.h	/^		std::vector<std::string> globals;$/;"	m	struct:WAVM::IR::Opcode::Elem::DisassemblyNames
globals	Include/WAVM/Runtime/Runtime.h	/^		std::vector<Global*> globals;$/;"	m	struct:WAVM::Runtime::ImportBindings
globals	Lib/LLVMJIT/EmitModuleContext.h	/^		std::vector<llvm::Constant*> globals;$/;"	m	struct:WAVM::LLVMJIT::EmitModuleContext
globals	Lib/Runtime/RuntimePrivate.h	/^		IndexMap<Uptr, Global*> globals;$/;"	m	struct:WAVM::Runtime::Compartment
globals	Lib/Runtime/RuntimePrivate.h	/^		const std::vector<Global*> globals;$/;"	m	struct:WAVM::Runtime::ModuleInstance
gp	ThirdParty/libunwind/include/libunwind.h	/^  unw_word_t  gp;               \/* not used *\/$/;"	m	struct:unw_proc_info_t
growMemory	Lib/Runtime/Memory.cpp	/^Iptr Runtime::growMemory(Memory* memory, Uptr numPagesToGrow)$/;"	f	class:Runtime
growTable	Lib/Runtime/Table.cpp	/^Iptr Runtime::growTable(Table* table, Uptr numNewElements, Object* initialElement)$/;"	f	class:Runtime
growTableImpl	Lib/Runtime/Table.cpp	/^static Iptr growTableImpl(Table* table,$/;"	f	file:
handle	Include/WAVM/Platform/Event.h	/^		void* handle;$/;"	m	struct:WAVM::Platform::Event
handle	Lib/Platform/Windows/Thread.cpp	/^	HANDLE handle = INVALID_HANDLE_VALUE;$/;"	m	struct:Platform::Thread	file:
handleAssertionFailure	Lib/Platform/POSIX/Diagnostics.cpp	/^void Platform::handleAssertionFailure(const AssertMetadata& metadata)$/;"	f	class:Platform
handleAssertionFailure	Lib/Platform/Windows/Diagnostics.cpp	/^void Platform::handleAssertionFailure(const AssertMetadata& metadata)$/;"	f	class:Platform
handleFatalError	Lib/Platform/POSIX/Diagnostics.cpp	/^void Platform::handleFatalError(const char* messageFormat, bool printCallStack, va_list varArgs)$/;"	f	class:Platform
handleFatalError	Lib/Platform/Windows/Diagnostics.cpp	/^void Platform::handleFatalError(const char* messageFormat, bool printCallStack, va_list varArgs)$/;"	f	class:Platform
handler	ThirdParty/libunwind/include/libunwind.h	/^  unw_word_t  handler;          \/* personality routine, or zero if not used *\/$/;"	m	struct:unw_proc_info_t
hasBeenInitialized	Lib/Runtime/RuntimePrivate.h	/^		bool hasBeenInitialized;$/;"	m	struct:WAVM::Runtime::Global
hasInstantiatedModule	Test/RunTestScript/RunTestScript.cpp	/^	bool hasInstantiatedModule;$/;"	m	struct:TestScriptState	file:
hasNonNameChars	Lib/WASTPrint/Print.cpp	/^static bool hasNonNameChars(const std::string& name)$/;"	f	file:
hasRegisteredEHFrames	Lib/LLVMJIT/LLVMModule.cpp	/^	bool hasRegisteredEHFrames;$/;"	m	struct:LLVMJIT::ModuleMemoryManager	file:
has_cpp_feature	ThirdParty/libunwind/test/libunwind/test/config.py	/^    def has_cpp_feature(self, feature, required_value):$/;"	m	class:Configuration
hash	Include/WAVM/IR/Types.h	/^			Uptr hash;$/;"	m	struct:WAVM::IR::ValueType::FunctionType::Impl
hash	Include/WAVM/IR/Types.h	/^			Uptr hash;$/;"	m	struct:WAVM::IR::ValueType::TypeTuple::Impl
hashAndOccupancy	Include/WAVM/Inline/HashTable.h	/^		Uptr hashAndOccupancy;$/;"	m	struct:WAVM::HashTableBucket
hashMask	Include/WAVM/Inline/HashTable.h	/^		static constexpr Uptr hashMask = ~isOccupiedMask;$/;"	m	struct:WAVM::HashTableBucket
hashToBucketIndexMask	Include/WAVM/Inline/HashTable.h	/^		Uptr hashToBucketIndexMask;$/;"	m	struct:WAVM::HashTable
hi0bits	ThirdParty/dtoa/dtoa.c	/^hi0bits$/;"	f	file:
html_static_path	ThirdParty/libunwind/docs/conf.py	/^html_static_path = []$/;"	v
html_theme	ThirdParty/libunwind/docs/conf.py	/^html_theme = 'haiku'$/;"	v
htmlhelp_basename	ThirdParty/libunwind/docs/conf.py	/^htmlhelp_basename = 'libunwinddoc'$/;"	v
i16Type	Lib/LLVMJIT/LLVMJITPrivate.h	/^		llvm::Type* i16Type;$/;"	m	struct:WAVM::LLVMJIT::LLVMContext
i16x8Type	Lib/LLVMJIT/LLVMJITPrivate.h	/^		llvm::Type* i16x8Type;$/;"	m	struct:WAVM::LLVMJIT::LLVMContext
i2b	ThirdParty/dtoa/dtoa.c	/^i2b$/;"	f	file:
i32	Include/WAVM/IR/Module.h	/^			I32 i32;$/;"	m	union:WAVM::IR::Opcode::Type::__anon10
i32	Include/WAVM/IR/Types.h	/^		i32 = 2,$/;"	m	class:WAVM::IR::ValueType
i32	Include/WAVM/IR/Value.h	/^			I32 i32;$/;"	m	union:WAVM::IR::UntaggedValue::__anon8
i32Type	Lib/LLVMJIT/LLVMJITPrivate.h	/^		llvm::Type* i32Type;$/;"	m	struct:WAVM::LLVMJIT::LLVMContext
i32_atomic_wait	Lib/LLVMJIT/EmitMem.cpp	/^void EmitFunctionContext::i32_atomic_wait(AtomicLoadOrStoreImm<2> imm)$/;"	f	class:EmitFunctionContext
i32_const	Include/WAVM/IR/Module.h	/^			i32_const = 0x0041,$/;"	m	class:WAVM::IR::Opcode::Type
i32x4Type	Lib/LLVMJIT/LLVMJITPrivate.h	/^		llvm::Type* i32x4Type;$/;"	m	struct:WAVM::LLVMJIT::LLVMContext
i64	Include/WAVM/IR/Module.h	/^			I64 i64;$/;"	m	union:WAVM::IR::Opcode::Type::__anon10
i64	Include/WAVM/IR/Types.h	/^		i64 = 3,$/;"	m	class:WAVM::IR::ValueType
i64	Include/WAVM/IR/Value.h	/^			I64 i64;$/;"	m	union:WAVM::IR::UntaggedValue::__anon8
i64Type	Lib/LLVMJIT/LLVMJITPrivate.h	/^		llvm::Type* i64Type;$/;"	m	struct:WAVM::LLVMJIT::LLVMContext
i64_atomic_wait	Lib/LLVMJIT/EmitMem.cpp	/^void EmitFunctionContext::i64_atomic_wait(AtomicLoadOrStoreImm<3> imm)$/;"	f	class:EmitFunctionContext
i64_const	Include/WAVM/IR/Module.h	/^			i64_const = 0x0042,$/;"	m	class:WAVM::IR::Opcode::Type
i64x2Type	Lib/LLVMJIT/LLVMJITPrivate.h	/^		llvm::Type* i64x2Type;$/;"	m	struct:WAVM::LLVMJIT::LLVMContext
i8PtrType	Lib/LLVMJIT/LLVMJITPrivate.h	/^		llvm::PointerType* i8PtrType;$/;"	m	struct:WAVM::LLVMJIT::LLVMContext
i8Type	Lib/LLVMJIT/LLVMJITPrivate.h	/^		llvm::Type* i8Type;$/;"	m	struct:WAVM::LLVMJIT::LLVMContext
i8x16Type	Lib/LLVMJIT/LLVMJITPrivate.h	/^		llvm::Type* i8x16Type;$/;"	m	struct:WAVM::LLVMJIT::LLVMContext
id	Include/WAVM/LLVMJIT/LLVMJIT.h	/^		Uptr id;$/;"	m	struct:WAVM::LLVMJIT::ExceptionTypeBinding
id	Include/WAVM/LLVMJIT/LLVMJIT.h	/^		Uptr id;$/;"	m	struct:WAVM::LLVMJIT::MemoryBinding
id	Include/WAVM/LLVMJIT/LLVMJIT.h	/^		Uptr id;$/;"	m	struct:WAVM::LLVMJIT::ModuleInstanceBinding
id	Include/WAVM/LLVMJIT/LLVMJIT.h	/^		Uptr id;$/;"	m	struct:WAVM::LLVMJIT::TableBinding
id	Lib/Platform/POSIX/Thread.cpp	/^	pthread_t id;$/;"	m	struct:Platform::Thread	file:
id	Lib/Platform/Windows/Thread.cpp	/^	DWORD id = 0xffffffff;$/;"	m	struct:Platform::Thread	file:
id	Lib/Runtime/RuntimePrivate.h	/^		Uptr id = UINTPTR_MAX;$/;"	m	struct:WAVM::Runtime::Context
id	Lib/Runtime/RuntimePrivate.h	/^		Uptr id = UINTPTR_MAX;$/;"	m	struct:WAVM::Runtime::ExceptionType
id	Lib/Runtime/RuntimePrivate.h	/^		Uptr id = UINTPTR_MAX;$/;"	m	struct:WAVM::Runtime::Global
id	Lib/Runtime/RuntimePrivate.h	/^		Uptr id = UINTPTR_MAX;$/;"	m	struct:WAVM::Runtime::Memory
id	Lib/Runtime/RuntimePrivate.h	/^		Uptr id = UINTPTR_MAX;$/;"	m	struct:WAVM::Runtime::Table
id	Lib/Runtime/RuntimePrivate.h	/^		const Uptr id;$/;"	m	struct:WAVM::Runtime::ModuleInstance
id	Lib/ThreadTest/ThreadTest.cpp	/^	Uptr id = UINTPTR_MAX;$/;"	m	struct:Thread	file:
identifier	Lib/WASI/WASIDefinitions.h	/^			__wasi_userdata_t identifier;$/;"	m	struct:__wasi_subscription_t::__wasi_subscription_u::__wasi_subscription_u_clock_t
identity	Lib/LLVMJIT/EmitFunctionContext.h	/^		llvm::Value* identity(llvm::Value* value, llvm::Type* type) { return value; }$/;"	f	struct:WAVM::LLVMJIT::EmitFunctionContext
ifElse	Include/WAVM/Emscripten/gas-visit-context.h	/^            ifElse,$/;"	m	class:GasVisitor::ControlContext::Type
ifElse	Include/WAVM/Emscripten/insert-imported-context.h	/^            ifElse,$/;"	m	class:ImportFunctionInsertVisitor::ControlContext::Type
ifElse	Lib/IR/Validate.cpp	/^			ifElse,$/;"	m	class:FunctionValidationContext::ControlContext::Type	file:
ifElse	Lib/LLVMJIT/EmitFunctionContext.h	/^				ifElse,$/;"	m	class:WAVM::LLVMJIT::EmitFunctionContext::ControlContext::Type
ifElse	Lib/WASTPrint/Print.cpp	/^			ifElse,$/;"	m	class:FunctionPrintContext::ControlContext::Type	file:
ifThen	Include/WAVM/Emscripten/gas-visit-context.h	/^            ifThen,$/;"	m	class:GasVisitor::ControlContext::Type
ifThen	Include/WAVM/Emscripten/insert-imported-context.h	/^            ifThen,$/;"	m	class:ImportFunctionInsertVisitor::ControlContext::Type
ifThen	Lib/IR/Validate.cpp	/^			ifThen,$/;"	m	class:FunctionValidationContext::ControlContext::Type	file:
ifThen	Lib/LLVMJIT/EmitFunctionContext.h	/^				ifThen,$/;"	m	class:WAVM::LLVMJIT::EmitFunctionContext::ControlContext::Type
ifThen	Lib/WASTPrint/Print.cpp	/^			ifThen,$/;"	m	class:FunctionPrintContext::ControlContext::Type	file:
if_	Include/WAVM/Emscripten/gas-visit-context.h	/^	Result if_(ControlStructureImm imm)$/;"	f	struct:GasVisitor
if_	Include/WAVM/Emscripten/insert-imported-context.h	/^    Result if_(ControlStructureImm imm)$/;"	f	struct:ImportFunctionInsertVisitor
if_	Lib/IR/Validate.cpp	/^	void if_(ControlStructureImm imm)$/;"	f	struct:FunctionValidationContext
if_	Lib/LLVMJIT/EmitCore.cpp	/^void EmitFunctionContext::if_(ControlStructureImm imm)$/;"	f	class:EmitFunctionContext
if_	Lib/LLVMJIT/EmitFunction.cpp	/^	void if_(ControlStructureImm) { ++unreachableControlDepth; }$/;"	f	struct:UnreachableOpVisitor
if_	Lib/WASTPrint/Print.cpp	/^	void if_(ControlStructureImm imm)$/;"	f	struct:FunctionPrintContext
imageBaseAddress	Lib/LLVMJIT/LLVMModule.cpp	/^	U8* imageBaseAddress;$/;"	m	struct:LLVMJIT::ModuleMemoryManager	file:
imm	Include/WAVM/IR/Operators.h	/^			NoImm imm;$/;"	m	union:WAVM::IR::OpcodeAndImm::__anon5
immutableValuePointer	Include/WAVM/LLVMJIT/LLVMJIT.h	/^			const IR::UntaggedValue* immutableValuePointer;$/;"	m	union:WAVM::LLVMJIT::GlobalBinding::__anon12
impl	Include/WAVM/IR/Types.h	/^			Uptr impl;$/;"	m	struct:WAVM::IR::ValueType::FunctionType::Encoding
impl	Include/WAVM/IR/Types.h	/^		const Impl* impl;$/;"	m	struct:WAVM::IR::ValueType::FunctionType
impl	Include/WAVM/IR/Types.h	/^		const Impl* impl;$/;"	m	struct:WAVM::IR::ValueType::TypeTuple
impl	Include/WAVM/IR/Validate.h	/^		CodeValidationStreamImpl* impl;$/;"	m	struct:WAVM::IR::CodeValidationStream
impl	Include/WAVM/Runtime/Intrinsics.h	/^		ModuleImpl* impl = nullptr;$/;"	m	struct:WAVM::Intrinsics::Module
import	Lib/WASM/WASMSerialization.cpp	/^	import,$/;"	m	class:SectionType	file:
importExportMutableGlobals	Include/WAVM/IR/IR.h	/^		bool importExportMutableGlobals = true;$/;"	m	struct:WAVM::IR::FeatureSpec
imports	Include/WAVM/IR/Module.h	/^		std::vector<Import<Type>> imports;$/;"	m	struct:WAVM::IR::Opcode::Elem::IndexSpace
in	Include/WAVM/Platform/File.h	/^		in,$/;"	m	class:WAVM::Platform::StdDevice
indentLevel	Lib/Runtime/WAVMIntrinsics.cpp	/^static thread_local Uptr indentLevel = 0;$/;"	v	file:
index	Include/WAVM/IR/Module.h	/^		Uptr index;$/;"	m	class:WAVM::IR::Opcode::Elem::Type
index	Include/WAVM/IR/Module.h	/^		Uptr index;$/;"	m	struct:WAVM::IR::Opcode::Export
index	Include/WAVM/IR/Types.h	/^			Uptr index;$/;"	m	union:WAVM::IR::ValueType::IndexedBlockType::__anon6
index	Include/WAVM/IR/Types.h	/^		Uptr index;$/;"	m	struct:WAVM::IR::ValueType::IndexedFunctionType
index	Lib/WASTParse/Parse.h	/^			Uptr index;$/;"	m	union:WAVM::WAST::Reference::__anon49
indexCount	ThirdParty/libunwind/include/mach-o/compact_unwind_encoding.h	/^    uint32_t    indexCount;$/;"	m	struct:unwind_info_section_header
indexCount	ThirdParty/libunwind/src/UnwindCursor.hpp	/^  uint32_t indexCount() const {$/;"	f	class:libunwind::UnwindSectionHeader
indexSectionOffset	ThirdParty/libunwind/include/mach-o/compact_unwind_encoding.h	/^    uint32_t    indexSectionOffset;$/;"	m	struct:unwind_info_section_header
indexSectionOffset	ThirdParty/libunwind/src/UnwindCursor.hpp	/^  uint32_t indexSectionOffset() const {$/;"	f	class:libunwind::UnwindSectionHeader
indicesPerElement	Include/WAVM/Inline/DenseStaticIntSet.h	/^			indicesPerElement = sizeof(Element) * 8$/;"	e	enum:WAVM::DenseStaticIntSet::__anon29
indirectCallSignatureMismatch	Include/WAVM/WASTParse/TestScript.h	/^		indirectCallSignatureMismatch,$/;"	m	class:WAVM::WAST::ExpectedTrapType
inexact	ThirdParty/dtoa/dtoa.c	/^BCinfo { int dp0, dp1, dplen, dsign, e0, inexact, nd, nd0, rounding, scale, uflchk; };$/;"	m	struct:BCinfo	file:
inferIntrinsicFunctionType	Include/WAVM/Runtime/Intrinsics.h	/^	IR::FunctionType inferIntrinsicFunctionType(R (*)(Runtime::ContextRuntimeData*, Args...))$/;"	f	namespace:WAVM::Intrinsics
inferIntrinsicWithContextSwitchFunctionType	Include/WAVM/Runtime/Intrinsics.h	/^	IR::FunctionType inferIntrinsicWithContextSwitchFunctionType($/;"	f	namespace:WAVM::Intrinsics
inferResultType	Include/WAVM/IR/Types.h	/^	template<> inline TypeTuple inferResultType<void>() { return TypeTuple(); }$/;"	f	class:WAVM::IR::ValueType
inferResultType	Include/WAVM/IR/Types.h	/^	template<typename T> inline TypeTuple inferResultType()$/;"	f	class:WAVM::IR::ValueType
inferValueType	Include/WAVM/IR/Types.h	/^	template<> constexpr ValueType inferValueType<F32>() { return ValueType::f32; }$/;"	f	class:WAVM::IR::ValueType
inferValueType	Include/WAVM/IR/Types.h	/^	template<> constexpr ValueType inferValueType<F64>() { return ValueType::f64; }$/;"	f	class:WAVM::IR::ValueType
inferValueType	Include/WAVM/IR/Types.h	/^	template<> constexpr ValueType inferValueType<I16>() { return ValueType::i32; }$/;"	f	class:WAVM::IR::ValueType
inferValueType	Include/WAVM/IR/Types.h	/^	template<> constexpr ValueType inferValueType<I32>() { return ValueType::i32; }$/;"	f	class:WAVM::IR::ValueType
inferValueType	Include/WAVM/IR/Types.h	/^	template<> constexpr ValueType inferValueType<I64>() { return ValueType::i64; }$/;"	f	class:WAVM::IR::ValueType
inferValueType	Include/WAVM/IR/Types.h	/^	template<> constexpr ValueType inferValueType<I8>() { return ValueType::i32; }$/;"	f	class:WAVM::IR::ValueType
inferValueType	Include/WAVM/IR/Types.h	/^	template<> constexpr ValueType inferValueType<Runtime::Function*>()$/;"	f	class:WAVM::IR::ValueType
inferValueType	Include/WAVM/IR/Types.h	/^	template<> constexpr ValueType inferValueType<Runtime::Object*>() { return ValueType::anyref; }$/;"	f	class:WAVM::IR::ValueType
inferValueType	Include/WAVM/IR/Types.h	/^	template<> constexpr ValueType inferValueType<U16>() { return ValueType::i32; }$/;"	f	class:WAVM::IR::ValueType
inferValueType	Include/WAVM/IR/Types.h	/^	template<> constexpr ValueType inferValueType<U32>() { return ValueType::i32; }$/;"	f	class:WAVM::IR::ValueType
inferValueType	Include/WAVM/IR/Types.h	/^	template<> constexpr ValueType inferValueType<U64>() { return ValueType::i64; }$/;"	f	class:WAVM::IR::ValueType
inferValueType	Include/WAVM/IR/Types.h	/^	template<> constexpr ValueType inferValueType<U8>() { return ValueType::i32; }$/;"	f	class:WAVM::IR::ValueType
inferValueType	Include/WAVM/IR/Types.h	/^	template<> constexpr ValueType inferValueType<const Runtime::Function*>()$/;"	f	class:WAVM::IR::ValueType
inferValueType	Include/WAVM/IR/Types.h	/^	template<> constexpr ValueType inferValueType<const Runtime::Object*>()$/;"	f	class:WAVM::IR::ValueType
info	ThirdParty/libunwind/src/DwarfParser.hpp	/^    PrologInfo info;$/;"	m	struct:libunwind::CFI_Parser::PrologInfoStackEntry
info_arch	output/CMakeFiles/3.13.2/CompilerIdC/CMakeCCompilerId.c	/^char const* info_arch = "INFO" ":" "arch[" ARCHITECTURE_ID "]";$/;"	v
info_arch	output/CMakeFiles/3.13.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_arch = "INFO" ":" "arch[" ARCHITECTURE_ID "]";$/;"	v
info_compiler	output/CMakeFiles/3.13.2/CompilerIdC/CMakeCCompilerId.c	/^char const* info_compiler = "INFO" ":" "compiler[" COMPILER_ID "]";$/;"	v
info_compiler	output/CMakeFiles/3.13.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_compiler = "INFO" ":" "compiler[" COMPILER_ID "]";$/;"	v
info_cray	output/CMakeFiles/3.13.2/CompilerIdC/CMakeCCompilerId.c	/^char const *info_cray = "INFO" ":" "compiler_wrapper[CrayPrgEnv]";$/;"	v
info_cray	output/CMakeFiles/3.13.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const *info_cray = "INFO" ":" "compiler_wrapper[CrayPrgEnv]";$/;"	v
info_language_dialect_default	output/CMakeFiles/3.13.2/CompilerIdC/CMakeCCompilerId.c	/^const char* info_language_dialect_default =$/;"	v
info_language_dialect_default	output/CMakeFiles/3.13.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^const char* info_language_dialect_default = "INFO" ":" "dialect_default["$/;"	v
info_platform	output/CMakeFiles/3.13.2/CompilerIdC/CMakeCCompilerId.c	/^char const* info_platform = "INFO" ":" "platform[" PLATFORM_ID "]";$/;"	v
info_platform	output/CMakeFiles/3.13.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_platform = "INFO" ":" "platform[" PLATFORM_ID "]";$/;"	v
info_simulate	output/CMakeFiles/3.13.2/CompilerIdC/CMakeCCompilerId.c	/^char const* info_simulate = "INFO" ":" "simulate[" SIMULATE_ID "]";$/;"	v
info_simulate	output/CMakeFiles/3.13.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_simulate = "INFO" ":" "simulate[" SIMULATE_ID "]";$/;"	v
info_simulate_version	output/CMakeFiles/3.13.2/CompilerIdC/CMakeCCompilerId.c	/^char const info_simulate_version[] = {$/;"	v
info_simulate_version	output/CMakeFiles/3.13.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const info_simulate_version[] = {$/;"	v
info_version	output/CMakeFiles/3.13.2/CompilerIdC/CMakeCCompilerId.c	/^char const info_version[] = {$/;"	v
info_version	output/CMakeFiles/3.13.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const info_version[] = {$/;"	v
info_version_internal	output/CMakeFiles/3.13.2/CompilerIdC/CMakeCCompilerId.c	/^char const info_version_internal[] = {$/;"	v
info_version_internal	output/CMakeFiles/3.13.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const info_version_internal[] = {$/;"	v
init	Lib/Platform/POSIX/Thread.cpp	/^void SigAltStack::init()$/;"	f	class:SigAltStack
initContextVariables	Lib/LLVMJIT/EmitContext.h	/^		void initContextVariables(llvm::Value* initialContextPointer)$/;"	f	struct:WAVM::LLVMJIT::EmitContext
initGCObject	Lib/Runtime/ObjectGC.cpp	/^	void initGCObject(GCObject* object, bool forceRoot = false)$/;"	f	struct:GCState
initSignals	Lib/Platform/POSIX/Signal.cpp	/^static bool initSignals()$/;"	f	file:
initThread	Lib/Platform/Windows/Thread.cpp	/^void Platform::initThread()$/;"	f	class:Platform
init_client	Lib/Emscripten/Emscripten.cpp	/^void xchain::init_client(xchain::XChainServiceClient* client) {$/;"	f	class:ioStreamVMHandle::xchain	file:
initialContextMutableGlobals	Lib/Runtime/RuntimePrivate.h	/^		IR::UntaggedValue initialContextMutableGlobals[maxMutableGlobals];$/;"	m	struct:WAVM::Runtime::Compartment
initialValue	Lib/Runtime/RuntimePrivate.h	/^		IR::UntaggedValue initialValue;$/;"	m	struct:WAVM::Runtime::Global
initializeGlobal	Lib/Runtime/Global.cpp	/^void Runtime::initializeGlobal(Global* global, Value value)$/;"	f	class:Runtime
initializeGlobals	Lib/Emscripten/Emscripten.cpp	/^void Emscripten::initializeGlobals(Emscripten::Instance* instance,$/;"	f	class:ioStreamVMHandle::Emscripten	file:
initializeModule	Lib/Runtime/Intrinsics.cpp	/^static void initializeModule(Intrinsics::Module& moduleRef)$/;"	f	file:
initializer	Include/WAVM/IR/Module.h	/^		InitializerExpression initializer;$/;"	m	struct:WAVM::IR::Opcode::GlobalDef
injectCommandArgs	Lib/Emscripten/Emscripten.cpp	/^void Emscripten::injectCommandArgs(Emscripten::Instance* instance,$/;"	f	class:ioStreamVMHandle::Emscripten	file:
innerResolver	Include/WAVM/Runtime/Linker.h	/^		Resolver* innerResolver;$/;"	m	struct:WAVM::Runtime::LazyResolver
innerResolverThunk	Include/WAVM/Runtime/Linker.h	/^		std::function<Resolver*()> innerResolverThunk;$/;"	m	struct:WAVM::Runtime::LazyResolver
innerStream	Include/WAVM/Emscripten/insert-imported-context.h	/^    InnerStream* innerStream;$/;"	m	struct:OperatorStreamProxy
innerStream	Include/WAVM/IR/Validate.h	/^		InnerStream& innerStream;$/;"	m	struct:WAVM::IR::CodeValidationProxyStream
innermostSignalContext	Lib/Platform/POSIX/Thread.cpp	/^	SignalContext* innermostSignalContext;$/;"	m	struct:ForkThreadArgs	file:
insertOrFail	Include/WAVM/Inline/IndexMap.h	/^		template<typename... Args> void insertOrFail(Index index, Args&&... args)$/;"	f	struct:WAVM::IndexMap
insert_inst	Include/WAVM/Emscripten/gas-visit-context.h	/^    void insert_inst()$/;"	f	struct:GasVisitor
insertedIndex	Include/WAVM/Emscripten/insert-imported-context.h	/^    Uptr insertedIndex;$/;"	m	struct:ImportFunctionInsertVisitor
instance	Include/WAVM/Emscripten/xchain-service.h	/^        ModuleInstance* instance;$/;"	m	struct:xchain::XBridgeChainService
instantiate	Lib/Emscripten/Emscripten.cpp	/^Emscripten::Instance* Emscripten::instantiate(Compartment* compartment, const IR::Module& module)$/;"	f	class:ioStreamVMHandle::Emscripten	file:
instantiate	Lib/Emscripten/Interface.cpp	/^int instantiate(void* modulePtr, char* debugName) {$/;"	f
instantiate	Lib/Runtime/Intrinsics.cpp	/^Function* Intrinsics::Function::instantiate(Compartment* compartment)$/;"	f	class:Intrinsics::Function
instantiate	Lib/Runtime/Intrinsics.cpp	/^Memory* Intrinsics::Memory::instantiate(Compartment* compartment)$/;"	f	class:Intrinsics::Memory
instantiate	Lib/Runtime/Intrinsics.cpp	/^Runtime::Global* Intrinsics::Global::instantiate(Compartment* compartment)$/;"	f	class:Intrinsics::Global
instantiate	Lib/Runtime/Intrinsics.cpp	/^Table* Intrinsics::Table::instantiate(Compartment* compartment)$/;"	f	class:Intrinsics::Table
instantiate	Lib/ThreadTest/ThreadTest.cpp	/^ModuleInstance* ThreadTest::instantiate(Compartment* compartment)$/;"	f	class:ThreadTest
instantiateModule	Lib/Runtime/Intrinsics.cpp	/^ModuleInstance* Intrinsics::instantiateModule(Compartment* compartment,$/;"	f	class:Intrinsics
instantiateModule	Lib/Runtime/Module.cpp	/^ModuleInstance* Runtime::instantiateModule(Compartment* compartment,$/;"	f	class:Runtime
integerDivideByZeroOrIntegerOverflow	Include/WAVM/WASTParse/TestScript.h	/^		integerDivideByZeroOrIntegerOverflow,$/;"	m	class:WAVM::WAST::ExpectedTrapType
internalGetPreferredVirtualPageSizeLog2	Lib/Platform/POSIX/Memory.cpp	/^static Uptr internalGetPreferredVirtualPageSizeLog2()$/;"	f	file:
internalGetPreferredVirtualPageSizeLog2	Lib/Platform/Windows/Memory.cpp	/^static Uptr internalGetPreferredVirtualPageSizeLog2()$/;"	f	file:
internalMaxStates	Include/WAVM/NFA/NFA.h	/^			internalMaxStates = INT16_MAX$/;"	e	enum:WAVM::NFA::Machine::__anon4
internalModuleName	Include/WAVM/WASTParse/TestScript.h	/^		std::string internalModuleName;$/;"	m	struct:WAVM::WAST::GetAction
internalModuleName	Include/WAVM/WASTParse/TestScript.h	/^		std::string internalModuleName;$/;"	m	struct:WAVM::WAST::InvokeAction
internalModuleName	Include/WAVM/WASTParse/TestScript.h	/^		std::string internalModuleName;$/;"	m	struct:WAVM::WAST::ModuleAction
internalModuleName	Include/WAVM/WASTParse/TestScript.h	/^		std::string internalModuleName;$/;"	m	struct:WAVM::WAST::RegisterCommand
intersphinx_mapping	ThirdParty/libunwind/docs/conf.py	/^intersphinx_mapping = {}$/;"	v
intrinsic	Include/WAVM/IR/Types.h	/^		intrinsic,$/;"	m	class:WAVM::IR::ValueType::CallingConvention
intrinsicFunctionToThunkFunctionMap	Lib/LLVMJIT/Thunk.cpp	/^static HashMap<void*, Runtime::Function*> intrinsicFunctionToThunkFunctionMap;$/;"	v	file:
intrinsicThunkMutex	Lib/LLVMJIT/Thunk.cpp	/^static Platform::Mutex intrinsicThunkMutex;$/;"	v	file:
intrinsicWithContextSwitch	Include/WAVM/IR/Types.h	/^		intrinsicWithContextSwitch,$/;"	m	class:WAVM::IR::ValueType::CallingConvention
invalid	Include/WAVM/IR/Types.h	/^		invalid = 0,$/;"	m	class:WAVM::IR::ValueType::ReferenceType
invalid	Include/WAVM/IR/Types.h	/^		invalid = 0xff,$/;"	m	class:WAVM::IR::ValueType::ExternKind
invalid	Include/WAVM/Platform/Signal.h	/^			invalid = 0,$/;"	m	class:WAVM::Platform::Signal::Type
invalid	Include/WAVM/Runtime/RuntimeData.h	/^		invalid = 0xff,$/;"	m	class:WAVM::Runtime::ObjectKind
invalid	Lib/IR/DisassemblyNames.cpp	/^	invalid = 0xff$/;"	m	class:NameSubsectionType	file:
invalid	Lib/WASTParse/Parse.h	/^			invalid,$/;"	m	class:WAVM::WAST::Reference::Type
invalidFloatOperation	Include/WAVM/WASTParse/TestScript.h	/^		invalidFloatOperation,$/;"	m	class:WAVM::WAST::ExpectedTrapType
invalidateInstructionCache	Lib/LLVMJIT/LLVMModule.cpp	/^	virtual void invalidateInstructionCache()$/;"	f	struct:LLVMJIT::ModuleMemoryManager
invoke	Include/WAVM/WASTParse/TestScript.h	/^		invoke,$/;"	m	class:WAVM::WAST::ActionType
invokeFunction	Lib/Emscripten/Interface.cpp	/^U64 invokeFunction(void* modulePtr,char* debugName, char *functionName, U64 gasLimit)$/;"	f
invokeFunctionChecked	Lib/Runtime/Invoke.cpp	/^ValueTuple Runtime::invokeFunctionChecked(Context* context,$/;"	f	class:Runtime
invokeFunctionUnchecked	Lib/Runtime/Invoke.cpp	/^UntaggedValue* Runtime::invokeFunctionUnchecked(Context* context,$/;"	f	class:Runtime
invokeSignatureMismatch	Include/WAVM/WASTParse/TestScript.h	/^		invokeSignatureMismatch,$/;"	m	class:WAVM::WAST::ExpectedTrapType
invokeThunkMutex	Lib/LLVMJIT/Thunk.cpp	/^static Platform::Mutex invokeThunkMutex;$/;"	v	file:
invokeThunkTypeToFunctionMap	Lib/LLVMJIT/Thunk.cpp	/^static HashMap<FunctionType, Runtime::Function*> invokeThunkTypeToFunctionMap;$/;"	v	file:
ioStreamVMHandle	Lib/Emscripten/Emscripten.cpp	/^enum class ioStreamVMHandle$/;"	c	file:
ip	Include/WAVM/Platform/Diagnostics.h	/^			Uptr ip;$/;"	m	struct:WAVM::Platform::CallStack::Frame
ip_end	ThirdParty/libunwind/src/UnwindCursor.hpp	/^    pint_t ip_end;$/;"	m	struct:libunwind::DwarfFDECache::entry
ip_start	ThirdParty/libunwind/src/UnwindCursor.hpp	/^    pint_t ip_start;$/;"	m	struct:libunwind::DwarfFDECache::entry
iptrType	Lib/LLVMJIT/LLVMJITPrivate.h	/^		llvm::Type* iptrType;$/;"	m	struct:WAVM::LLVMJIT::LLVMContext
ir	Lib/Runtime/RuntimePrivate.h	/^		IR::Module ir;$/;"	m	struct:WAVM::Runtime::Module
irBuilder	Lib/LLVMJIT/EmitContext.h	/^		llvm::IRBuilder<> irBuilder;$/;"	m	struct:WAVM::LLVMJIT::EmitContext
irModule	Lib/LLVMJIT/EmitFunctionContext.h	/^		const IR::Module& irModule;$/;"	m	struct:WAVM::LLVMJIT::EmitFunctionContext
irModule	Lib/LLVMJIT/EmitModuleContext.h	/^		const IR::Module& irModule;$/;"	m	struct:WAVM::LLVMJIT::EmitModuleContext
is64bit	ThirdParty/libunwind/src/libunwind.cpp	/^static bool is64bit(task_t task) {$/;"	f	file:
isA	Lib/Runtime/Runtime.cpp	/^bool Runtime::isA(Object* object, const ExternType& type)$/;"	f	class:Runtime
isActive	Include/WAVM/IR/Module.h	/^		bool isActive;$/;"	m	struct:WAVM::IR::Opcode::DataSegment
isActive	Include/WAVM/IR/Module.h	/^		bool isActive;$/;"	m	struct:WAVM::IR::Opcode::Elem::ElemSegment
isAddressOwnedByMemory	Lib/Runtime/Memory.cpp	/^bool Runtime::isAddressOwnedByMemory(U8* address, Memory*& outMemory, Uptr& outMemoryAddress)$/;"	f	class:Runtime
isAddressOwnedByTable	Lib/Runtime/Table.cpp	/^bool Runtime::isAddressOwnedByTable(U8* address, Table*& outTable, Uptr& outTableIndex)$/;"	f	class:Runtime
isAlignedLog2	Lib/Platform/POSIX/Thread.cpp	/^static bool isAlignedLog2(void* pointer, Uptr alignmentLog2)$/;"	f	file:
isCanonicalOrArithmeticNaN	Test/RunTestScript/RunTestScript.cpp	/^template<typename Float> bool isCanonicalOrArithmeticNaN(Float value, bool requireCanonical)$/;"	f
isCategoryEnabled	Lib/Logging/Logging.cpp	/^bool Log::isCategoryEnabled(Category category)$/;"	f	class:Log
isDef	Include/WAVM/IR/Module.h	/^		bool isDef(Uptr index) const$/;"	f	struct:WAVM::IR::Opcode::Elem::IndexSpace
isEmpty	Include/WAVM/Inline/DenseStaticIntSet.h	/^		bool isEmpty() const$/;"	f	struct:WAVM::DenseStaticIntSet
isExpectedExceptionType	Test/RunTestScript/RunTestScript.cpp	/^static bool isExpectedExceptionType(WAST::ExpectedTrapType expectedType,$/;"	f	file:
isFinalized	Lib/LLVMJIT/LLVMModule.cpp	/^	bool isFinalized;$/;"	m	struct:LLVMJIT::ModuleMemoryManager	file:
isImport	Include/WAVM/IR/Module.h	/^		bool isImport(Uptr index) const$/;"	f	struct:WAVM::IR::Opcode::Elem::IndexSpace
isInCompartment	Lib/Runtime/Compartment.cpp	/^bool Runtime::isInCompartment(Object* object, const Compartment* compartment)$/;"	f	class:Runtime
isInput	Include/WAVM/Inline/Serialization.h	/^			isInput = false$/;"	e	enum:WAVM::Serialization::OutputStream::__anon19
isInput	Include/WAVM/Inline/Serialization.h	/^			isInput = true$/;"	e	enum:WAVM::Serialization::InputStream::__anon20
isLocked	Include/WAVM/Platform/Mutex.h	/^		bool isLocked;$/;"	m	struct:WAVM::Platform::Mutex
isLockedByCurrentThread	Lib/Platform/POSIX/Mutex.cpp	/^bool Platform::Mutex::isLockedByCurrentThread()$/;"	f	class:Platform::Mutex
isLockedByCurrentThread	Lib/Platform/Windows/Mutex.cpp	/^bool Platform::Mutex::isLockedByCurrentThread()$/;"	f	class:Platform::Mutex
isMetachar	Lib/RegExp/RegExp.cpp	/^template<bool inSet> static bool isMetachar(char c)$/;"	f	file:
isMutable	Include/WAVM/IR/Types.h	/^		bool isMutable;$/;"	m	struct:WAVM::IR::ValueType::GlobalType
isNameChar	Include/WAVM/Inline/IsNameChar.h	/^	static bool isNameChar(char c)$/;"	f	namespace:WAVM
isOccupiedMask	Include/WAVM/Inline/HashTable.h	/^		static constexpr Uptr isOccupiedMask = Uptr(1) << (sizeof(Uptr) * 8 - 1);$/;"	m	struct:WAVM::HashTableBucket
isPageAligned	Lib/Platform/POSIX/Memory.cpp	/^static bool isPageAligned(U8* address)$/;"	f	file:
isPageAligned	Lib/Platform/Windows/Memory.cpp	/^static bool isPageAligned(U8* address)$/;"	f	file:
isReachable	Lib/IR/Validate.cpp	/^		bool isReachable;$/;"	m	struct:FunctionValidationContext::ControlContext	file:
isReachable	Lib/LLVMJIT/EmitFunctionContext.h	/^			bool isReachable;$/;"	m	struct:WAVM::LLVMJIT::EmitFunctionContext::ControlContext
isRecoveryPointChar	Lib/WASTParse/Lexer.cpp	/^inline bool isRecoveryPointChar(char c)$/;"	f
isReferenceType	Include/WAVM/IR/Types.h	/^	inline bool isReferenceType(ValueType type)$/;"	f	class:WAVM::IR::ValueType
isShared	Include/WAVM/IR/Types.h	/^		bool isShared;$/;"	m	struct:WAVM::IR::ValueType::MemoryType
isShared	Include/WAVM/IR/Types.h	/^		bool isShared;$/;"	m	struct:WAVM::IR::ValueType::TableType
isSignalFrame	ThirdParty/libunwind/src/DwarfParser.hpp	/^    bool      isSignalFrame;$/;"	m	struct:libunwind::CFI_Parser::CIE_Info
isSignalFrame	ThirdParty/libunwind/src/UnwindCursor.hpp	/^  virtual bool isSignalFrame() {$/;"	f	class:libunwind::AbstractUnwindCursor
isSignalFrame	ThirdParty/libunwind/src/UnwindCursor.hpp	/^template <typename A, typename R> bool UnwindCursor<A, R>::isSignalFrame() {$/;"	f	class:libunwind::UnwindCursor
isStopped	Include/WAVM/Inline/Timing.h	/^		bool isStopped;$/;"	m	struct:WAVM::Timing::Timer
isSubset	Include/WAVM/IR/Types.h	/^		friend bool isSubset(const SizeConstraints& super, const SizeConstraints& sub)$/;"	f	struct:WAVM::IR::ValueType::SizeConstraints
isSubtype	Include/WAVM/IR/Types.h	/^		friend bool isSubtype(const GlobalType& sub, const GlobalType& super)$/;"	f	struct:WAVM::IR::ValueType::GlobalType
isSubtype	Include/WAVM/IR/Types.h	/^		friend bool isSubtype(const MemoryType& sub, const MemoryType& super)$/;"	f	struct:WAVM::IR::ValueType::MemoryType
isSubtype	Include/WAVM/IR/Types.h	/^		friend bool isSubtype(const TableType& sub, const TableType& super)$/;"	f	struct:WAVM::IR::ValueType::TableType
isSubtype	Include/WAVM/IR/Types.h	/^	inline bool isSubtype(TypeTuple subtype, TypeTuple supertype)$/;"	f	class:WAVM::IR::ValueType
isSubtype	Include/WAVM/IR/Types.h	/^	inline bool isSubtype(ValueType subtype, ValueType supertype)$/;"	f	class:WAVM::IR::ValueType
isThreadInitialized	Lib/Platform/Windows/Thread.cpp	/^static thread_local bool isThreadInitialized = false;$/;"	v	file:
isTracingSyscalls	Lib/WASI/WASI.cpp	/^std::atomic<bool> isTracingSyscalls{false};$/;"	n	file:
isUserException	Include/WAVM/Runtime/RuntimeData.h	/^		U8 isUserException;$/;"	m	struct:WAVM::Runtime::Exception
iterateCacheEntries	ThirdParty/libunwind/src/UnwindCursor.hpp	/^void DwarfFDECache<A>::iterateCacheEntries(void (*func)($/;"	f	class:libunwind::DwarfFDECache
iterator_category	ThirdParty/libunwind/src/UnwindCursor.hpp	/^  typedef std::random_access_iterator_tag iterator_category;$/;"	t	struct:libunwind::EHABISectionIterator
jbuf	ThirdParty/libunwind/src/Unwind-sjlj.c	/^  void                           *jbuf[];$/;"	m	struct:_Unwind_FunctionContext	file:
jitModule	Include/WAVM/Runtime/RuntimeData.h	/^		LLVMJIT::Module* jitModule = nullptr;$/;"	m	struct:WAVM::Runtime::FunctionMutableData
jitModule	Lib/Runtime/RuntimePrivate.h	/^		const std::shared_ptr<LLVMJIT::Module> jitModule;$/;"	m	struct:WAVM::Runtime::ModuleInstance
join	Include/WAVM/IR/Types.h	/^	inline ValueType join(ValueType a, ValueType b)$/;"	f	class:WAVM::IR::ValueType
joinThread	Lib/Platform/POSIX/Thread.cpp	/^I64 Platform::joinThread(Thread* thread)$/;"	f	class:Platform
joinThread	Lib/Platform/Windows/Thread.cpp	/^I64 Platform::joinThread(Thread* thread)$/;"	f	class:Platform
jumpto	ThirdParty/libunwind/src/Registers.hpp	/^  void        jumpto() {$/;"	f	class:libunwind::Registers_arm
jumpto	ThirdParty/libunwind/src/UnwindCursor.hpp	/^  virtual void jumpto() { _LIBUNWIND_ABORT("jumpto not implemented"); }$/;"	f	class:libunwind::AbstractUnwindCursor
jumpto	ThirdParty/libunwind/src/UnwindCursor.hpp	/^template <typename A, typename R> void UnwindCursor<A, R>::jumpto() {$/;"	f	class:libunwind::UnwindCursor
k	ThirdParty/dtoa/dtoa.c	/^	int k, maxwds, sign, wds;$/;"	m	struct:Bigint	file:
kMaxRegisterNumber	ThirdParty/libunwind/src/DwarfParser.hpp	/^    kMaxRegisterNumber = _LIBUNWIND_HIGHEST_DWARF_REGISTER$/;"	e	enum:libunwind::CFI_Parser::__anon82
kRegisterAtExpression	ThirdParty/libunwind/src/DwarfParser.hpp	/^    kRegisterAtExpression,$/;"	e	enum:libunwind::CFI_Parser::RegisterSavedWhere
kRegisterInCFA	ThirdParty/libunwind/src/DwarfParser.hpp	/^    kRegisterInCFA,$/;"	e	enum:libunwind::CFI_Parser::RegisterSavedWhere
kRegisterInRegister	ThirdParty/libunwind/src/DwarfParser.hpp	/^    kRegisterInRegister,$/;"	e	enum:libunwind::CFI_Parser::RegisterSavedWhere
kRegisterIsExpression	ThirdParty/libunwind/src/DwarfParser.hpp	/^    kRegisterIsExpression$/;"	e	enum:libunwind::CFI_Parser::RegisterSavedWhere
kRegisterOffsetFromCFA	ThirdParty/libunwind/src/DwarfParser.hpp	/^    kRegisterOffsetFromCFA,$/;"	e	enum:libunwind::CFI_Parser::RegisterSavedWhere
kRegisterUnused	ThirdParty/libunwind/src/DwarfParser.hpp	/^    kRegisterUnused,$/;"	e	enum:libunwind::CFI_Parser::RegisterSavedWhere
kXchainServiceClient	Lib/Emscripten/Emscripten.cpp	/^static std::unique_ptr<xchain::XChainServiceClient> kXchainServiceClient;$/;"	v	file:
key	Include/WAVM/Inline/HashMap.h	/^		Key key;$/;"	m	struct:WAVM::HashMapPair
kind	Include/WAVM/IR/Module.h	/^		ExternKind kind;$/;"	m	struct:WAVM::IR::Opcode::Export
kind	Include/WAVM/IR/Types.h	/^		const ExternKind kind;$/;"	m	struct:WAVM::IR::ValueType::ExternType
kind	Include/WAVM/Runtime/RuntimeData.h	/^		const ObjectKind kind;$/;"	m	struct:WAVM::Runtime::Object
kind	ThirdParty/libunwind/include/mach-o/compact_unwind_encoding.h	/^    uint32_t    kind;    \/\/ UNWIND_SECOND_LEVEL_COMPRESSED$/;"	m	struct:unwind_info_compressed_second_level_page_header
kind	ThirdParty/libunwind/include/mach-o/compact_unwind_encoding.h	/^    uint32_t    kind;    \/\/ UNWIND_SECOND_LEVEL_REGULAR$/;"	m	struct:unwind_info_regular_second_level_page_header
kind	ThirdParty/libunwind/src/UnwindCursor.hpp	/^  uint32_t kind() const {$/;"	f	class:libunwind::UnwindSectionCompressedPageHeader
kind	ThirdParty/libunwind/src/UnwindCursor.hpp	/^  uint32_t kind() const {$/;"	f	class:libunwind::UnwindSectionRegularPageHeader
kmask	ThirdParty/dtoa/dtoa.c	/^#define kmask /;"	d	file:
kshift	ThirdParty/dtoa/dtoa.c	/^#define kshift /;"	d	file:
label	Lib/IR/DisassemblyNames.cpp	/^	label = 3,$/;"	m	class:NameSubsectionType	file:
labelDisassemblyNames	Lib/WASTParse/ParseFunction.cpp	/^		std::vector<std::string> labelDisassemblyNames;$/;"	m	struct:WAVM::WAST::FunctionState	file:
labelId	Lib/WASTPrint/Print.cpp	/^		std::string labelId;$/;"	m	struct:FunctionPrintContext::ControlContext	file:
labelIndex	Lib/WASTPrint/Print.cpp	/^	Uptr labelIndex;$/;"	m	struct:FunctionPrintContext	file:
labelNameScope	Lib/WASTPrint/Print.cpp	/^	NameScope labelNameScope;$/;"	m	struct:FunctionPrintContext	file:
labelNames	Lib/WASTPrint/Print.cpp	/^	const std::vector<std::string>& labelNames;$/;"	m	struct:FunctionPrintContext	file:
labels	Include/WAVM/IR/Module.h	/^			std::vector<std::string> labels;$/;"	m	struct:WAVM::IR::Opcode::Elem::DisassemblyNames::Function
lableId	Include/WAVM/Emscripten/gas-visit-context.h	/^        std::string lableId;$/;"	m	struct:GasVisitor::ControlContext
lableId	Include/WAVM/Emscripten/insert-imported-context.h	/^        std::string lableId;$/;"	m	struct:ImportFunctionInsertVisitor::ControlContext
landingPadInst	Lib/LLVMJIT/EmitFunctionContext.h	/^			llvm::LandingPadInst* landingPadInst;$/;"	m	struct:WAVM::LLVMJIT::EmitFunctionContext::CatchContext
laneIndex	Include/WAVM/IR/Operators.h	/^		U8 laneIndex;$/;"	m	struct:WAVM::IR::LaneIndexImm
laneIndices	Include/WAVM/IR/Operators.h	/^		U8 laneIndices[numLanes];$/;"	m	struct:WAVM::IR::ShuffleImm
large_len	Include/WAVM/Inline/xxhash/xxhash.h	/^   uint32_t large_len;$/;"	m	struct:XXH32_state_s
large_len	Include/WAVM/Inline/xxhash/xxhash.h	/^   unsigned large_len;$/;"	m	struct:XXH32_state_s
lastDwarfRegNum	ThirdParty/libunwind/src/Registers.hpp	/^  static int  lastDwarfRegNum() { return _LIBUNWIND_HIGHEST_DWARF_REGISTER_ARM64; }$/;"	f	class:libunwind::Registers_arm64
lastDwarfRegNum	ThirdParty/libunwind/src/Registers.hpp	/^  static int  lastDwarfRegNum() { return _LIBUNWIND_HIGHEST_DWARF_REGISTER_ARM; }$/;"	f	class:libunwind::Registers_arm
lastDwarfRegNum	ThirdParty/libunwind/src/Registers.hpp	/^  static int  lastDwarfRegNum() { return _LIBUNWIND_HIGHEST_DWARF_REGISTER_MIPS; }$/;"	f	class:libunwind::Registers_mips_newabi
lastDwarfRegNum	ThirdParty/libunwind/src/Registers.hpp	/^  static int  lastDwarfRegNum() { return _LIBUNWIND_HIGHEST_DWARF_REGISTER_MIPS; }$/;"	f	class:libunwind::Registers_mips_o32
lastDwarfRegNum	ThirdParty/libunwind/src/Registers.hpp	/^  static int  lastDwarfRegNum() { return _LIBUNWIND_HIGHEST_DWARF_REGISTER_OR1K; }$/;"	f	class:libunwind::Registers_or1k
lastDwarfRegNum	ThirdParty/libunwind/src/Registers.hpp	/^  static int  lastDwarfRegNum() { return _LIBUNWIND_HIGHEST_DWARF_REGISTER_PPC64; }$/;"	f	class:libunwind::Registers_ppc64
lastDwarfRegNum	ThirdParty/libunwind/src/Registers.hpp	/^  static int  lastDwarfRegNum() { return _LIBUNWIND_HIGHEST_DWARF_REGISTER_PPC; }$/;"	f	class:libunwind::Registers_ppc
lastDwarfRegNum	ThirdParty/libunwind/src/Registers.hpp	/^  static int  lastDwarfRegNum() { return _LIBUNWIND_HIGHEST_DWARF_REGISTER_X86; }$/;"	f	class:libunwind::Registers_x86
lastDwarfRegNum	ThirdParty/libunwind/src/Registers.hpp	/^  static int  lastDwarfRegNum() { return _LIBUNWIND_HIGHEST_DWARF_REGISTER_X86_64; }$/;"	f	class:libunwind::Registers_x86_64
lastIndex	Include/WAVM/Inline/IndexMap.h	/^		Index lastIndex;$/;"	m	struct:WAVM::IndexMap
lastModuleInstance	Test/RunTestScript/RunTestScript.cpp	/^	GCPointer<ModuleInstance> lastModuleInstance;$/;"	m	struct:TestScriptState	file:
latex_documents	ThirdParty/libunwind/docs/conf.py	/^latex_documents = [$/;"	v
latex_elements	ThirdParty/libunwind/docs/conf.py	/^latex_elements = {$/;"	v
lex	Lib/WASTParse/Lexer.cpp	/^Token* WAST::lex(const char* string,$/;"	f	class:WAST
libgcc_object	ThirdParty/libunwind/src/Unwind_AppleExtras.cpp	/^struct libgcc_object {$/;"	s	file:
libgcc_object_info	ThirdParty/libunwind/src/Unwind_AppleExtras.cpp	/^struct libgcc_object_info {$/;"	s	file:
libunwind	ThirdParty/libunwind/src/AddressSpace.hpp	/^namespace libunwind {$/;"	n
libunwind	ThirdParty/libunwind/src/CompactUnwinder.hpp	/^namespace libunwind {$/;"	n
libunwind	ThirdParty/libunwind/src/DwarfInstructions.hpp	/^namespace libunwind {$/;"	n
libunwind	ThirdParty/libunwind/src/DwarfParser.hpp	/^namespace libunwind {$/;"	n
libunwind	ThirdParty/libunwind/src/EHHeaderParser.hpp	/^namespace libunwind {$/;"	n
libunwind	ThirdParty/libunwind/src/RWMutex.hpp	/^namespace libunwind {$/;"	n
libunwind	ThirdParty/libunwind/src/Registers.hpp	/^namespace libunwind {$/;"	n
libunwind	ThirdParty/libunwind/src/UnwindCursor.hpp	/^namespace libunwind {$/;"	n
libunwind	ThirdParty/libunwind/src/Unwind_AppleExtras.cpp	/^namespace libunwind {$/;"	n	file:
likelyFalseBranchWeights	Lib/LLVMJIT/EmitModuleContext.h	/^		llvm::MDNode* likelyFalseBranchWeights;$/;"	m	struct:WAVM::LLVMJIT::EmitModuleContext
likelyTrueBranchWeights	Lib/LLVMJIT/EmitModuleContext.h	/^		llvm::MDNode* likelyTrueBranchWeights;$/;"	m	struct:WAVM::LLVMJIT::EmitModuleContext
lineInfo	Lib/WASTParse/Parse.h	/^		const LineInfo* lineInfo;$/;"	m	struct:WAVM::WAST::ParseState
lineNumber	Include/WAVM/WASTParse/WASTParse.h	/^		U32 lineNumber() const { return newlines + 1; }$/;"	f	struct:WAVM::WAST::TextFileLocus
lineStarts	Lib/WASTParse/Lexer.cpp	/^		U32* lineStarts;$/;"	m	struct:WAVM::WAST::LineInfo	file:
linkError	Include/WAVM/WASI/WASI.h	/^		linkError,$/;"	m	class:WAVM::WASI::RunResult
linkImport	Lib/Runtime/Linker.cpp	/^void linkImport(const IR::Module& module,$/;"	f
linkModule	Lib/Runtime/Linker.cpp	/^LinkResult Runtime::linkModule(const IR::Module& module, Resolver& resolver)$/;"	f	class:Runtime
lit	Lib/RegExp/RegExp.cpp	/^	lit,$/;"	m	class:NodeType	file:
llvm	Lib/LLVMJIT/EmitConvert.cpp	/^namespace llvm {$/;"	n	file:
llvm	Lib/LLVMJIT/EmitCore.cpp	/^namespace llvm {$/;"	n	file:
llvm	Lib/LLVMJIT/EmitFunction.cpp	/^namespace llvm {$/;"	n	file:
llvm	Lib/LLVMJIT/EmitModule.cpp	/^namespace llvm {$/;"	n	file:
llvm	Lib/LLVMJIT/LLVMCompile.cpp	/^namespace llvm {$/;"	n	file:
llvm	Lib/LLVMJIT/LLVMJIT.cpp	/^namespace llvm {$/;"	n	file:
llvm	Lib/LLVMJIT/LLVMJITPrivate.h	/^namespace llvm {$/;"	n
llvm	Lib/LLVMJIT/Thunk.cpp	/^namespace llvm {$/;"	n	file:
llvmContext	Lib/LLVMJIT/EmitContext.h	/^		LLVMContext& llvmContext;$/;"	m	struct:WAVM::LLVMJIT::EmitContext
llvmContext	Lib/LLVMJIT/EmitModuleContext.h	/^		LLVMContext& llvmContext;$/;"	m	struct:WAVM::LLVMJIT::EmitModuleContext
llvmModule	Lib/LLVMJIT/EmitModuleContext.h	/^		llvm::Module* llvmModule;$/;"	m	struct:WAVM::LLVMJIT::EmitModuleContext
lo0bits	ThirdParty/dtoa/dtoa.c	/^lo0bits$/;"	f	file:
loadBinaryModule	Lib/Emscripten/Interface.cpp	/^ModulePtr loadBinaryModule(const char* codeBytes, int codeSize) {$/;"	f
loadBinaryModule	Lib/WASM/WASMSerialization.cpp	/^bool WASM::loadBinaryModule(const void* wasmBytes,$/;"	f	class:WASM
loadBinaryModuleFromFile	Programs/wavm-disas/wavm-disas.cpp	/^static bool loadBinaryModuleFromFile(const char* filename,$/;"	f	file:
loadExecutionState	Lib/Platform/POSIX/POSIXPrivate.h	/^[[noreturn]] inline void loadExecutionState(ExecutionContext* context, I64 returnCode)$/;"	f
loadExecutionState	Lib/Platform/Windows/Win64.asm	/^loadExecutionState PROC$/;"	l
loadFile	Include/WAVM/Inline/CLI.h	/^	inline bool loadFile(const char* filename, std::vector<U8>& outFileContents)$/;"	f	namespace:WAVM
loadFromUntypedPointer	Lib/LLVMJIT/EmitContext.h	/^		llvm::Value* loadFromUntypedPointer(llvm::Value* pointer,$/;"	f	struct:WAVM::LLVMJIT::EmitContext
loadModule	Lib/Emscripten/Interface.cpp	/^ModulePtr loadModule(char *filename)$/;"	f
loadModule	Lib/Emscripten/Interface.cpp	/^static bool loadModule(const char* filename, IR::Module& outModule) {$/;"	f	file:
loadModule	Lib/LLVMJIT/LLVMModule.cpp	/^std::shared_ptr<LLVMJIT::Module> LLVMJIT::loadModule($/;"	f	class:LLVMJIT
loadModule	Programs/wavm-compile/wavm-compile.cpp	/^static bool loadModule(const char* filename, IR::Module& outModule)$/;"	f	file:
loadModule	Programs/wavm-run-wasi/wavm-run-wasi.cpp	/^static bool loadModule(const char* filename, IR::Module& outModule)$/;"	f	file:
loadModule	Programs/wavm-run/wavm-run.cpp	/^static bool loadModule(const char* filename, IR::Module& outModule)$/;"	f	file:
loadPrecompiledModule	Lib/Runtime/Module.cpp	/^ModuleRef Runtime::loadPrecompiledModule(const IR::Module& irModule,$/;"	f	class:Runtime
loadTextModuleFromFile	Programs/wavm-as/wavm-as.cpp	/^static bool loadTextModuleFromFile(const char* filename, IR::Module& outModule)$/;"	f	file:
local	Lib/IR/DisassemblyNames.cpp	/^	local = 2,$/;"	m	class:NameSubsectionType	file:
localCopy	ThirdParty/libunwind/src/AddressSpace.hpp	/^template <typename P> void *RemoteAddressSpace<P>::localCopy(pint_t addr) {$/;"	f	class:libunwind::RemoteAddressSpace
localNameToIndexMap	Lib/WASTParse/ParseFunction.cpp	/^		std::shared_ptr<NameToIndexMap> localNameToIndexMap;$/;"	m	struct:WAVM::WAST::FunctionState	file:
localNames	Lib/WASTPrint/Print.cpp	/^	const std::vector<std::string>& localNames;$/;"	m	struct:FunctionPrintContext	file:
localPointers	Lib/LLVMJIT/EmitFunctionContext.h	/^		std::vector<llvm::Value*> localPointers;$/;"	m	struct:WAVM::LLVMJIT::EmitFunctionContext
local_get	Include/WAVM/Emscripten/gas-visit-context.h	/^    Result local_get(GetOrSetVariableImm<false> imm)$/;"	f	struct:GasVisitor
local_get	Lib/IR/Validate.cpp	/^	void local_get(GetOrSetVariableImm<false> imm)$/;"	f	struct:FunctionValidationContext
local_get	Lib/LLVMJIT/EmitVar.cpp	/^void EmitFunctionContext::local_get(GetOrSetVariableImm<false> imm)$/;"	f	class:EmitFunctionContext
local_get	Lib/WASTPrint/Print.cpp	/^	void local_get(GetOrSetVariableImm<false> imm)$/;"	f	struct:FunctionPrintContext
local_set	Include/WAVM/Emscripten/gas-visit-context.h	/^    Result local_set(GetOrSetVariableImm<false> imm)$/;"	f	struct:GasVisitor
local_set	Lib/IR/Validate.cpp	/^	void local_set(GetOrSetVariableImm<false> imm)$/;"	f	struct:FunctionValidationContext
local_set	Lib/LLVMJIT/EmitVar.cpp	/^void EmitFunctionContext::local_set(GetOrSetVariableImm<false> imm)$/;"	f	class:EmitFunctionContext
local_set	Lib/WASTPrint/Print.cpp	/^	void local_set(GetOrSetVariableImm<false> imm)$/;"	f	struct:FunctionPrintContext
local_tee	Include/WAVM/Emscripten/gas-visit-context.h	/^    Result local_tee(GetOrSetVariableImm<false> imm)$/;"	f	struct:GasVisitor
local_tee	Lib/IR/Validate.cpp	/^	void local_tee(GetOrSetVariableImm<false> imm)$/;"	f	struct:FunctionValidationContext
local_tee	Lib/LLVMJIT/EmitVar.cpp	/^void EmitFunctionContext::local_tee(GetOrSetVariableImm<false> imm)$/;"	f	class:EmitFunctionContext
local_tee	Lib/WASTPrint/Print.cpp	/^	void local_tee(GetOrSetVariableImm<false> imm)$/;"	f	struct:FunctionPrintContext
locals	Include/WAVM/IR/Module.h	/^			std::vector<std::string> locals;$/;"	m	struct:WAVM::IR::Opcode::Elem::DisassemblyNames::Function
locals	Lib/IR/Validate.cpp	/^	std::vector<ValueType> locals;$/;"	m	struct:FunctionValidationContext	file:
location	ThirdParty/libunwind/src/DwarfParser.hpp	/^    RegisterSavedWhere location;$/;"	m	struct:libunwind::CFI_Parser::RegisterLocation
lock	Lib/Platform/POSIX/Mutex.cpp	/^void Platform::Mutex::lock()$/;"	f	class:Platform::Mutex
lock	Lib/Platform/Windows/Mutex.cpp	/^void Platform::Mutex::lock()$/;"	f	class:Platform::Mutex
lock	ThirdParty/libunwind/src/RWMutex.hpp	/^  bool lock() { return true; }$/;"	f	class:libunwind::RWMutex
lock_shared	ThirdParty/libunwind/src/RWMutex.hpp	/^  bool lock_shared() { return true; }$/;"	f	class:libunwind::RWMutex
locus	Include/WAVM/WASTParse/TestScript.h	/^		const TextFileLocus locus;$/;"	m	struct:WAVM::WAST::Action
locus	Include/WAVM/WASTParse/TestScript.h	/^		const TextFileLocus locus;$/;"	m	struct:WAVM::WAST::Command
locus	Include/WAVM/WASTParse/WASTParse.h	/^		TextFileLocus locus;$/;"	m	struct:WAVM::WAST::Error
logAPIs	ThirdParty/libunwind/src/libunwind.cpp	/^bool logAPIs() {$/;"	f
logDWARF	ThirdParty/libunwind/src/libunwind.cpp	/^bool logDWARF() {$/;"	f
logOperator	Lib/IR/Validate.cpp	/^	void logOperator(const std::string& operatorDescription)$/;"	f	struct:FunctionValidationContext
logOperator	Lib/LLVMJIT/EmitFunction.cpp	/^void EmitFunctionContext::logOperator(const std::string& operatorDescription)$/;"	f	class:EmitFunctionContext
logRatePerSecond	Include/WAVM/Inline/Timing.h	/^	inline void logRatePerSecond(const char* context,$/;"	f	namespace:WAVM::Timing
logTimer	Include/WAVM/Inline/Timing.h	/^	inline void logTimer(const char* context, Timer& timer)$/;"	f	namespace:WAVM::Timing
logUnwinding	ThirdParty/libunwind/src/libunwind.cpp	/^bool logUnwinding() {$/;"	f
loop	Include/WAVM/Emscripten/gas-visit-context.h	/^	Result loop(ControlStructureImm imm)$/;"	f	struct:GasVisitor
loop	Include/WAVM/Emscripten/gas-visit-context.h	/^            loop,$/;"	m	class:GasVisitor::ControlContext::Type
loop	Include/WAVM/Emscripten/insert-imported-context.h	/^            loop,$/;"	m	class:ImportFunctionInsertVisitor::ControlContext::Type
loop	Include/WAVM/Emscripten/insert-imported-context.h	/^    Result loop(ControlStructureImm imm)$/;"	f	struct:ImportFunctionInsertVisitor
loop	Lib/IR/Validate.cpp	/^			loop,$/;"	m	class:FunctionValidationContext::ControlContext::Type	file:
loop	Lib/IR/Validate.cpp	/^	void loop(ControlStructureImm imm)$/;"	f	struct:FunctionValidationContext
loop	Lib/LLVMJIT/EmitCore.cpp	/^void EmitFunctionContext::loop(ControlStructureImm imm)$/;"	f	class:EmitFunctionContext
loop	Lib/LLVMJIT/EmitFunction.cpp	/^	void loop(ControlStructureImm) { ++unreachableControlDepth; }$/;"	f	struct:UnreachableOpVisitor
loop	Lib/LLVMJIT/EmitFunctionContext.h	/^				loop,$/;"	m	class:WAVM::LLVMJIT::EmitFunctionContext::ControlContext::Type
loop	Lib/WASTPrint/Print.cpp	/^			loop,$/;"	m	class:FunctionPrintContext::ControlContext::Type	file:
loop	Lib/WASTPrint/Print.cpp	/^	void loop(ControlStructureImm imm)$/;"	f	struct:FunctionPrintContext
lsda	ThirdParty/libunwind/include/libunwind.h	/^  unw_word_t  lsda;             \/* address of language specific data area, *\/$/;"	m	struct:unw_proc_info_t
lsda	ThirdParty/libunwind/src/DwarfParser.hpp	/^    pint_t  lsda;$/;"	m	struct:libunwind::CFI_Parser::FDE_Info
lsda	ThirdParty/libunwind/src/Unwind-sjlj.c	/^  uintptr_t                       lsda;        \/\/ arm offset=28$/;"	m	struct:_Unwind_FunctionContext	file:
lsdaEncoding	ThirdParty/libunwind/src/DwarfParser.hpp	/^    uint8_t   lsdaEncoding;$/;"	m	struct:libunwind::CFI_Parser::CIE_Info
lsdaIndexArraySectionOffset	ThirdParty/libunwind/include/mach-o/compact_unwind_encoding.h	/^    uint32_t        lsdaIndexArraySectionOffset;    \/\/ section offset to start of lsda_index array for this range$/;"	m	struct:unwind_info_section_header_index_entry
lsdaIndexArraySectionOffset	ThirdParty/libunwind/src/UnwindCursor.hpp	/^  uint32_t lsdaIndexArraySectionOffset(uint32_t index) const {$/;"	f	class:libunwind::UnwindSectionIndexArray
lsdaOffset	ThirdParty/libunwind/include/mach-o/compact_unwind_encoding.h	/^    uint32_t        lsdaOffset;$/;"	m	struct:unwind_info_section_header_lsda_index_entry
lsdaOffset	ThirdParty/libunwind/src/UnwindCursor.hpp	/^  uint32_t lsdaOffset(uint32_t index) const {$/;"	f	class:libunwind::UnwindSectionLsdaArray
magicNumber	Lib/WASM/WASMSerialization.cpp	/^	magicNumber = 0x6d736100, \/\/ "\\0asm"$/;"	e	enum:__anon41	file:
main	Examples/Benchmark/Benchmark.cpp	/^int main()$/;"	f
main	Examples/gas.cpp	/^int main() {$/;"	f
main	Programs/wavm-as/wavm-as.cpp	/^int main(int argc, char** argv)$/;"	f
main	Programs/wavm-compile/wavm-compile.cpp	/^int main(int argc, char** argv)$/;"	f
main	Programs/wavm-disas/wavm-disas.cpp	/^int main(int argc, char** argv)$/;"	f
main	Programs/wavm-run-wasi/wavm-run-wasi.cpp	/^int main(int argc, char** argv)$/;"	f
main	Programs/wavm-run/wavm-run.cpp	/^int main(int argc, char** argv)$/;"	f
main	Test/Benchmarks/invoke-bench.cpp	/^int main(int argc, char** argv)$/;"	f
main	Test/Containers/HashMapTest.cpp	/^I32 main()$/;"	f
main	Test/Containers/HashSetTest.cpp	/^I32 main()$/;"	f
main	Test/DumpTestModules/DumpTestModules.cpp	/^int main(int argc, char** argv)$/;"	f
main	Test/RunTestScript/RunTestScript.cpp	/^int main(int argc, char** argv)$/;"	f
main	Test/fuzz/fuzz-assemble.cpp	/^I32 main(int argc, char** argv)$/;"	f
main	Test/fuzz/fuzz-compile-model.cpp	/^I32 main(int argc, char** argv)$/;"	f
main	Test/fuzz/fuzz-compile.cpp	/^I32 main(int argc, char** argv)$/;"	f
main	Test/fuzz/fuzz-disassemble.cpp	/^I32 main(int argc, char** argv)$/;"	f
main	Test/fuzz/fuzz-instantiate.cpp	/^I32 main(int argc, char** argv)$/;"	f
main	Test/fuzz/fuzz-wasm.cpp	/^I32 main()$/;"	f
main	Test/fuzz/fuzz-wast.cpp	/^I32 main()$/;"	f
main	Test/wavm-c/wavm-c-test.c	/^int main(int argc, char** argv)$/;"	f
main	ThirdParty/libunwind/test/alignment.pass.cpp	/^int main()$/;"	f
main	ThirdParty/libunwind/test/libunwind_01.pass.cpp	/^int main() {$/;"	f
main	ThirdParty/libunwind/test/libunwind_02.pass.cpp	/^int main() {$/;"	f
main	ThirdParty/libunwind/test/unw_getcontext.pass.cpp	/^int main() {$/;"	f
main	output/CMakeFiles/3.13.2/CompilerIdC/CMakeCCompilerId.c	/^int main(argc, argv) int argc; char *argv[];$/;"	f
main	output/CMakeFiles/3.13.2/CompilerIdC/CMakeCCompilerId.c	/^void main() {}$/;"	f
main	output/CMakeFiles/3.13.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^int main(int argc, char* argv[])$/;"	f
main	output/CMakeFiles/feature_tests.c	/^int main(int argc, char** argv) { (void)argv; return features[argc]; }$/;"	f
main	output/CMakeFiles/feature_tests.cxx	/^int main(int argc, char** argv) { (void)argv; return features[argc]; }$/;"	f
makeDummyFunction	Lib/Runtime/Table.cpp	/^static Function* makeDummyFunction(const char* debugName)$/;"	f	file:
makeHostRef	Lib/WASTParse/ParseTests.cpp	/^static Runtime::Function* makeHostRef(Uptr index)$/;"	f	file:
makeInf	Lib/Emscripten/Emscripten.cpp	/^static F64 makeInf()$/;"	f	class:ioStreamVMHandle	file:
makeNaN	Lib/Emscripten/Emscripten.cpp	/^static F64 makeNaN()$/;"	f	class:ioStreamVMHandle	file:
man_pages	ThirdParty/libunwind/docs/conf.py	/^man_pages = [$/;"	v
map	Include/WAVM/Inline/IndexMap.h	/^		HashMap<Index, Element> map;$/;"	m	struct:WAVM::IndexMap
map	Lib/WASTPrint/Print.cpp	/^	void map(std::string& name)$/;"	f	struct:NameScope
mapIt	Include/WAVM/Inline/IndexMap.h	/^			HashMapIterator<Index, Element> mapIt;$/;"	m	struct:WAVM::IndexMap::Iterator
master_doc	ThirdParty/libunwind/docs/conf.py	/^master_doc = 'index'$/;"	v
max	Include/WAVM/IR/Types.h	/^		U64 max;$/;"	m	struct:WAVM::IR::ValueType::SizeConstraints
max	Include/WAVM/IR/Types.h	/^		max = 4,$/;"	m	class:WAVM::IR::ValueType::ExternKind
max	Include/WAVM/IR/Types.h	/^		max = num - 1$/;"	m	class:WAVM::IR::ValueType
maxContexts	Include/WAVM/Runtime/RuntimeData.h	/^		maxContexts$/;"	e	enum:WAVM::Runtime::__anon17
maxDataSegments	Include/WAVM/IR/IR.h	/^		Uptr maxDataSegments = UINTPTR_MAX;$/;"	m	struct:WAVM::IR::FeatureSpec
maxExponentBits	Include/WAVM/Inline/FloatComponents.h	/^			maxExponentBits = 0x7ff,$/;"	m	struct:WAVM::FloatComponents	typeref:enum:WAVM::FloatComponents::
maxExponentBits	Include/WAVM/Inline/FloatComponents.h	/^			maxExponentBits = 0xff,$/;"	m	struct:FloatComponents	typeref:enum:FloatComponents::
maxGlobalBytes	Include/WAVM/Runtime/RuntimeData.h	/^		maxGlobalBytes = 4096 - maxThunkArgAndReturnBytes,$/;"	e	enum:WAVM::Runtime::__anon16
maxIndex	Include/WAVM/Inline/IndexMap.h	/^		Index maxIndex;$/;"	m	struct:WAVM::IndexMap
maxLabelsPerFunction	Include/WAVM/IR/IR.h	/^		Uptr maxLabelsPerFunction = UINTPTR_MAX;$/;"	m	struct:WAVM::IR::FeatureSpec
maxLocals	Include/WAVM/IR/IR.h	/^		Uptr maxLocals = 65536;$/;"	m	struct:WAVM::IR::FeatureSpec
maxMemories	Include/WAVM/Runtime/RuntimeData.h	/^		maxMemories = 255,$/;"	e	enum:WAVM::Runtime::__anon16
maxMutableGlobals	Include/WAVM/Runtime/RuntimeData.h	/^		maxMutableGlobals = maxGlobalBytes \/ sizeof(IR::UntaggedValue),$/;"	e	enum:WAVM::Runtime::__anon16
maxNormalExponent	Include/WAVM/Inline/FloatComponents.h	/^			maxNormalExponent = 1023,$/;"	m	struct:WAVM::FloatComponents	typeref:enum:WAVM::FloatComponents::
maxNormalExponent	Include/WAVM/Inline/FloatComponents.h	/^			maxNormalExponent = 127,$/;"	m	struct:FloatComponents	typeref:enum:FloatComponents::
maxReturnValues	Include/WAVM/Runtime/RuntimeData.h	/^	static_assert(sizeof(IR::UntaggedValue) * IR::maxReturnValues <= maxThunkArgAndReturnBytes,$/;"	m	class:WAVM::Runtime::IR
maxSingleByteOpcode	Include/WAVM/IR/Operators.h	/^			maxSingleByteOpcode$/;"	m	class:WAVM::IR::Opcode
maxTables	Include/WAVM/Runtime/RuntimeData.h	/^		maxTables = 128*1024 - maxMemories - 1,$/;"	e	enum:WAVM::Runtime::__anon16
maxThunkArgAndReturnBytes	Include/WAVM/Runtime/RuntimeData.h	/^		maxThunkArgAndReturnBytes = 256,$/;"	e	enum:WAVM::Runtime::__anon16
maximumTerminalStateIndex	Include/WAVM/NFA/NFA.h	/^		maximumTerminalStateIndex = (StateIndex)0xbfff,$/;"	e	enum:WAVM::NFA::__anon3
maxwds	ThirdParty/dtoa/dtoa.c	/^	int k, maxwds, sign, wds;$/;"	m	struct:Bigint	file:
meet	Include/WAVM/IR/Types.h	/^	inline ValueType meet(ValueType a, ValueType b)$/;"	f	class:WAVM::IR::ValueType
mem32	Include/WAVM/Inline/xxhash/xxhash.h	/^   uint32_t mem32[4];$/;"	m	struct:XXH32_state_s
mem32	Include/WAVM/Inline/xxhash/xxhash.h	/^   unsigned mem32[4];$/;"	m	struct:XXH32_state_s
mem64	Include/WAVM/Inline/xxhash/xxhash.h	/^   uint64_t mem64[4];$/;"	m	struct:XXH64_state_s
mem64	Include/WAVM/Inline/xxhash/xxhash.h	/^   unsigned long long mem64[4];$/;"	m	struct:XXH64_state_s
memcpyNoASAN	Lib/Platform/POSIX/Thread.cpp	/^static void memcpyNoASAN(U8* dest, const U8* source, Uptr numBytes)$/;"	f	file:
memories	Include/WAVM/IR/Module.h	/^		IndexSpace<MemoryDef, MemoryType> memories;$/;"	m	struct:WAVM::IR::Opcode::Elem::Module
memories	Include/WAVM/IR/Module.h	/^		std::vector<std::string> memories;$/;"	m	struct:WAVM::IR::Opcode::Elem::DisassemblyNames
memories	Include/WAVM/Runtime/Runtime.h	/^		std::vector<Memory*> memories;$/;"	m	struct:WAVM::Runtime::ImportBindings
memories	Lib/Runtime/Memory.cpp	/^static std::vector<Memory*> memories;$/;"	v	file:
memories	Lib/Runtime/RuntimePrivate.h	/^		IndexMap<Uptr, Memory*> memories;$/;"	m	struct:WAVM::Runtime::Compartment
memories	Lib/Runtime/RuntimePrivate.h	/^		const std::vector<Memory*> memories;$/;"	m	struct:WAVM::Runtime::ModuleInstance
memoriesMutex	Lib/Runtime/Memory.cpp	/^static Platform::Mutex memoriesMutex;$/;"	v	file:
memory	Include/WAVM/Emscripten/Emscripten.h	/^		Runtime::GCPointer<Runtime::Memory> memory;$/;"	m	struct:WAVM::Emscripten::Instance
memory	Include/WAVM/IR/Types.h	/^			MemoryType memory;$/;"	m	union:WAVM::IR::ValueType::ExternType::__anon7
memory	Include/WAVM/IR/Types.h	/^		memory = 2,$/;"	m	class:WAVM::IR::ValueType::ExternKind
memory	Include/WAVM/Runtime/RuntimeData.h	/^		memory = 2,$/;"	m	class:WAVM::Runtime::ObjectKind
memory	Lib/IR/DisassemblyNames.cpp	/^	memory = 6,$/;"	m	class:NameSubsectionType	file:
memory	Lib/WASI/WASI.cpp	/^		GCPointer<Memory> memory;$/;"	m	struct:WAVM::WASI::Process	file:
memory	Lib/WASM/WASMSerialization.cpp	/^	memory,$/;"	m	class:SectionType	file:
memoryAccessAsPOSIXFlag	Lib/Platform/POSIX/Memory.cpp	/^static U32 memoryAccessAsPOSIXFlag(MemoryAccess access)$/;"	f	file:
memoryAccessAsWin32Flag	Lib/Platform/Windows/Memory.cpp	/^static U32 memoryAccessAsWin32Flag(MemoryAccess access)$/;"	f	file:
memoryArrayPtr	Include/WAVM/Runtime/Runtime.h	/^	template<typename Value> Value* memoryArrayPtr(Memory* memory, Uptr offset, Uptr numElements)$/;"	f	namespace:WAVM::Runtime
memoryBasePointerVariable	Lib/LLVMJIT/EmitContext.h	/^		llvm::Value* memoryBasePointerVariable;$/;"	m	struct:WAVM::LLVMJIT::EmitContext
memoryBases	Include/WAVM/Runtime/RuntimeData.h	/^		void* memoryBases[maxMemories];$/;"	m	struct:WAVM::Runtime::CompartmentRuntimeData
memoryIndex	Include/WAVM/IR/Module.h	/^		Uptr memoryIndex;$/;"	m	struct:WAVM::IR::Opcode::DataSegment
memoryIndex	Include/WAVM/IR/Operators.h	/^		Uptr memoryIndex;$/;"	m	struct:WAVM::IR::DataSegmentAndMemImm
memoryIndex	Include/WAVM/IR/Operators.h	/^		Uptr memoryIndex;$/;"	m	struct:WAVM::IR::MemoryImm
memoryManager	Lib/LLVMJIT/LLVMJITPrivate.h	/^		ModuleMemoryManager* memoryManager;$/;"	m	struct:WAVM::LLVMJIT::Module
memoryMap	Lib/Runtime/Intrinsics.cpp	/^		HashMap<std::string, Intrinsics::Memory*> memoryMap;$/;"	m	struct:WAVM::Intrinsics::ModuleImpl	file:
memoryNameToIndexMap	Lib/WASTParse/Parse.h	/^		NameToIndexMap memoryNameToIndexMap;$/;"	m	struct:WAVM::WAST::ModuleState
memoryOffsets	Lib/LLVMJIT/EmitModuleContext.h	/^		std::vector<llvm::Constant*> memoryOffsets;$/;"	m	struct:WAVM::LLVMJIT::EmitModuleContext
memoryRef	Include/WAVM/Runtime/Runtime.h	/^	template<typename Value> Value& memoryRef(Memory* memory, Uptr offset)$/;"	f	namespace:WAVM::Runtime
memory_copy	Lib/LLVMJIT/EmitMem.cpp	/^void EmitFunctionContext::memory_copy(MemoryCopyImm imm)$/;"	f	class:EmitFunctionContext
memory_fill	Lib/LLVMJIT/EmitMem.cpp	/^void EmitFunctionContext::memory_fill(MemoryImm imm)$/;"	f	class:EmitFunctionContext
memory_grow	Lib/LLVMJIT/EmitMem.cpp	/^void EmitFunctionContext::memory_grow(MemoryImm imm)$/;"	f	class:EmitFunctionContext
memory_init	Lib/LLVMJIT/EmitMem.cpp	/^void EmitFunctionContext::memory_init(DataSegmentAndMemImm imm)$/;"	f	class:EmitFunctionContext
memory_size	Lib/LLVMJIT/EmitMem.cpp	/^void EmitFunctionContext::memory_size(MemoryImm imm)$/;"	f	class:EmitFunctionContext
memsize	Include/WAVM/Inline/xxhash/xxhash.h	/^   uint32_t memsize;$/;"	m	struct:XXH32_state_s
memsize	Include/WAVM/Inline/xxhash/xxhash.h	/^   uint32_t memsize;$/;"	m	struct:XXH64_state_s
memsize	Include/WAVM/Inline/xxhash/xxhash.h	/^   unsigned memsize;$/;"	m	struct:XXH32_state_s
memsize	Include/WAVM/Inline/xxhash/xxhash.h	/^   unsigned memsize;$/;"	m	struct:XXH64_state_s
message	Include/WAVM/IR/Validate.h	/^		std::string message;$/;"	m	struct:WAVM::IR::ValidationException
message	Include/WAVM/Inline/Serialization.h	/^		std::string message;$/;"	m	struct:WAVM::Serialization::FatalSerializationException
message	Include/WAVM/WASTParse/WASTParse.h	/^		std::string message;$/;"	m	struct:WAVM::WAST::Error
message	Lib/WASTParse/Parse.h	/^		std::string message;$/;"	m	struct:WAVM::WAST::UnresolvedError
metrics	Include/WAVM/Logging/Logging.h	/^		metrics,$/;"	e	enum:WAVM::Log::Category
mh	ThirdParty/libunwind/src/AddressSpace.hpp	/^    const struct mach_header*   mh;$/;"	m	struct:dyld_unwind_sections	typeref:struct:dyld_unwind_sections::mach_header
mh	ThirdParty/libunwind/src/UnwindCursor.hpp	/^    pint_t mh;$/;"	m	struct:libunwind::DwarfFDECache::entry
min	Include/WAVM/IR/Types.h	/^		U64 min;$/;"	m	struct:WAVM::IR::ValueType::SizeConstraints
minBuckets	Include/WAVM/Inline/HashTable.h	/^			minBuckets = 8$/;"	e	enum:WAVM::DefaultHashTableAllocPolicy::__anon18
minIndex	Include/WAVM/Inline/IndexMap.h	/^		Index minIndex;$/;"	m	struct:WAVM::IndexMap
minNormalExponent	Include/WAVM/Inline/FloatComponents.h	/^			minNormalExponent = -1022,$/;"	m	struct:WAVM::FloatComponents	typeref:enum:WAVM::FloatComponents::
minNormalExponent	Include/WAVM/Inline/FloatComponents.h	/^			minNormalExponent = -126,$/;"	m	struct:FloatComponents	typeref:enum:FloatComponents::
minStaticMemoryPages	Lib/Emscripten/Emscripten.cpp	/^	minStaticMemoryPages = 128$/;"	e	enum:__anon46	file:
mips_newabi_thread_state_t	ThirdParty/libunwind/src/Registers.hpp	/^  struct mips_newabi_thread_state_t {$/;"	s	class:libunwind::Registers_mips_newabi
mips_o32_thread_state_t	ThirdParty/libunwind/src/Registers.hpp	/^  struct mips_o32_thread_state_t {$/;"	s	class:libunwind::Registers_mips_o32
misalignedAtomicMemoryAccess	Include/WAVM/WASTParse/TestScript.h	/^		misalignedAtomicMemoryAccess,$/;"	m	class:WAVM::WAST::ExpectedTrapType
missingImports	Include/WAVM/Runtime/Linker.h	/^		std::vector<MissingImport> missingImports;$/;"	m	struct:WAVM::Runtime::LinkResult
module	Include/WAVM/Emscripten/gas-visit-context.h	/^    IR::Module& module;$/;"	m	struct:GasVisitor
module	Include/WAVM/Emscripten/insert-imported-context.h	/^    IR::Module& module;$/;"	m	struct:ImportFunctionInsertVisitor
module	Include/WAVM/IR/OperatorPrinter.h	/^		const Module& module;$/;"	m	struct:WAVM::IR::OperatorPrinter
module	Include/WAVM/Runtime/Linker.h	/^		const IR::Module& module;$/;"	m	struct:WAVM::Runtime::ModuleExportResolver
module	Include/WAVM/WASTParse/TestScript.h	/^		std::unique_ptr<IR::Module> module;$/;"	m	struct:WAVM::WAST::ModuleAction
module	Lib/IR/DisassemblyNames.cpp	/^	module = 0,$/;"	m	class:NameSubsectionType	file:
module	Lib/IR/Validate.cpp	/^	const Module& module;$/;"	m	struct:FunctionValidationContext	file:
module	Lib/WASTParse/Parse.h	/^		IR::Module& module;$/;"	m	struct:WAVM::WAST::ModuleState
module	Lib/WASTPrint/Print.cpp	/^	const Module& module;$/;"	m	struct:FunctionPrintContext	file:
module	Lib/WASTPrint/Print.cpp	/^	const Module& module;$/;"	m	struct:ModulePrintContext	file:
moduleAction	Include/WAVM/WASTParse/TestScript.h	/^		std::unique_ptr<ModuleAction> moduleAction;$/;"	m	struct:WAVM::WAST::AssertUnlinkableCommand
moduleContext	Lib/LLVMJIT/EmitFunctionContext.h	/^		struct EmitModuleContext& moduleContext;$/;"	m	struct:WAVM::LLVMJIT::EmitFunctionContext	typeref:struct:WAVM::LLVMJIT::EmitFunctionContext::EmitModuleContext
moduleContext	Lib/WASTPrint/Print.cpp	/^	ModulePrintContext& moduleContext;$/;"	m	struct:FunctionPrintContext	file:
moduleInstance	Include/WAVM/Runtime/Linker.h	/^		ModuleInstance* moduleInstance;$/;"	m	struct:WAVM::Runtime::ModuleExportResolver
moduleInstance	Include/WAVM/Runtime/RuntimeData.h	/^		moduleInstance = 5,$/;"	m	class:WAVM::Runtime::ObjectKind
moduleInstance	Lib/WASI/WASI.cpp	/^		GCPointer<ModuleInstance> moduleInstance;$/;"	m	struct:WAVM::WASI::Process	file:
moduleInstanceId	Include/WAVM/Runtime/RuntimeData.h	/^		const Uptr moduleInstanceId;$/;"	m	struct:WAVM::Runtime::Function
moduleInstanceId	Lib/LLVMJIT/EmitModuleContext.h	/^		llvm::Constant* moduleInstanceId;$/;"	m	struct:WAVM::LLVMJIT::EmitModuleContext
moduleInstances	Lib/Runtime/RuntimePrivate.h	/^		IndexMap<Uptr, ModuleInstance*> moduleInstances;$/;"	m	struct:WAVM::Runtime::Compartment
moduleInternalNameToInstanceMap	Test/RunTestScript/RunTestScript.cpp	/^	HashMap<std::string, GCPointer<ModuleInstance>> moduleInternalNameToInstanceMap;$/;"	m	struct:TestScriptState	file:
moduleName	Include/WAVM/IR/Module.h	/^		std::string moduleName;$/;"	m	struct:WAVM::IR::Opcode::Elem::DisassemblyNames
moduleName	Include/WAVM/IR/Module.h	/^		std::string moduleName;$/;"	m	struct:WAVM::IR::Opcode::Import
moduleName	Include/WAVM/Runtime/Linker.h	/^			std::string moduleName;$/;"	m	struct:WAVM::Runtime::LinkResult::MissingImport
moduleName	Include/WAVM/WASTParse/TestScript.h	/^		std::string moduleName;$/;"	m	struct:WAVM::WAST::RegisterCommand
moduleNameToInstanceMap	Lib/Emscripten/Interface.cpp	/^    HashMap<std::string, ModuleInstance*> moduleNameToInstanceMap;$/;"	m	struct:RootResolver	file:
moduleNameToInstanceMap	Lib/WASI/WASI.cpp	/^	HashMap<std::string, GCPointer<ModuleInstance>> moduleNameToInstanceMap;$/;"	m	struct:ProcessResolver	file:
moduleNameToInstanceMap	Programs/wavm-run/wavm-run.cpp	/^	HashMap<std::string, ModuleInstance*> moduleNameToInstanceMap;$/;"	m	struct:RootResolver	file:
moduleNameToInstanceMap	Test/RunTestScript/RunTestScript.cpp	/^	HashMap<std::string, GCPointer<ModuleInstance>> moduleNameToInstanceMap;$/;"	m	struct:TestScriptState	file:
moduleState	Lib/WASTParse/Parse.h	/^		ModuleState* moduleState;$/;"	m	struct:WAVM::WAST::CursorState
moveFrom	Include/WAVM/Inline/HashTableImpl.h	/^template<HASHTABLE_PARAMETERS> void HashTable<HASHTABLE_ARGUMENTS>::moveFrom(HashTable&& movee)$/;"	f	class:HashTable
moveFrom	Lib/NFA/NFA.cpp	/^void NFA::Machine::moveFrom(Machine&& inMachine)$/;"	f	class:NFA::Machine
mult	ThirdParty/dtoa/dtoa.c	/^mult$/;"	f	file:
multadd	ThirdParty/dtoa/dtoa.c	/^multadd$/;"	f	file:
multipleResultsAndBlockParams	Include/WAVM/IR/IR.h	/^		bool multipleResultsAndBlockParams = true;$/;"	m	struct:WAVM::IR::FeatureSpec
mutableData	Include/WAVM/Runtime/RuntimeData.h	/^		FunctionMutableData* mutableData;$/;"	m	struct:WAVM::Runtime::Function
mutableGlobalIndex	Include/WAVM/LLVMJIT/LLVMJIT.h	/^			Uptr mutableGlobalIndex;$/;"	m	union:WAVM::LLVMJIT::GlobalBinding::__anon12
mutableGlobalIndex	Lib/Runtime/RuntimePrivate.h	/^		const U32 mutableGlobalIndex;$/;"	m	struct:WAVM::Runtime::Global
mutableGlobals	Include/WAVM/Runtime/RuntimeData.h	/^		IR::UntaggedValue mutableGlobals[maxMutableGlobals];$/;"	m	struct:WAVM::Runtime::ContextRuntimeData
mutex	Include/WAVM/Inline/Lock.h	/^		Mutex* mutex;$/;"	m	struct:WAVM::Lock
mutex	Lib/Runtime/Atomics.cpp	/^	Platform::Mutex mutex;$/;"	m	struct:WaitList	file:
mutex	Lib/Runtime/RuntimePrivate.h	/^		mutable Platform::Mutex mutex;$/;"	m	struct:WAVM::Runtime::Compartment
mutex	Test/RunTestScript/RunTestScript.cpp	/^	Platform::Mutex mutex;$/;"	m	struct:SharedState	file:
mvp	Include/WAVM/IR/IR.h	/^		bool mvp = true;$/;"	m	struct:WAVM::IR::FeatureSpec
n_bigtens	ThirdParty/dtoa/dtoa.c	/^#define n_bigtens /;"	d	file:
name	Include/WAVM/IR/Module.h	/^			std::string name;$/;"	m	struct:WAVM::IR::Opcode::Elem::DisassemblyNames::Function
name	Include/WAVM/IR/Module.h	/^		std::string name;$/;"	m	struct:WAVM::IR::Opcode::Elem::UserSection
name	Include/WAVM/IR/Module.h	/^		std::string name;$/;"	m	struct:WAVM::IR::Opcode::Export
name	Include/WAVM/Runtime/Intrinsics.h	/^		const char* name;$/;"	m	struct:WAVM::Intrinsics::Function
name	Include/WAVM/Runtime/Intrinsics.h	/^		const char* name;$/;"	m	struct:WAVM::Intrinsics::Global
name	Include/WAVM/Runtime/Intrinsics.h	/^		const char* name;$/;"	m	struct:WAVM::Intrinsics::Memory
name	Include/WAVM/Runtime/Intrinsics.h	/^		const char* name;$/;"	m	struct:WAVM::Intrinsics::Table
name	Lib/WASTParse/Parse.h	/^			Name name;$/;"	m	union:WAVM::WAST::Reference::__anon49
name	Lib/WASTParse/Parse.h	/^			name,$/;"	m	class:WAVM::WAST::Reference::Type
name	Lib/WASTParse/ParseFunction.cpp	/^		Name name;$/;"	m	struct:__anon50::ScopedBranchTarget	file:
name	Test/fuzz/fuzz-compile-model.cpp	/^	const char* name;$/;"	m	struct:OperatorInfo	file:
nameSet	Lib/WASTPrint/Print.cpp	/^	HashSet<std::string> nameSet;$/;"	m	struct:NameScope	file:
nameToFunctionMap	Lib/LLVMJIT/LLVMJITPrivate.h	/^		HashMap<std::string, Runtime::Function*> nameToFunctionMap;$/;"	m	struct:WAVM::LLVMJIT::Module
nameToUniqueIndexMap	Lib/WASTPrint/Print.cpp	/^	HashMap<std::string, Uptr> nameToUniqueIndexMap;$/;"	m	struct:NameScope	file:
names	Lib/WASTPrint/Print.cpp	/^	DisassemblyNames names;$/;"	m	struct:ModulePrintContext	file:
nativeFunction	Include/WAVM/Runtime/Intrinsics.h	/^		void* nativeFunction;$/;"	m	struct:WAVM::Intrinsics::Function
nbytes	Lib/WASI/WASIDefinitions.h	/^			__wasi_filesize_t nbytes;$/;"	m	struct:__wasi_event_t::__wasi_event_u::__wasi_event_u_fd_readwrite_t
nd	ThirdParty/dtoa/dtoa.c	/^BCinfo { int dp0, dp1, dplen, dsign, e0, inexact, nd, nd0, rounding, scale, uflchk; };$/;"	m	struct:BCinfo	file:
nd0	ThirdParty/dtoa/dtoa.c	/^BCinfo { int dp0, dp1, dplen, dsign, e0, inexact, nd, nd0, rounding, scale, uflchk; };$/;"	m	struct:BCinfo	file:
newlines	Include/WAVM/WASTParse/WASTParse.h	/^		U32 newlines;$/;"	m	struct:WAVM::WAST::TextFileLocus
next	Include/WAVM/Inline/Serialization.h	/^		U8* next;$/;"	m	struct:WAVM::Serialization::OutputStream
next	Include/WAVM/Inline/Serialization.h	/^		const U8* next;$/;"	m	struct:WAVM::Serialization::InputStream
next	Test/fuzz/fuzz-compile-model.cpp	/^	const U8* next;$/;"	m	struct:RandomStream	file:
next	ThirdParty/dtoa/dtoa.c	/^	struct Bigint *next;$/;"	m	struct:Bigint	typeref:struct:Bigint::Bigint	file:
next	ThirdParty/libunwind/src/DwarfParser.hpp	/^    PrologInfoStackEntry *next;$/;"	m	struct:libunwind::CFI_Parser::PrologInfoStackEntry
next	ThirdParty/libunwind/src/Unwind_AppleExtras.cpp	/^  libgcc_object *next;$/;"	m	struct:libgcc_object	file:
nextByte	Include/WAVM/IR/Operators.h	/^		const U8* nextByte;$/;"	m	struct:WAVM::IR::OperatorDecoderStream
nextHandlerBlock	Lib/LLVMJIT/EmitFunctionContext.h	/^			llvm::BasicBlock* nextHandlerBlock;$/;"	m	struct:WAVM::LLVMJIT::EmitFunctionContext::CatchContext
nextStateByChar	Lib/NFA/NFA.cpp	/^	StateIndex nextStateByChar[256];$/;"	m	struct:DFAState	file:
nextStateByInitialState	Lib/NFA/NFA.cpp	/^	StateIndex* nextStateByInitialState;$/;"	m	struct:StateTransitionsByChar	file:
nextStateToPredicateMap	Lib/NFA/NFA.cpp	/^	HashMap<StateIndex, CharSet> nextStateToPredicateMap;$/;"	m	struct:NFAState	file:
nextToken	Lib/WASTParse/Parse.h	/^		const Token* nextToken;$/;"	m	struct:WAVM::WAST::CursorState
nfaMachine	Lib/WASTParse/Lexer.cpp	/^	NFA::Machine nfaMachine;$/;"	m	struct:StaticData	file:
nfaStates	Lib/NFA/NFA.cpp	/^		std::vector<NFAState> nfaStates;$/;"	m	struct:WAVM::NFA::Builder	file:
nibbleToHexChar	Lib/NFA/NFA.cpp	/^static char nibbleToHexChar(U8 value) { return value < 10 ? ('0' + value) : 'a' + value - 10; }$/;"	f	file:
nibbleToHexChar	Lib/WASTPrint/Print.cpp	/^static char nibbleToHexChar(U8 value) { return value < 10 ? ('0' + value) : 'a' + value - 10; }$/;"	f	file:
noParametersOrResult	Include/WAVM/IR/Types.h	/^			noParametersOrResult,$/;"	e	enum:WAVM::IR::ValueType::IndexedBlockType::Format
noStartFunction	Include/WAVM/WASI/WASI.h	/^		noStartFunction,$/;"	m	class:WAVM::WASI::RunResult
noexcept	Lib/Platform/POSIX/POSIXPrivate.h	/^									  U8* trampolineFramePointer) noexcept(false)$/;"	f
noexcept	Lib/Platform/POSIX/POSIXPrivate.h	/^inline I64 saveExecutionState(ExecutionContext* outContext, I64 returnCode) noexcept(false)$/;"	f
nonParameterLocalTypes	Include/WAVM/IR/Module.h	/^		std::vector<ValueType> nonParameterLocalTypes;$/;"	m	struct:WAVM::IR::Opcode::FunctionDef
nonTrappingFloatToInt	Include/WAVM/IR/IR.h	/^		bool nonTrappingFloatToInt = true;$/;"	m	struct:WAVM::IR::FeatureSpec
none	Include/WAVM/IR/Types.h	/^		none = 0,$/;"	m	class:WAVM::IR::ValueType
none	Include/WAVM/Platform/Memory.h	/^		none,$/;"	m	class:WAVM::Platform::MemoryAccess
none	Include/WAVM/WASTParse/TestScript.h	/^		none,$/;"	m	class:WAVM::WAST::QuotedModuleType
nop	Lib/LLVMJIT/EmitCore.cpp	/^void EmitFunctionContext::nop(IR::NoImm) {}$/;"	f	class:EmitFunctionContext
nopFunction	Test/Benchmarks/invoke-bench.cpp	/^	Function* nopFunction = nullptr;$/;"	m	struct:ThreadArgs	file:
nullref	Include/WAVM/IR/Types.h	/^		nullref = 9,$/;"	m	class:WAVM::IR::ValueType
num	Include/WAVM/IR/Types.h	/^		num,$/;"	m	class:WAVM::IR::ValueType
num	Include/WAVM/Logging/Logging.h	/^		num$/;"	e	enum:WAVM::Log::Category
num	Lib/WASM/WASMSerialization.cpp	/^	Uptr num;$/;"	m	struct:LocalSet	file:
numAllocatedImagePages	Lib/LLVMJIT/LLVMModule.cpp	/^	Uptr numAllocatedImagePages;$/;"	m	struct:LLVMJIT::ModuleMemoryManager	file:
numBuckets	Include/WAVM/Inline/HashTable.h	/^		Uptr numBuckets() const { return hashToBucketIndexMask + 1; }$/;"	f	struct:WAVM::HashTable
numCacheLineBytes	Include/WAVM/Platform/Intrinsic.h	/^		numCacheLineBytes = 64$/;"	e	enum:WAVM::Platform::__anon13
numChars	Lib/WASTParse/Parse.h	/^		U32 numChars;$/;"	m	struct:WAVM::WAST::Name
numClasses	Include/WAVM/NFA/NFA.h	/^		Uptr numClasses;$/;"	m	struct:WAVM::NFA::Machine
numCodeBytes	Include/WAVM/Runtime/RuntimeData.h	/^		Uptr numCodeBytes = 0;$/;"	m	struct:WAVM::Runtime::FunctionMutableData
numCommittedBytes	Lib/LLVMJIT/LLVMModule.cpp	/^		Uptr numCommittedBytes;$/;"	m	struct:LLVMJIT::ModuleMemoryManager::Section	file:
numElements	Include/WAVM/Inline/DenseStaticIntSet.h	/^			numElements = (maxIndexPlusOne + indicesPerElement - 1) \/ indicesPerElement$/;"	e	enum:WAVM::DenseStaticIntSet::__anon30
numElements	Include/WAVM/Inline/HashTable.h	/^		Uptr numElements;$/;"	m	struct:WAVM::HashTable
numElems	Include/WAVM/IR/Types.h	/^			Uptr numElems;$/;"	m	struct:WAVM::IR::ValueType::TypeTuple::Impl
numGuardPages	Lib/Runtime/Memory.cpp	/^	numGuardPages = 1$/;"	e	enum:__anon42	file:
numGuardPages	Lib/Runtime/Table.cpp	/^	numGuardPages = 1$/;"	e	enum:__anon43	file:
numInvokesPerThread	Test/Benchmarks/invoke-bench.cpp	/^	numInvokesPerThread = 100000$/;"	e	enum:__anon1	file:
numLineStarts	Lib/WASTParse/Lexer.cpp	/^		U32 numLineStarts;$/;"	m	struct:WAVM::WAST::LineInfo	file:
numLocals	Lib/WASTParse/ParseFunction.cpp	/^		Uptr numLocals;$/;"	m	struct:WAVM::WAST::FunctionState	file:
numNonParametricOps	Test/fuzz/fuzz-compile-model.cpp	/^	numNonParametricOps = sizeof(operatorInfos) \/ sizeof(OperatorInfo)$/;"	e	enum:__anon2	file:
numPages	Lib/LLVMJIT/LLVMModule.cpp	/^		Uptr numPages;$/;"	m	struct:LLVMJIT::ModuleMemoryManager::Section	file:
numProcessors	Lib/Platform/Windows/Thread.cpp	/^	U32 numProcessors;$/;"	m	struct:ProcessorGroupInfo	file:
numReferences	Lib/Runtime/Atomics.cpp	/^	std::atomic<Uptr> numReferences;$/;"	m	struct:WaitList	file:
numReservedBytes	Lib/Runtime/RuntimePrivate.h	/^		Uptr numReservedBytes = 0;$/;"	m	struct:WAVM::Runtime::Memory
numReservedBytes	Lib/Runtime/RuntimePrivate.h	/^		Uptr numReservedBytes = 0;$/;"	m	struct:WAVM::Runtime::Table
numReservedElements	Lib/Runtime/RuntimePrivate.h	/^		Uptr numReservedElements = 0;$/;"	m	struct:WAVM::Runtime::Table
numSignificandBits	Include/WAVM/Inline/FloatComponents.h	/^			numSignificandBits = 23,$/;"	m	struct:FloatComponents	typeref:enum:FloatComponents::
numSignificandBits	Include/WAVM/Inline/FloatComponents.h	/^			numSignificandBits = 52,$/;"	m	struct:WAVM::FloatComponents	typeref:enum:WAVM::FloatComponents::
numSignificandHexits	Include/WAVM/Inline/FloatComponents.h	/^			numSignificandHexits = 13,$/;"	m	struct:WAVM::FloatComponents	typeref:enum:WAVM::FloatComponents::
numSignificandHexits	Include/WAVM/Inline/FloatComponents.h	/^			numSignificandHexits = 6,$/;"	m	struct:FloatComponents	typeref:enum:FloatComponents::
numStackBytes	Lib/ThreadTest/ThreadTest.cpp	/^	numStackBytes = 1 * 1024 * 1024$/;"	e	enum:__anon48	file:
numStates	Include/WAVM/NFA/NFA.h	/^		Uptr numStates;$/;"	m	struct:WAVM::NFA::Machine
numStates	Lib/NFA/NFA.cpp	/^	Uptr numStates;$/;"	m	struct:StateTransitionsByChar	file:
numerator	Test/fuzz/fuzz-compile-model.cpp	/^	U64 numerator;$/;"	m	struct:RandomStream	file:
oas	ThirdParty/libunwind/src/AddressSpace.hpp	/^  RemoteAddressSpace<Pointer32<BigEndian>> oas;$/;"	m	struct:libunwind::unw_addr_space_ppc
oas	ThirdParty/libunwind/src/AddressSpace.hpp	/^  RemoteAddressSpace<Pointer32<LittleEndian>> oas;$/;"	m	struct:libunwind::unw_addr_space_i386
oas	ThirdParty/libunwind/src/AddressSpace.hpp	/^  RemoteAddressSpace<Pointer64<LittleEndian>> oas;$/;"	m	struct:libunwind::unw_addr_space_ppc64
oas	ThirdParty/libunwind/src/AddressSpace.hpp	/^  RemoteAddressSpace<Pointer64<LittleEndian>> oas;$/;"	m	struct:libunwind::unw_addr_space_x86_64
object	Include/WAVM/IR/Value.h	/^			Runtime::Object* object;$/;"	m	union:WAVM::IR::UntaggedValue::__anon8
object	Include/WAVM/Runtime/RuntimeData.h	/^		Object object;$/;"	m	struct:WAVM::Runtime::Function
object	Lib/LLVMJIT/LLVMJITPrivate.h	/^		std::unique_ptr<llvm::object::ObjectFile> object;$/;"	m	struct:WAVM::LLVMJIT::Module
object	Lib/LLVMJIT/LLVMJITPrivate.h	/^	namespace object {$/;"	n	namespace:llvm
objectBytes	Lib/LLVMJIT/LLVMJITPrivate.h	/^		std::vector<U8> objectBytes;$/;"	m	struct:WAVM::LLVMJIT::Module
objectCode	Lib/Runtime/RuntimePrivate.h	/^		std::vector<U8> objectCode;$/;"	m	struct:WAVM::Runtime::Module
objectToBiasedTableElementValue	Lib/Runtime/Table.cpp	/^static Uptr objectToBiasedTableElementValue(Object* object)$/;"	f	file:
offset	Include/WAVM/IR/Operators.h	/^		U32 offset;$/;"	m	struct:WAVM::IR::AtomicLoadOrStoreImm
offset	Include/WAVM/IR/Operators.h	/^		U32 offset;$/;"	m	struct:WAVM::IR::LoadOrStoreImm
offsetToOpIndexMap	Include/WAVM/Runtime/RuntimeData.h	/^		std::map<U32, U32> offsetToOpIndexMap;$/;"	m	struct:WAVM::Runtime::FunctionMutableData
oneOrMore	Lib/RegExp/RegExp.cpp	/^	oneOrMore,$/;"	m	class:NodeType	file:
oneResult	Include/WAVM/IR/Types.h	/^			oneResult,$/;"	e	enum:WAVM::IR::ValueType::IndexedBlockType::Format
onlyCheck	Programs/wavm-run-wasi/wavm-run-wasi.cpp	/^	bool onlyCheck = false;$/;"	m	struct:CommandLineOptions	file:
onlyCheck	Programs/wavm-run/wavm-run.cpp	/^	bool onlyCheck = false;$/;"	m	struct:CommandLineOptions	file:
opEmitters	Include/WAVM/Emscripten/gas-visit-context.h	/^    std::vector<std::function<OperatorEmitFunc>> opEmitters;$/;"	m	struct:GasVisitor
opcode	Include/WAVM/IR/Operators.h	/^			Opcode opcode;$/;"	m	union:WAVM::IR::OpcodeAndImm::__anon5
openAlways	Include/WAVM/Platform/File.h	/^		openAlways,$/;"	m	class:WAVM::Platform::FileCreateMode
openExisting	Include/WAVM/Platform/File.h	/^		openExisting,$/;"	m	class:WAVM::Platform::FileCreateMode
openFile	Lib/Platform/POSIX/File.cpp	/^File* Platform::openFile(const std::string& pathName,$/;"	f	class:Platform
openFile	Lib/Platform/Windows/File.cpp	/^File* Platform::openFile(const std::string& pathName,$/;"	f	class:Platform
openWaitList	Lib/Runtime/Atomics.cpp	/^static WaitList* openWaitList(Uptr address)$/;"	f	file:
operationEncoder	Lib/WASTParse/ParseFunction.cpp	/^		OperatorEncoderStream operationEncoder;$/;"	m	struct:WAVM::WAST::FunctionState	file:
operator !=	Include/WAVM/IR/Module.h	/^		friend bool operator!=(const Elem& a, const Elem& b)$/;"	f	class:WAVM::IR::Opcode::Elem::Type
operator !=	Include/WAVM/IR/Module.h	/^		friend bool operator!=(const InitializerExpressionBase& a,$/;"	f	class:WAVM::IR::Opcode::Type
operator !=	Include/WAVM/IR/Types.h	/^		friend bool operator!=(const ExceptionType& left, const ExceptionType& right)$/;"	f	struct:WAVM::IR::ValueType::ExceptionType
operator !=	Include/WAVM/IR/Types.h	/^		friend bool operator!=(const FunctionType& left, const FunctionType& right)$/;"	f	struct:WAVM::IR::ValueType::FunctionType
operator !=	Include/WAVM/IR/Types.h	/^		friend bool operator!=(const GlobalType& left, const GlobalType& right)$/;"	f	struct:WAVM::IR::ValueType::GlobalType
operator !=	Include/WAVM/IR/Types.h	/^		friend bool operator!=(const MemoryType& left, const MemoryType& right)$/;"	f	struct:WAVM::IR::ValueType::MemoryType
operator !=	Include/WAVM/IR/Types.h	/^		friend bool operator!=(const SizeConstraints& left, const SizeConstraints& right)$/;"	f	struct:WAVM::IR::ValueType::SizeConstraints
operator !=	Include/WAVM/IR/Types.h	/^		friend bool operator!=(const TableType& left, const TableType& right)$/;"	f	struct:WAVM::IR::ValueType::TableType
operator !=	Include/WAVM/IR/Types.h	/^		friend bool operator!=(const TypeTuple& left, const TypeTuple& right)$/;"	f	struct:WAVM::IR::ValueType::TypeTuple
operator !=	Include/WAVM/IR/Value.h	/^		friend bool operator!=(const Value& left, const Value& right) { return !(left == right); }$/;"	f	struct:WAVM::IR::Value
operator !=	Include/WAVM/IR/Value.h	/^		friend bool operator!=(const ValueTuple& left, const ValueTuple& right)$/;"	f	struct:WAVM::IR::ValueTuple
operator !=	Include/WAVM/Inline/DenseStaticIntSet.h	/^		friend bool operator!=(const DenseStaticIntSet& left, const DenseStaticIntSet& right)$/;"	f	struct:WAVM::DenseStaticIntSet
operator !=	Include/WAVM/Inline/HashMapImpl.h	/^bool HashMapIterator<Key, Value>::operator!=(const HashMapIterator& other)$/;"	f	class:HashMapIterator
operator !=	Include/WAVM/Inline/HashSetImpl.h	/^template<typename Element> bool HashSetIterator<Element>::operator!=(const HashSetIterator& other)$/;"	f	class:HashSetIterator
operator !=	Include/WAVM/Inline/IndexMap.h	/^			bool operator!=(const Iterator& other) { return mapIt != other.mapIt; }$/;"	f	struct:WAVM::IndexMap::Iterator
operator !=	Include/WAVM/WASTParse/WASTParse.h	/^		friend bool operator!=(const Error& a, const Error& b) { return !(a == b); }$/;"	f	struct:WAVM::WAST::Error
operator !=	Include/WAVM/WASTParse/WASTParse.h	/^		friend bool operator!=(const TextFileLocus& a, const TextFileLocus& b) { return !(a == b); }$/;"	f	struct:WAVM::WAST::TextFileLocus
operator !=	Lib/NFA/NFA.cpp	/^	bool operator!=(const StateTransitionsByChar& right) const$/;"	f	struct:StateTransitionsByChar
operator !=	Lib/WASTParse/Parse.h	/^		friend constexpr bool operator!=(const Name& a, const Name& b) { return !(a == b); }$/;"	f	struct:WAVM::WAST::Name
operator &	Include/WAVM/Inline/DenseStaticIntSet.h	/^		friend DenseStaticIntSet operator&(const DenseStaticIntSet& left,$/;"	f	struct:WAVM::DenseStaticIntSet
operator ()	Include/WAVM/IR/Types.h	/^	Uptr operator()(WAVM::IR::FunctionType functionType, Uptr seed = 0) const$/;"	f	struct:WAVM::WAVM::Hash
operator ()	Include/WAVM/IR/Types.h	/^	Uptr operator()(WAVM::IR::TypeTuple typeTuple, Uptr seed = 0) const$/;"	f	struct:WAVM::WAVM::Hash
operator ()	Include/WAVM/Inline/DenseStaticIntSet.h	/^		Uptr operator()(const DenseStaticIntSet<Index, maxIndexPlusOne>& set, Uptr seed = 0) const$/;"	f	struct:WAVM::Hash
operator ()	Include/WAVM/Inline/Hash.h	/^		Uptr operator()(I16 i, Uptr seed = 0) const { return Uptr(XXH32_fixed(I32(i), U32(seed))); }$/;"	f	struct:WAVM::Hash
operator ()	Include/WAVM/Inline/Hash.h	/^		Uptr operator()(I32 i, Uptr seed = 0) const { return Uptr(XXH32_fixed(I32(i), U32(seed))); }$/;"	f	struct:WAVM::Hash
operator ()	Include/WAVM/Inline/Hash.h	/^		Uptr operator()(I64 i, Uptr seed = 0) const { return Uptr(XXH64_fixed(I64(i), U64(seed))); }$/;"	f	struct:WAVM::Hash
operator ()	Include/WAVM/Inline/Hash.h	/^		Uptr operator()(I8 i, Uptr seed = 0) const { return Uptr(XXH32_fixed(I32(i), U32(seed))); }$/;"	f	struct:WAVM::Hash
operator ()	Include/WAVM/Inline/Hash.h	/^		Uptr operator()(U16 i, Uptr seed = 0) const { return Uptr(XXH32_fixed(U32(i), U32(seed))); }$/;"	f	struct:WAVM::Hash
operator ()	Include/WAVM/Inline/Hash.h	/^		Uptr operator()(U32 i, Uptr seed = 0) const { return Uptr(XXH32_fixed(U32(i), U32(seed))); }$/;"	f	struct:WAVM::Hash
operator ()	Include/WAVM/Inline/Hash.h	/^		Uptr operator()(U64 i, Uptr seed = 0) const { return Uptr(XXH64_fixed(U64(i), U64(seed))); }$/;"	f	struct:WAVM::Hash
operator ()	Include/WAVM/Inline/Hash.h	/^		Uptr operator()(U8 i, Uptr seed = 0) const { return Uptr(XXH32_fixed(U32(i), U32(seed))); }$/;"	f	struct:WAVM::Hash
operator ()	Include/WAVM/Inline/Hash.h	/^		Uptr operator()(const std::string& string, Uptr seed = 0) const$/;"	f	struct:WAVM::Hash
operator ()	Include/WAVM/Inline/Hash.h	/^		Uptr operator()(const std::vector<Element>& vector, Uptr seed = 0) const$/;"	f	struct:WAVM::Hash
operator *	Include/WAVM/Inline/HashMapImpl.h	/^const HashMapPair<Key, Value>& HashMapIterator<Key, Value>::operator*() const$/;"	f	class:HashMapIterator
operator *	Include/WAVM/Inline/HashSetImpl.h	/^template<typename Element> const Element& HashSetIterator<Element>::operator*() const$/;"	f	class:HashSetIterator
operator *	Include/WAVM/Inline/IndexMap.h	/^			const Element& operator*() const { return mapIt->value; }$/;"	f	struct:WAVM::IndexMap::Iterator
operator *	Include/WAVM/Inline/IntrusiveSharedPtr.h	/^		Pointee& operator*() const { return *value; }$/;"	f	struct:WAVM::IntrusiveSharedPtr
operator *	Include/WAVM/Runtime/Runtime.h	/^		ObjectType& operator*() const { return *value; }$/;"	f	struct:WAVM::Runtime::GCPointer
operator *	ThirdParty/libunwind/src/UnwindCursor.hpp	/^  typename A::pint_t operator*() const { return functionAddress(); }$/;"	f	struct:libunwind::EHABISectionIterator
operator +	ThirdParty/libunwind/src/UnwindCursor.hpp	/^  _Self operator+(size_t a) { _Self out = *this; out._i += a; return out; }$/;"	f	struct:libunwind::EHABISectionIterator
operator ++	Include/WAVM/Inline/HashMapImpl.h	/^template<typename Key, typename Value> void HashMapIterator<Key, Value>::operator++()$/;"	f	class:HashMapIterator
operator ++	Include/WAVM/Inline/HashSetImpl.h	/^template<typename Element> void HashSetIterator<Element>::operator++()$/;"	f	class:HashSetIterator
operator ++	Include/WAVM/Inline/IndexMap.h	/^			void operator++() { ++mapIt; }$/;"	f	struct:WAVM::IndexMap::Iterator
operator ++	ThirdParty/libunwind/src/UnwindCursor.hpp	/^  _Self& operator++() { ++_i; return *this; }$/;"	f	struct:libunwind::EHABISectionIterator
operator +=	ThirdParty/libunwind/src/UnwindCursor.hpp	/^  _Self& operator+=(size_t a) { _i += a; return *this; }$/;"	f	struct:libunwind::EHABISectionIterator
operator -	ThirdParty/libunwind/src/UnwindCursor.hpp	/^  _Self operator-(size_t a) { assert(_i >= a); _Self out = *this; out._i -= a; return out; }$/;"	f	struct:libunwind::EHABISectionIterator
operator -	ThirdParty/libunwind/src/UnwindCursor.hpp	/^  size_t operator-(const _Self& other) { return _i - other._i; }$/;"	f	struct:libunwind::EHABISectionIterator
operator --	ThirdParty/libunwind/src/UnwindCursor.hpp	/^  _Self& operator--() { assert(_i > 0); --_i; return *this; }$/;"	f	struct:libunwind::EHABISectionIterator
operator -=	ThirdParty/libunwind/src/UnwindCursor.hpp	/^  _Self& operator-=(size_t a) { assert(_i >= a); _i -= a; return *this; }$/;"	f	struct:libunwind::EHABISectionIterator
operator ->	Include/WAVM/Inline/HashMapImpl.h	/^const HashMapPair<Key, Value>* HashMapIterator<Key, Value>::operator->() const$/;"	f	class:HashMapIterator
operator ->	Include/WAVM/Inline/HashSetImpl.h	/^template<typename Element> const Element* HashSetIterator<Element>::operator->() const$/;"	f	class:HashSetIterator
operator ->	Include/WAVM/Inline/IndexMap.h	/^			const Element* operator->() const { return &mapIt->value; }$/;"	f	struct:WAVM::IndexMap::Iterator
operator ->	Include/WAVM/Inline/IntrusiveSharedPtr.h	/^		Pointee* operator->() const { return value; }$/;"	f	struct:WAVM::IntrusiveSharedPtr
operator ->	Include/WAVM/Runtime/Runtime.h	/^		ObjectType* operator->() const { return value; }$/;"	f	struct:WAVM::Runtime::GCPointer
operator <	Include/WAVM/Inline/DenseStaticIntSet.h	/^		friend bool operator<(const DenseStaticIntSet& left, const DenseStaticIntSet& right)$/;"	f	struct:WAVM::DenseStaticIntSet
operator <	Lib/NFA/NFA.cpp	/^	bool operator<(const StateTransitionsByChar& right) const$/;"	f	struct:StateTransitionsByChar
operator =	Include/WAVM/Inline/HashTableImpl.h	/^HashTable<HASHTABLE_ARGUMENTS>& HashTable<HASHTABLE_ARGUMENTS>::operator=($/;"	f	class:HashTable
operator =	Include/WAVM/Inline/IntrusiveSharedPtr.h	/^		void operator=(IntrusiveSharedPtr<Pointee>&& inMove)$/;"	f	struct:WAVM::IntrusiveSharedPtr
operator =	Include/WAVM/Inline/IntrusiveSharedPtr.h	/^		void operator=(Pointee* inValue)$/;"	f	struct:WAVM::IntrusiveSharedPtr
operator =	Include/WAVM/Inline/IntrusiveSharedPtr.h	/^		void operator=(const IntrusiveSharedPtr<Pointee>& inCopy)$/;"	f	struct:WAVM::IntrusiveSharedPtr
operator =	Include/WAVM/NFA/NFA.h	/^		void operator=(Machine&& inMachine) { moveFrom(std::move(inMachine)); }$/;"	f	struct:WAVM::NFA::Machine
operator =	Include/WAVM/Runtime/Runtime.h	/^		void operator=(GCPointer<ObjectType>&& inMove)$/;"	f	struct:WAVM::Runtime::GCPointer
operator =	Include/WAVM/Runtime/Runtime.h	/^		void operator=(ObjectType* inValue)$/;"	f	struct:WAVM::Runtime::GCPointer
operator =	Include/WAVM/Runtime/Runtime.h	/^		void operator=(const GCPointer<ObjectType>& inCopy)$/;"	f	struct:WAVM::Runtime::GCPointer
operator =	Lib/NFA/NFA.cpp	/^	void operator=(StateTransitionsByChar&& inMove)$/;"	f	struct:StateTransitionsByChar
operator ==	Include/WAVM/IR/Module.h	/^		friend bool operator==(const Elem& a, const Elem& b)$/;"	f	class:WAVM::IR::Opcode::Elem::Type
operator ==	Include/WAVM/IR/Module.h	/^		friend bool operator==(const InitializerExpressionBase& a,$/;"	f	class:WAVM::IR::Opcode::Type
operator ==	Include/WAVM/IR/Types.h	/^		friend bool operator==(const ExceptionType& left, const ExceptionType& right)$/;"	f	struct:WAVM::IR::ValueType::ExceptionType
operator ==	Include/WAVM/IR/Types.h	/^		friend bool operator==(const FunctionType& left, const FunctionType& right)$/;"	f	struct:WAVM::IR::ValueType::FunctionType
operator ==	Include/WAVM/IR/Types.h	/^		friend bool operator==(const GlobalType& left, const GlobalType& right)$/;"	f	struct:WAVM::IR::ValueType::GlobalType
operator ==	Include/WAVM/IR/Types.h	/^		friend bool operator==(const MemoryType& left, const MemoryType& right)$/;"	f	struct:WAVM::IR::ValueType::MemoryType
operator ==	Include/WAVM/IR/Types.h	/^		friend bool operator==(const SizeConstraints& left, const SizeConstraints& right)$/;"	f	struct:WAVM::IR::ValueType::SizeConstraints
operator ==	Include/WAVM/IR/Types.h	/^		friend bool operator==(const TableType& left, const TableType& right)$/;"	f	struct:WAVM::IR::ValueType::TableType
operator ==	Include/WAVM/IR/Types.h	/^		friend bool operator==(const TypeTuple& left, const TypeTuple& right)$/;"	f	struct:WAVM::IR::ValueType::TypeTuple
operator ==	Include/WAVM/IR/Value.h	/^		friend bool operator==(const Value& left, const Value& right)$/;"	f	struct:WAVM::IR::Value
operator ==	Include/WAVM/IR/Value.h	/^		friend bool operator==(const ValueTuple& left, const ValueTuple& right)$/;"	f	struct:WAVM::IR::ValueTuple
operator ==	Include/WAVM/Inline/DenseStaticIntSet.h	/^		friend bool operator==(const DenseStaticIntSet& left, const DenseStaticIntSet& right)$/;"	f	struct:WAVM::DenseStaticIntSet
operator ==	Include/WAVM/Inline/HashMapImpl.h	/^bool HashMapIterator<Key, Value>::operator==(const HashMapIterator& other)$/;"	f	class:HashMapIterator
operator ==	Include/WAVM/Inline/HashSetImpl.h	/^template<typename Element> bool HashSetIterator<Element>::operator==(const HashSetIterator& other)$/;"	f	class:HashSetIterator
operator ==	Include/WAVM/Inline/IndexMap.h	/^			bool operator==(const Iterator& other) { return mapIt == other.mapIt; }$/;"	f	struct:WAVM::IndexMap::Iterator
operator ==	Include/WAVM/WASTParse/WASTParse.h	/^		friend bool operator==(const Error& a, const Error& b)$/;"	f	struct:WAVM::WAST::Error
operator ==	Include/WAVM/WASTParse/WASTParse.h	/^		friend bool operator==(const TextFileLocus& a, const TextFileLocus& b)$/;"	f	struct:WAVM::WAST::TextFileLocus
operator ==	Lib/WASTParse/Parse.h	/^		friend constexpr bool operator==(const Name& a, const Name& b)$/;"	f	struct:WAVM::WAST::Name
operator ==	ThirdParty/libunwind/src/UnwindCursor.hpp	/^  bool operator==(const _Self& other) const {$/;"	f	struct:libunwind::EHABISectionIterator
operator ObjectType*	Include/WAVM/Runtime/Runtime.h	/^		operator ObjectType*() const { return value; }$/;"	f	struct:WAVM::Runtime::GCPointer
operator Pointee*	Include/WAVM/Inline/IntrusiveSharedPtr.h	/^		operator Pointee*() const { return value; }$/;"	f	struct:WAVM::IntrusiveSharedPtr
operator []	Include/WAVM/IR/Types.h	/^		ValueType operator[](Uptr index) const$/;"	f	struct:WAVM::IR::ValueType::TypeTuple
operator []	Include/WAVM/IR/Value.h	/^		Value& operator[](Uptr index) { return values[index]; }$/;"	f	struct:WAVM::IR::ValueTuple
operator []	Include/WAVM/IR/Value.h	/^		const Value& operator[](Uptr index) const { return values[index]; }$/;"	f	struct:WAVM::IR::ValueTuple
operator []	Include/WAVM/Inline/ConcurrentHashMap.h	/^		const Value operator[](const Key& key) const$/;"	f	struct:WAVM::ConcurrentHashMap
operator []	Include/WAVM/Inline/HashMapImpl.h	/^const Value& HashMap<HASHMAP_ARGUMENTS>::operator[](const Key& key) const$/;"	f	class:HashMap
operator []	Include/WAVM/Inline/HashSetImpl.h	/^const Element& HashSet<Element, ElementHashPolicy>::operator[](const Element& element) const$/;"	f	class:HashSet
operator []	Include/WAVM/Inline/IndexMap.h	/^		Element& operator[](Index index)$/;"	f	struct:WAVM::IndexMap
operator []	Include/WAVM/Inline/IndexMap.h	/^		const Element& operator[](Index index) const$/;"	f	struct:WAVM::IndexMap
operator ^	Include/WAVM/Inline/DenseStaticIntSet.h	/^		friend DenseStaticIntSet operator^(const DenseStaticIntSet& left,$/;"	f	struct:WAVM::DenseStaticIntSet
operator bool	Include/WAVM/IR/Operators.h	/^		operator bool() const { return nextByte < end; }$/;"	f	struct:WAVM::IR::OperatorDecoderStream
operator bool	Include/WAVM/Inline/HashMapImpl.h	/^template<typename Key, typename Value> HashMapIterator<Key, Value>::operator bool() const$/;"	f	class:HashMapIterator
operator bool	Include/WAVM/Inline/HashSetImpl.h	/^template<typename Element> HashSetIterator<Element>::operator bool() const$/;"	f	class:HashSetIterator
operator bool	Include/WAVM/Inline/IndexMap.h	/^			operator bool() const { return bool(mapIt); }$/;"	f	struct:WAVM::IndexMap::Iterator
operator bool	Lib/WASTParse/Parse.h	/^		constexpr operator bool() const { return begin != nullptr; }$/;"	f	struct:WAVM::WAST::Name
operator bool	Lib/WASTParse/Parse.h	/^		operator bool() const { return type != Type::invalid; }$/;"	f	struct:WAVM::WAST::Reference
operator delete	ThirdParty/libunwind/src/UnwindCursor.hpp	/^  void operator delete(void *, size_t) {}$/;"	f	class:libunwind::AbstractUnwindCursor
operator |	Include/WAVM/Inline/DenseStaticIntSet.h	/^		friend DenseStaticIntSet operator|(const DenseStaticIntSet& left,$/;"	f	struct:WAVM::DenseStaticIntSet
operator ~	Include/WAVM/Inline/DenseStaticIntSet.h	/^		friend DenseStaticIntSet operator~(const DenseStaticIntSet& set)$/;"	f	struct:WAVM::DenseStaticIntSet
operatorPrinter	Lib/IR/Validate.cpp	/^		OperatorPrinter operatorPrinter;$/;"	m	struct:WAVM::IR::CodeValidationStreamImpl	file:
optimizeLLVMModule	Lib/LLVMJIT/LLVMCompile.cpp	/^static void optimizeLLVMModule(llvm::Module& llvmModule, bool shouldLogMetrics)$/;"	f	file:
optional	Lib/RegExp/RegExp.cpp	/^	optional,$/;"	m	class:NodeType	file:
or1k_thread_state_t	ThirdParty/libunwind/src/Registers.hpp	/^  struct or1k_thread_state_t {$/;"	s	class:libunwind::Registers_or1k
os	ThirdParty/libunwind/docs/conf.py	/^import sys, os$/;"	i
os	ThirdParty/libunwind/test/libunwind/test/config.py	/^import os$/;"	i
out	Include/WAVM/Platform/File.h	/^		out,$/;"	m	class:WAVM::Platform::StdDevice
outOfBounds	Include/WAVM/WASTParse/TestScript.h	/^		outOfBounds,$/;"	m	class:WAVM::WAST::ExpectedTrapType
outOfBoundsDataSegmentAccess	Include/WAVM/WASTParse/TestScript.h	/^		outOfBoundsDataSegmentAccess,$/;"	m	class:WAVM::WAST::ExpectedTrapType
outOfBoundsElemSegmentAccess	Include/WAVM/WASTParse/TestScript.h	/^		outOfBoundsElemSegmentAccess,$/;"	m	class:WAVM::WAST::ExpectedTrapType
outOfBoundsMemoryAccess	Include/WAVM/WASTParse/TestScript.h	/^		outOfBoundsMemoryAccess,$/;"	m	class:WAVM::WAST::ExpectedTrapType
outOfBoundsTableAccess	Include/WAVM/WASTParse/TestScript.h	/^		outOfBoundsTableAccess,$/;"	m	class:WAVM::WAST::ExpectedTrapType
outOfMemory	Include/WAVM/WASTParse/TestScript.h	/^		outOfMemory,$/;"	m	class:WAVM::WAST::ExpectedTrapType
outerBranchTargetStackSize	Lib/LLVMJIT/EmitFunctionContext.h	/^			Uptr outerBranchTargetStackSize;$/;"	m	struct:WAVM::LLVMJIT::EmitFunctionContext::ControlContext
outerContext	Lib/Platform/POSIX/POSIXPrivate.h	/^		SignalContext* outerContext;$/;"	m	struct:WAVM::Platform::SignalContext
outerStackSize	Lib/IR/Validate.cpp	/^		Uptr outerStackSize;$/;"	m	struct:FunctionValidationContext::ControlContext	file:
outerStackSize	Lib/LLVMJIT/EmitFunctionContext.h	/^			Uptr outerStackSize;$/;"	m	struct:WAVM::LLVMJIT::EmitFunctionContext::ControlContext
output	Include/WAVM/Logging/Logging.h	/^		output,$/;"	e	enum:WAVM::Log::Category
output	Lib/LLVMJIT/LLVMCompile.cpp	/^	std::vector<U8> output;$/;"	m	struct:LLVMArrayOutputStream	file:
override	Include/WAVM/Runtime/Linker.h	/^					 Object*& outObject) override;$/;"	m	struct:WAVM::Runtime::ModuleExportResolver
override	Lib/LLVMJIT/LLVMCompile.cpp	/^	~LLVMArrayOutputStream() override = default;$/;"	m	struct:LLVMArrayOutputStream	file:
override	Lib/Runtime/RuntimePrivate.h	/^		virtual ~ModuleInstance() override;$/;"	m	struct:WAVM::Runtime::ModuleInstance
override	Lib/Runtime/RuntimePrivate.h	/^		~ExceptionType() override;$/;"	m	struct:WAVM::Runtime::ExceptionType
override	Lib/Runtime/RuntimePrivate.h	/^		~Global() override;$/;"	m	struct:WAVM::Runtime::Global
override	Lib/Runtime/RuntimePrivate.h	/^		~Memory() override;$/;"	m	struct:WAVM::Runtime::Memory
override	Lib/Runtime/RuntimePrivate.h	/^		~Table() override;$/;"	m	struct:WAVM::Runtime::Table
padding	ThirdParty/libunwind/src/Registers.hpp	/^    uint64_t padding; \/\/ 16-byte align$/;"	m	struct:libunwind::Registers_arm64::GPRs
params	Include/WAVM/IR/Types.h	/^			TypeTuple params;$/;"	m	struct:WAVM::IR::ValueType::FunctionType::Impl
params	Include/WAVM/IR/Types.h	/^		TypeTuple params() const { return impl->params; }$/;"	f	struct:WAVM::IR::ValueType::FunctionType
params	Include/WAVM/IR/Types.h	/^		TypeTuple params;$/;"	m	struct:WAVM::IR::ValueType::ExceptionType
params	Lib/IR/Validate.cpp	/^		TypeTuple params;$/;"	m	struct:FunctionValidationContext::ControlContext	file:
params	Lib/LLVMJIT/EmitFunctionContext.h	/^			IR::TypeTuple params;$/;"	m	struct:WAVM::LLVMJIT::EmitFunctionContext::BranchTarget
parse	Lib/RegExp/RegExp.cpp	/^static Node* parse(const char* string)$/;"	f	file:
parseAction	Lib/WASTParse/ParseTests.cpp	/^static Action* parseAction(CursorState* cursor, const IR::FeatureSpec& featureSpec)$/;"	f	file:
parseAndResolveNameOrIndexRef	Lib/WASTParse/Parse.cpp	/^Uptr WAST::parseAndResolveNameOrIndexRef(CursorState* cursor,$/;"	f	class:WAST
parseAndValidateRedundantBranchTargetName	Lib/WASTParse/ParseFunction.cpp	/^static void parseAndValidateRedundantBranchTargetName(CursorState* cursor,$/;"	f	file:
parseBlock	Lib/WASTParse/ParseFunction.cpp	/^static void parseBlock(CursorState* cursor, bool isExpr)$/;"	f	file:
parseCIE	ThirdParty/libunwind/src/DwarfParser.hpp	/^const char *CFI_Parser<A>::parseCIE(A &addressSpace, pint_t cie,$/;"	f	class:libunwind::CFI_Parser
parseChar	Lib/RegExp/RegExp.cpp	/^template<bool inSet> static char parseChar(const char*& nextChar)$/;"	f	file:
parseCharClass	Lib/RegExp/RegExp.cpp	/^template<bool inSet> static NFA::CharSet parseCharClass(const char*& nextChar)$/;"	f	file:
parseCharEscapeCode	Lib/WASTParse/Parse.cpp	/^static void parseCharEscapeCode(const char*& nextChar,$/;"	f	file:
parseCommand	Lib/WASTParse/ParseTests.cpp	/^static Command* parseCommand(CursorState* cursor, const IR::FeatureSpec& featureSpec)$/;"	f	file:
parseConstExpression	Lib/WASTParse/ParseTests.cpp	/^static IR::Value parseConstExpression(CursorState* cursor)$/;"	f	file:
parseConstExpressionTuple	Lib/WASTParse/ParseTests.cpp	/^static IR::ValueTuple parseConstExpressionTuple(CursorState* cursor)$/;"	f	file:
parseControlImm	Lib/WASTParse/ParseFunction.cpp	/^static void parseControlImm(CursorState* cursor,$/;"	f	file:
parseData	Lib/WASTParse/ParseModule.cpp	/^static void parseData(CursorState* cursor)$/;"	f	file:
parseDecimalUnsignedInt	Lib/WASTParse/ParseNumbers.cpp	/^static U64 parseDecimalUnsignedInt(const char*& nextChar,$/;"	f	file:
parseDeclaration	Lib/WASTParse/ParseModule.cpp	/^static void parseDeclaration(CursorState* cursor)$/;"	f	file:
parseElem	Lib/WASTParse/ParseModule.cpp	/^static void parseElem(CursorState* cursor)$/;"	f	file:
parseElemSegmentBody	Lib/WASTParse/ParseModule.cpp	/^static Uptr parseElemSegmentBody(CursorState* cursor,$/;"	f	file:
parseElementary	Lib/RegExp/RegExp.cpp	/^static Node* parseElementary(const char*& nextChar, Uptr groupDepth)$/;"	f	file:
parseErrorf	Lib/WASTParse/Parse.cpp	/^void WAST::parseErrorf(ParseState* parseState, Uptr charOffset, const char* messageFormat, ...)$/;"	f	class:WAST
parseErrorf	Lib/WASTParse/Parse.cpp	/^void WAST::parseErrorf(ParseState* parseState, const char* nextChar, const char* messageFormat, ...)$/;"	f	class:WAST
parseErrorf	Lib/WASTParse/Parse.cpp	/^void WAST::parseErrorf(ParseState* parseState,$/;"	f	class:WAST
parseErrorfImpl	Lib/WASTParse/Parse.cpp	/^static void parseErrorfImpl(ParseState* parseState,$/;"	f	file:
parseExceptionType	Lib/WASTParse/ParseModule.cpp	/^static void parseExceptionType(CursorState* cursor)$/;"	f	file:
parseExport	Lib/WASTParse/ParseModule.cpp	/^static void parseExport(CursorState* cursor)$/;"	f	file:
parseExpr	Lib/WASTParse/ParseFunction.cpp	/^static void parseExpr(CursorState* cursor)$/;"	f	file:
parseExprSequence	Lib/WASTParse/ParseFunction.cpp	/^static void parseExprSequence(CursorState* cursor)$/;"	f	file:
parseF32	Lib/WASTParse/ParseNumbers.cpp	/^F32 WAST::parseF32(CursorState* cursor)$/;"	f	class:WAST
parseF64	Lib/WASTParse/ParseNumbers.cpp	/^F64 WAST::parseF64(CursorState* cursor)$/;"	f	class:WAST
parseFDEInstructions	ThirdParty/libunwind/src/DwarfParser.hpp	/^bool CFI_Parser<A>::parseFDEInstructions(A &addressSpace,$/;"	f	class:libunwind::CFI_Parser
parseFloat	Lib/WASTParse/ParseNumbers.cpp	/^template<typename Float> Float parseFloat(const char*& nextChar, ParseState* parseState)$/;"	f
parseFunc	Lib/WASTParse/ParseModule.cpp	/^static void parseFunc(CursorState* cursor)$/;"	f	file:
parseFunctionDef	Lib/WASTParse/ParseFunction.cpp	/^FunctionDef WAST::parseFunctionDef(CursorState* cursor, const Token* funcToken)$/;"	f	class:WAST
parseFunctionType	Lib/WASTParse/Parse.cpp	/^FunctionType WAST::parseFunctionType(CursorState* cursor,$/;"	f	class:WAST
parseFunctionTypeRefAndOrDecl	Lib/WASTParse/Parse.cpp	/^UnresolvedFunctionType WAST::parseFunctionTypeRefAndOrDecl($/;"	f	class:WAST
parseGlobal	Lib/WASTParse/ParseModule.cpp	/^static void parseGlobal(CursorState* cursor)$/;"	f	file:
parseGlobalType	Lib/WASTParse/ParseModule.cpp	/^static GlobalType parseGlobalType(CursorState* cursor)$/;"	f	file:
parseGroup	Lib/RegExp/RegExp.cpp	/^static Node* parseGroup(const char*& nextChar, Uptr groupDepth)$/;"	f	file:
parseHexUnsignedInt	Lib/WASTParse/ParseNumbers.cpp	/^static U64 parseHexUnsignedInt(const char*& nextChar, ParseState* parseState, U64 maxValue)$/;"	f	file:
parseI16	Lib/WASTParse/ParseNumbers.cpp	/^U16 WAST::parseI16(CursorState* cursor)$/;"	f	class:WAST
parseI32	Lib/WASTParse/ParseNumbers.cpp	/^U32 WAST::parseI32(CursorState* cursor)$/;"	f	class:WAST
parseI64	Lib/WASTParse/ParseNumbers.cpp	/^U64 WAST::parseI64(CursorState* cursor)$/;"	f	class:WAST
parseI8	Lib/WASTParse/ParseNumbers.cpp	/^U8 WAST::parseI8(CursorState* cursor)$/;"	f	class:WAST
parseImm	Lib/WASTParse/ParseFunction.cpp	/^static void parseImm(CursorState* cursor, AtomicLoadOrStoreImm<naturalAlignmentLog2>& outImm)$/;"	f	file:
parseImm	Lib/WASTParse/ParseFunction.cpp	/^static void parseImm(CursorState* cursor, BranchImm& outImm)$/;"	f	file:
parseImm	Lib/WASTParse/ParseFunction.cpp	/^static void parseImm(CursorState* cursor, BranchTableImm& outImm)$/;"	f	file:
parseImm	Lib/WASTParse/ParseFunction.cpp	/^static void parseImm(CursorState* cursor, CallIndirectImm& outImm)$/;"	f	file:
parseImm	Lib/WASTParse/ParseFunction.cpp	/^static void parseImm(CursorState* cursor, DataSegmentAndMemImm& outImm)$/;"	f	file:
parseImm	Lib/WASTParse/ParseFunction.cpp	/^static void parseImm(CursorState* cursor, DataSegmentImm& outImm)$/;"	f	file:
parseImm	Lib/WASTParse/ParseFunction.cpp	/^static void parseImm(CursorState* cursor, ElemSegmentAndTableImm& outImm)$/;"	f	file:
parseImm	Lib/WASTParse/ParseFunction.cpp	/^static void parseImm(CursorState* cursor, ElemSegmentImm& outImm)$/;"	f	file:
parseImm	Lib/WASTParse/ParseFunction.cpp	/^static void parseImm(CursorState* cursor, ExceptionTypeImm& outImm)$/;"	f	file:
parseImm	Lib/WASTParse/ParseFunction.cpp	/^static void parseImm(CursorState* cursor, FunctionImm& outImm)$/;"	f	file:
parseImm	Lib/WASTParse/ParseFunction.cpp	/^static void parseImm(CursorState* cursor, GetOrSetVariableImm<isGlobal>& outImm)$/;"	f	file:
parseImm	Lib/WASTParse/ParseFunction.cpp	/^static void parseImm(CursorState* cursor, LiteralImm<F32>& outImm)$/;"	f	file:
parseImm	Lib/WASTParse/ParseFunction.cpp	/^static void parseImm(CursorState* cursor, LiteralImm<F64>& outImm)$/;"	f	file:
parseImm	Lib/WASTParse/ParseFunction.cpp	/^static void parseImm(CursorState* cursor, LiteralImm<I32>& outImm)$/;"	f	file:
parseImm	Lib/WASTParse/ParseFunction.cpp	/^static void parseImm(CursorState* cursor, LiteralImm<I64>& outImm)$/;"	f	file:
parseImm	Lib/WASTParse/ParseFunction.cpp	/^static void parseImm(CursorState* cursor, LiteralImm<V128>& outImm)$/;"	f	file:
parseImm	Lib/WASTParse/ParseFunction.cpp	/^static void parseImm(CursorState* cursor, LoadOrStoreImm<naturalAlignmentLog2>& outImm)$/;"	f	file:
parseImm	Lib/WASTParse/ParseFunction.cpp	/^static void parseImm(CursorState* cursor, MemoryCopyImm& outImm)$/;"	f	file:
parseImm	Lib/WASTParse/ParseFunction.cpp	/^static void parseImm(CursorState* cursor, MemoryImm& outImm) { outImm.memoryIndex = 0; }$/;"	f	file:
parseImm	Lib/WASTParse/ParseFunction.cpp	/^static void parseImm(CursorState* cursor, NoImm&) {}$/;"	f	file:
parseImm	Lib/WASTParse/ParseFunction.cpp	/^static void parseImm(CursorState* cursor, RethrowImm& outImm)$/;"	f	file:
parseImm	Lib/WASTParse/ParseFunction.cpp	/^static void parseImm(CursorState* cursor, TableCopyImm& outImm)$/;"	f	file:
parseImm	Lib/WASTParse/ParseFunction.cpp	/^static void parseImm(CursorState* cursor, TableImm& outImm)$/;"	f	file:
parseImm	Lib/WASTParse/ParseFunction.cpp	/^template<Uptr numLanes> static void parseImm(CursorState* cursor, LaneIndexImm<numLanes>& outImm)$/;"	f	file:
parseImm	Lib/WASTParse/ParseFunction.cpp	/^template<Uptr numLanes> static void parseImm(CursorState* cursor, ShuffleImm<numLanes>& outImm)$/;"	f	file:
parseImport	Lib/WASTParse/ParseModule.cpp	/^static void parseImport(CursorState* cursor)$/;"	f	file:
parseInfinity	Lib/WASTParse/ParseNumbers.cpp	/^template<typename Float> Float parseInfinity(const char* nextChar)$/;"	f
parseInitializerExpression	Lib/WASTParse/ParseModule.cpp	/^static UnresolvedInitializerExpression parseInitializerExpression(CursorState* cursor)$/;"	f	file:
parseInstrSequence	Lib/WASTParse/ParseFunction.cpp	/^static void parseInstrSequence(CursorState* cursor)$/;"	f	file:
parseInstructions	ThirdParty/libunwind/src/DwarfParser.hpp	/^bool CFI_Parser<A>::parseInstructions(A &addressSpace, pint_t instructions,$/;"	f	class:libunwind::CFI_Parser
parseIptr	Lib/WASTParse/ParseNumbers.cpp	/^Uptr WAST::parseIptr(CursorState* cursor)$/;"	f	class:WAST
parseLit	Lib/RegExp/RegExp.cpp	/^template<bool inSet> static NFA::CharSet parseLit(const char*& nextChar)$/;"	f	file:
parseLoop	Lib/WASTParse/ParseFunction.cpp	/^static void parseLoop(CursorState* cursor, bool isExpr)$/;"	f	file:
parseMemory	Lib/WASTParse/ParseModule.cpp	/^static void parseMemory(CursorState* cursor)$/;"	f	file:
parseModule	Lib/WASTParse/ParseModule.cpp	/^bool WAST::parseModule(const char* string,$/;"	f	class:WAST
parseModuleBody	Lib/WASTParse/ParseModule.cpp	/^void WAST::parseModuleBody(CursorState* cursor, IR::Module& outModule)$/;"	f	class:WAST
parseNaN	Lib/WASTParse/ParseNumbers.cpp	/^template<typename Float> Float parseNaN(const char*& nextChar, ParseState* parseState)$/;"	f
parseObjectDefOrImport	Lib/WASTParse/ParseModule.cpp	/^static void parseObjectDefOrImport(CursorState* cursor,$/;"	f	file:
parseOptionalNameAsString	Lib/WASTParse/ParseTests.cpp	/^static std::string parseOptionalNameAsString(CursorState* cursor)$/;"	f	file:
parseOptionalSharedDeclaration	Lib/WASTParse/ParseModule.cpp	/^static bool parseOptionalSharedDeclaration(CursorState* cursor)$/;"	f	file:
parseParenthesized	Lib/WASTParse/Parse.h	/^	static void parseParenthesized(CursorState* cursor, ParseInner parseInner)$/;"	f	namespace:WAVM::WAST
parseQuantifier	Lib/RegExp/RegExp.cpp	/^static Node* parseQuantifier(const char*& nextChar, Uptr groupDepth)$/;"	f	file:
parseReferenceType	Lib/WASTParse/Parse.cpp	/^ReferenceType WAST::parseReferenceType(CursorState* cursor)$/;"	f	class:WAST
parseSegmentDeclaration	Lib/WASTParse/ParseModule.cpp	/^static bool parseSegmentDeclaration(CursorState* cursor,$/;"	f	file:
parseSeq	Lib/RegExp/RegExp.cpp	/^static Node* parseSeq(const char*& nextChar, Uptr groupDepth)$/;"	f	file:
parseSet	Lib/RegExp/RegExp.cpp	/^static NFA::CharSet parseSet(const char*& nextChar)$/;"	f	file:
parseSign	Lib/WASTParse/ParseNumbers.cpp	/^static bool parseSign(const char*& nextChar)$/;"	f	file:
parseSizeConstraints	Lib/WASTParse/ParseModule.cpp	/^static SizeConstraints parseSizeConstraints(CursorState* cursor, U64 maxMax)$/;"	f	file:
parseStart	Lib/WASTParse/ParseModule.cpp	/^static void parseStart(CursorState* cursor)$/;"	f	file:
parseState	Lib/WASTParse/Parse.h	/^		ParseState* parseState;$/;"	m	struct:WAVM::WAST::CursorState
parseState	Lib/WASTParse/Parse.h	/^		ParseState* parseState;$/;"	m	struct:WAVM::WAST::ModuleState
parseStringChars	Lib/WASTParse/Parse.cpp	/^static void parseStringChars(const char*& nextChar, ParseState* parseState, std::string& outString)$/;"	f	file:
parseTable	Lib/WASTParse/ParseModule.cpp	/^static void parseTable(CursorState* cursor)$/;"	f	file:
parseTestCommands	Lib/WASTParse/ParseTests.cpp	/^void WAST::parseTestCommands(const char* string,$/;"	f	class:WAST
parseTestScriptModule	Lib/WASTParse/ParseTests.cpp	/^static void parseTestScriptModule(CursorState* cursor,$/;"	f	file:
parseType	Lib/WASTParse/ParseModule.cpp	/^static void parseType(CursorState* cursor)$/;"	f	file:
parseTypeTuple	Lib/WASTParse/ParseModule.cpp	/^static TypeTuple parseTypeTuple(CursorState* cursor)$/;"	f	file:
parseUTF8String	Lib/WASTParse/Parse.cpp	/^std::string WAST::parseUTF8String(CursorState* cursor)$/;"	f	class:WAST
parseUnion	Lib/RegExp/RegExp.cpp	/^static Node* parseUnion(const char*& nextChar, Uptr groupDepth)$/;"	f	file:
parseV128	Lib/WASTParse/ParseNumbers.cpp	/^V128 WAST::parseV128(CursorState* cursor)$/;"	f	class:WAST
parseValueType	Lib/WASTParse/Parse.cpp	/^ValueType WAST::parseValueType(CursorState* cursor)$/;"	f	class:WAST
passiveDataSegments	Lib/Runtime/RuntimePrivate.h	/^		PassiveDataSegmentMap passiveDataSegments;$/;"	m	struct:WAVM::Runtime::ModuleInstance
passiveDataSegmentsMutex	Lib/Runtime/RuntimePrivate.h	/^		mutable Platform::Mutex passiveDataSegmentsMutex;$/;"	m	struct:WAVM::Runtime::ModuleInstance
passiveElemSegments	Lib/Runtime/RuntimePrivate.h	/^		PassiveElemSegmentMap passiveElemSegments;$/;"	m	struct:WAVM::Runtime::ModuleInstance
passiveElemSegmentsMutex	Lib/Runtime/RuntimePrivate.h	/^		mutable Platform::Mutex passiveElemSegmentsMutex;$/;"	m	struct:WAVM::Runtime::ModuleInstance
pcEnd	ThirdParty/libunwind/src/DwarfParser.hpp	/^    pint_t  pcEnd;$/;"	m	struct:libunwind::CFI_Parser::FDE_Info
pcStart	ThirdParty/libunwind/src/DwarfParser.hpp	/^    pint_t  pcStart;$/;"	m	struct:libunwind::CFI_Parser::FDE_Info
peek	Include/WAVM/Inline/Serialization.h	/^		inline const U8* peek(Uptr numBytes)$/;"	f	struct:WAVM::Serialization::InputStream
pendingFilenames	Test/RunTestScript/RunTestScript.cpp	/^	std::vector<const char*> pendingFilenames;$/;"	m	struct:SharedState	file:
pendingScanObjects	Lib/Runtime/ObjectGC.cpp	/^	std::vector<GCObject*> pendingScanObjects;$/;"	m	struct:GCState	file:
personality	ThirdParty/libunwind/src/DwarfParser.hpp	/^    pint_t    personality;$/;"	m	struct:libunwind::CFI_Parser::CIE_Info
personality	ThirdParty/libunwind/src/Unwind-sjlj.c	/^  __personality_routine           personality; \/\/ arm offset=24$/;"	m	struct:_Unwind_FunctionContext	file:
personalityArrayCount	ThirdParty/libunwind/include/mach-o/compact_unwind_encoding.h	/^    uint32_t    personalityArrayCount;$/;"	m	struct:unwind_info_section_header
personalityArrayCount	ThirdParty/libunwind/src/UnwindCursor.hpp	/^  uint32_t personalityArrayCount() const {$/;"	f	class:libunwind::UnwindSectionHeader
personalityArraySectionOffset	ThirdParty/libunwind/include/mach-o/compact_unwind_encoding.h	/^    uint32_t    personalityArraySectionOffset;$/;"	m	struct:unwind_info_section_header
personalityArraySectionOffset	ThirdParty/libunwind/src/UnwindCursor.hpp	/^  uint32_t personalityArraySectionOffset() const {$/;"	f	class:libunwind::UnwindSectionHeader
personalityEncoding	ThirdParty/libunwind/src/DwarfParser.hpp	/^    uint8_t   personalityEncoding;$/;"	m	struct:libunwind::CFI_Parser::CIE_Info
personalityOffsetInCIE	ThirdParty/libunwind/src/DwarfParser.hpp	/^    uint8_t   personalityOffsetInCIE;$/;"	m	struct:libunwind::CFI_Parser::CIE_Info
phis	Lib/LLVMJIT/EmitFunctionContext.h	/^			PHIVector phis;$/;"	m	struct:WAVM::LLVMJIT::EmitFunctionContext::BranchTarget
pint_t	ThirdParty/libunwind/src/AddressSpace.hpp	/^  typedef typename P::uint_t pint_t;$/;"	t	class:libunwind::RemoteAddressSpace
pint_t	ThirdParty/libunwind/src/AddressSpace.hpp	/^  typedef uintptr_t pint_t;$/;"	t	class:libunwind::LocalAddressSpace
pint_t	ThirdParty/libunwind/src/CompactUnwinder.hpp	/^  typename A::pint_t pint_t;$/;"	m	class:libunwind::CompactUnwinder_arm64
pint_t	ThirdParty/libunwind/src/CompactUnwinder.hpp	/^  typename A::pint_t pint_t;$/;"	m	class:libunwind::CompactUnwinder_x86
pint_t	ThirdParty/libunwind/src/CompactUnwinder.hpp	/^  typename A::pint_t pint_t;$/;"	m	class:libunwind::CompactUnwinder_x86_64
pint_t	ThirdParty/libunwind/src/DwarfInstructions.hpp	/^  typedef typename A::pint_t pint_t;$/;"	t	class:libunwind::DwarfInstructions
pint_t	ThirdParty/libunwind/src/DwarfParser.hpp	/^  typedef typename A::pint_t pint_t;$/;"	t	class:libunwind::CFI_Parser
pint_t	ThirdParty/libunwind/src/EHHeaderParser.hpp	/^  typedef typename A::pint_t pint_t;$/;"	t	class:libunwind::EHHeaderParser
pint_t	ThirdParty/libunwind/src/UnwindCursor.hpp	/^  typedef typename A::pint_t pint_t;$/;"	t	class:libunwind::DwarfFDECache
pint_t	ThirdParty/libunwind/src/UnwindCursor.hpp	/^  typedef typename A::pint_t pint_t;$/;"	t	class:libunwind::UnwindCursor
platformThread	Lib/ThreadTest/ThreadTest.cpp	/^	Platform::Thread* platformThread = nullptr;$/;"	m	struct:Thread	file:
pmem_next	ThirdParty/dtoa/dtoa.c	/^static thread_local double private_mem[PRIVATE_mem], *pmem_next = private_mem;$/;"	v	file:
point	Examples/Benchmark/Benchmark.cpp	/^struct point$/;"	s	file:
pointer	ThirdParty/libunwind/src/UnwindCursor.hpp	/^  typedef typename A::pint_t* pointer;$/;"	t	struct:libunwind::EHABISectionIterator
pointerEncoding	ThirdParty/libunwind/src/DwarfParser.hpp	/^    uint8_t   pointerEncoding;$/;"	m	struct:libunwind::CFI_Parser::CIE_Info
pop	Lib/LLVMJIT/EmitFunctionContext.h	/^		llvm::Value* pop()$/;"	f	struct:WAVM::LLVMJIT::EmitFunctionContext
popAndValidateOperand	Lib/IR/Validate.cpp	/^	ValueType popAndValidateOperand(const char* context, const ValueType expectedType)$/;"	f	struct:FunctionValidationContext	file:
popAndValidateOperands	Lib/IR/Validate.cpp	/^	void popAndValidateOperands(const char* context, OperandTypes... operands)$/;"	f	struct:FunctionValidationContext	file:
popAndValidateOperands	Lib/IR/Validate.cpp	/^	void popAndValidateOperands(const char* context, const ValueType (&expectedTypes)[num])$/;"	f	struct:FunctionValidationContext	file:
popAndValidateOperands	Lib/IR/Validate.cpp	/^	void popAndValidateOperands(const char* context, const ValueType* expectedTypes, Uptr num)$/;"	f	struct:FunctionValidationContext	file:
popAndValidateTypeTuple	Lib/IR/Validate.cpp	/^	void popAndValidateTypeTuple(const char* context, TypeTuple expectedType)$/;"	f	struct:FunctionValidationContext	file:
popMultiple	Lib/LLVMJIT/EmitFunctionContext.h	/^		void popMultiple(llvm::Value** outValues, Uptr num)$/;"	f	struct:WAVM::LLVMJIT::EmitFunctionContext
postDeclarationCallbacks	Lib/WASTParse/Parse.h	/^		std::vector<std::function<void(ModuleState*)>> postDeclarationCallbacks;$/;"	m	struct:WAVM::WAST::ModuleState
postTypeCallbacks	Lib/WASTParse/Parse.h	/^		std::vector<std::function<void(ModuleState*)>> postTypeCallbacks;$/;"	m	struct:WAVM::WAST::ModuleState
ppc64_thread_state_t	ThirdParty/libunwind/src/Registers.hpp	/^  struct ppc64_thread_state_t {$/;"	s	class:libunwind::Registers_ppc64
ppc64_vsr_t	ThirdParty/libunwind/src/Registers.hpp	/^  union ppc64_vsr_t {$/;"	u	class:libunwind::Registers_ppc64
ppc_float_state_t	ThirdParty/libunwind/src/Registers.hpp	/^  struct ppc_float_state_t {$/;"	s	class:libunwind::Registers_ppc
ppc_thread_state_t	ThirdParty/libunwind/src/Registers.hpp	/^  struct ppc_thread_state_t {$/;"	s	class:libunwind::Registers_ppc
pr_cache	ThirdParty/libunwind/include/unwind.h	/^  } pr_cache;$/;"	m	struct:_Unwind_Control_Block	typeref:struct:_Unwind_Control_Block::__anon59
pr_name_len	Lib/WASI/WASIDefinitions.h	/^			__wasi_size_t pr_name_len;$/;"	m	struct:__wasi_prestat_t::__wasi_prestat_u::__wasi_prestat_u_dir_t
pr_type	Lib/WASI/WASIDefinitions.h	/^	__wasi_preopentype_t pr_type;$/;"	m	struct:__wasi_prestat_t
precision	Lib/WASI/WASIDefinitions.h	/^			__wasi_timestamp_t precision;$/;"	m	struct:__wasi_subscription_t::__wasi_subscription_u::__wasi_subscription_u_clock_t
precompiled	Programs/wavm-run-wasi/wavm-run-wasi.cpp	/^	bool precompiled = false;$/;"	m	struct:CommandLineOptions	file:
precompiled	Programs/wavm-run/wavm-run.cpp	/^	bool precompiled = false;$/;"	m	struct:CommandLineOptions	file:
prev	ThirdParty/libunwind/src/Unwind-sjlj.c	/^  struct _Unwind_FunctionContext *prev;$/;"	m	struct:_Unwind_FunctionContext	typeref:struct:_Unwind_FunctionContext::_Unwind_FunctionContext	file:
previousBranchTargetIndex	Lib/WASTParse/ParseFunction.cpp	/^		Uptr previousBranchTargetIndex;$/;"	m	struct:__anon50::ScopedBranchTarget	file:
print	Lib/WASTPrint/Print.cpp	/^static void print(std::string& string, FunctionType functionType)$/;"	f	file:
print	Lib/WASTPrint/Print.cpp	/^static void print(std::string& string, GlobalType type)$/;"	f	file:
print	Lib/WASTPrint/Print.cpp	/^static void print(std::string& string, ReferenceType type)$/;"	f	file:
print	Lib/WASTPrint/Print.cpp	/^static void print(std::string& string, ValueType type) { string += asString(type); }$/;"	f	file:
print	Lib/WASTPrint/Print.cpp	/^static void print(std::string& string, const ExceptionType& type)$/;"	f	file:
print	Lib/WASTPrint/Print.cpp	/^static void print(std::string& string, const MemoryType& type)$/;"	f	file:
print	Lib/WASTPrint/Print.cpp	/^static void print(std::string& string, const SizeConstraints& size)$/;"	f	file:
print	Lib/WASTPrint/Print.cpp	/^static void print(std::string& string, const TableType& type)$/;"	f	file:
print	Lib/WASTPrint/Print.cpp	/^std::string WAST::print(const Module& module)$/;"	f	class:WAST
printControlLabel	Lib/WASTPrint/Print.cpp	/^	std::string printControlLabel(const char* labelIdBase)$/;"	f	struct:FunctionPrintContext	file:
printControlSignature	Lib/WASTPrint/Print.cpp	/^	void printControlSignature(IndexedBlockType indexedSignature)$/;"	f	struct:FunctionPrintContext
printFunctionBody	Lib/WASTPrint/Print.cpp	/^void FunctionPrintContext::printFunctionBody()$/;"	f	class:FunctionPrintContext
printFunctionSEH	Lib/LLVMJIT/Win64EH.cpp	/^void printFunctionSEH(U8* imageBase, const RuntimeFunction& function)$/;"	f
printImm	Lib/WASTPrint/Print.cpp	/^	template<Uptr naturalAlignmentLog2> void printImm(LoadOrStoreImm<naturalAlignmentLog2> imm)$/;"	f	struct:FunctionPrintContext
printImm	Lib/WASTPrint/Print.cpp	/^	template<Uptr numLanes> void printImm(LaneIndexImm<numLanes> imm)$/;"	f	struct:FunctionPrintContext
printImm	Lib/WASTPrint/Print.cpp	/^	template<Uptr numLanes> void printImm(ShuffleImm<numLanes> imm)$/;"	f	struct:FunctionPrintContext
printImm	Lib/WASTPrint/Print.cpp	/^	void printImm(AtomicLoadOrStoreImm<naturalAlignmentLog2> imm)$/;"	f	struct:FunctionPrintContext
printImm	Lib/WASTPrint/Print.cpp	/^	void printImm(DataSegmentAndMemImm imm)$/;"	f	struct:FunctionPrintContext
printImm	Lib/WASTPrint/Print.cpp	/^	void printImm(DataSegmentImm imm)$/;"	f	struct:FunctionPrintContext
printImm	Lib/WASTPrint/Print.cpp	/^	void printImm(ElemSegmentAndTableImm imm)$/;"	f	struct:FunctionPrintContext
printImm	Lib/WASTPrint/Print.cpp	/^	void printImm(ElemSegmentImm imm)$/;"	f	struct:FunctionPrintContext
printImm	Lib/WASTPrint/Print.cpp	/^	void printImm(FunctionImm imm)$/;"	f	struct:FunctionPrintContext
printImm	Lib/WASTPrint/Print.cpp	/^	void printImm(LiteralImm<F32> imm)$/;"	f	struct:FunctionPrintContext
printImm	Lib/WASTPrint/Print.cpp	/^	void printImm(LiteralImm<F64> imm)$/;"	f	struct:FunctionPrintContext
printImm	Lib/WASTPrint/Print.cpp	/^	void printImm(LiteralImm<I32> imm)$/;"	f	struct:FunctionPrintContext
printImm	Lib/WASTPrint/Print.cpp	/^	void printImm(LiteralImm<I64> imm)$/;"	f	struct:FunctionPrintContext
printImm	Lib/WASTPrint/Print.cpp	/^	void printImm(LiteralImm<V128> imm)$/;"	f	struct:FunctionPrintContext
printImm	Lib/WASTPrint/Print.cpp	/^	void printImm(MemoryCopyImm imm)$/;"	f	struct:FunctionPrintContext
printImm	Lib/WASTPrint/Print.cpp	/^	void printImm(MemoryImm imm) { errorUnless(imm.memoryIndex == 0); }$/;"	f	struct:FunctionPrintContext
printImm	Lib/WASTPrint/Print.cpp	/^	void printImm(NoImm) {}$/;"	f	struct:FunctionPrintContext
printImm	Lib/WASTPrint/Print.cpp	/^	void printImm(TableCopyImm imm)$/;"	f	struct:FunctionPrintContext
printImm	Lib/WASTPrint/Print.cpp	/^	void printImm(TableImm imm)$/;"	f	struct:FunctionPrintContext
printImport	Lib/WASTPrint/Print.cpp	/^void printImport(std::string& string,$/;"	f
printImportType	Lib/WASTPrint/Print.cpp	/^template<typename Type> void printImportType(std::string& string, const Module& module, Type type)$/;"	f
printImportType	Lib/WASTPrint/Print.cpp	/^void printImportType<IndexedFunctionType>(std::string& string,$/;"	f
printInitializerExpression	Lib/WASTPrint/Print.cpp	/^	void printInitializerExpression(const InitializerExpression& expression)$/;"	f	struct:ModulePrintContext
printLinkingSection	Lib/WASTPrint/Print.cpp	/^void ModulePrintContext::printLinkingSection(const IR::UserSection& linkingSection)$/;"	f	class:ModulePrintContext
printModule	Lib/LLVMJIT/LLVMCompile.cpp	/^static void printModule(const llvm::Module& llvmModule, const char* filename)$/;"	f	file:
printModule	Lib/WASTPrint/Print.cpp	/^void ModulePrintContext::printModule()$/;"	f	class:ModulePrintContext
printedModuleId	Lib/LLVMJIT/LLVMCompile.cpp	/^static Uptr printedModuleId = 0;$/;"	v	file:
printf	Lib/Logging/Logging.cpp	/^void Log::printf(Category category, const char* format, ...)$/;"	f	class:Log
private_1	ThirdParty/libunwind/include/unwind.h	/^  uintptr_t private_1; \/\/ non-zero means forced unwind$/;"	m	struct:_Unwind_Exception
private_2	ThirdParty/libunwind/include/unwind.h	/^  uintptr_t private_2; \/\/ holds sp that phase1 found for phase2 to use$/;"	m	struct:_Unwind_Exception
private_mem	ThirdParty/dtoa/dtoa.c	/^static thread_local double private_mem[PRIVATE_mem], *pmem_next = private_mem;$/;"	v	file:
processAction	Test/RunTestScript/RunTestScript.cpp	/^static bool processAction(TestScriptState& state, Action* action, IR::ValueTuple& outResults)$/;"	f	file:
processCommand	Test/RunTestScript/RunTestScript.cpp	/^static void processCommand(TestScriptState& state, const Command* command)$/;"	f	file:
processCommandWithCloning	Test/RunTestScript/RunTestScript.cpp	/^static void processCommandWithCloning(TestScriptState& state, const Command* command)$/;"	f	file:
processSEHTables	Lib/LLVMJIT/Win64EH.cpp	/^void LLVMJIT::processSEHTables(U8* imageBase,$/;"	f	class:LLVMJIT
project	ThirdParty/libunwind/docs/conf.py	/^project = u'libunwind'$/;"	v
pthreadCond	Include/WAVM/Platform/Event.h	/^		} pthreadCond;$/;"	m	struct:WAVM::Platform::Event	typeref:struct:WAVM::Platform::Event::PthreadCond
pthreadMutex	Include/WAVM/Platform/Event.h	/^		} pthreadMutex;$/;"	m	struct:WAVM::Platform::Event	typeref:struct:WAVM::Platform::Event::PthreadMutex
pthreadMutex	Include/WAVM/Platform/Mutex.h	/^		} pthreadMutex;$/;"	m	struct:WAVM::Platform::Mutex	typeref:struct:WAVM::Platform::Mutex::PthreadMutex
pthreadSpecific	Lib/Emscripten/Emscripten.cpp	/^static HashMap<U32, I32> pthreadSpecific = {};$/;"	v	file:
pthreadSpecificNextKey	Lib/Emscripten/Emscripten.cpp	/^static U32 pthreadSpecificNextKey = 0;$/;"	v	file:
push	Lib/LLVMJIT/EmitFunctionContext.h	/^		void push(llvm::Value* value) { stack.push_back(value); }$/;"	f	struct:WAVM::LLVMJIT::EmitFunctionContext
pushBranchTarget	Lib/LLVMJIT/EmitFunction.cpp	/^void EmitFunctionContext::pushBranchTarget(TypeTuple branchArgumentType,$/;"	f	class:EmitFunctionContext
pushControlStack	Include/WAVM/Emscripten/gas-visit-context.h	/^    void pushControlStack(ControlContext::Type type, std::string lableId)$/;"	f	struct:GasVisitor
pushControlStack	Include/WAVM/Emscripten/insert-imported-context.h	/^    void pushControlStack(ControlContext::Type type, std::string lableId)$/;"	f	struct:ImportFunctionInsertVisitor
pushControlStack	Lib/IR/Validate.cpp	/^	void pushControlStack(ControlContext::Type type,$/;"	f	struct:FunctionValidationContext	file:
pushControlStack	Lib/LLVMJIT/EmitFunction.cpp	/^void EmitFunctionContext::pushControlStack(ControlContext::Type type,$/;"	f	class:EmitFunctionContext
pushControlStack	Lib/WASTPrint/Print.cpp	/^	void pushControlStack(ControlContext::Type type, std::string labelId)$/;"	f	struct:FunctionPrintContext	file:
pushMultiple	Lib/LLVMJIT/EmitFunctionContext.h	/^		void pushMultiple(llvm::Value** values, Uptr numValues)$/;"	f	struct:WAVM::LLVMJIT::EmitFunctionContext
pushOperand	Lib/IR/Validate.cpp	/^	void pushOperand(ValueType type) { stack.push_back(type); }$/;"	f	struct:FunctionValidationContext	file:
pushOperandTuple	Lib/IR/Validate.cpp	/^	void pushOperandTuple(TypeTuple typeTuple)$/;"	f	struct:FunctionValidationContext	file:
pygments_style	ThirdParty/libunwind/docs/conf.py	/^pygments_style = 'friendly'$/;"	v
qnxnto	output/CMakeFiles/3.13.2/CompilerIdC/CMakeCCompilerId.c	/^char const* qnxnto = "INFO" ":" "qnxnto[]";$/;"	v
qnxnto	output/CMakeFiles/3.13.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* qnxnto = "INFO" ":" "qnxnto[]";$/;"	v
quietNaN	Lib/Runtime/WAVMIntrinsics.cpp	/^template<typename Float> Float quietNaN(Float value)$/;"	f
quotedModuleString	Include/WAVM/WASTParse/TestScript.h	/^		std::string quotedModuleString;$/;"	m	struct:WAVM::WAST::AssertInvalidOrMalformedCommand
quotedModuleType	Include/WAVM/WASTParse/TestScript.h	/^		QuotedModuleType quotedModuleType;$/;"	m	struct:WAVM::WAST::AssertInvalidOrMalformedCommand
quotedNameStrings	Lib/WASTParse/Parse.h	/^		std::vector<std::unique_ptr<std::string>> quotedNameStrings;$/;"	m	struct:WAVM::WAST::ParseState
quotedNamesInTextFormat	Include/WAVM/IR/IR.h	/^		bool quotedNamesInTextFormat = true; \/\/ Enabled by default for everything but wavm-disas,$/;"	m	struct:WAVM::IR::FeatureSpec
r12	Lib/Platform/POSIX/POSIXPrivate.h	/^	U64 r12;$/;"	m	struct:ExecutionContext
r12	Lib/Platform/Windows/WindowsPrivate.h	/^	U64 r12;$/;"	m	struct:ExecutionContext
r13	Lib/Platform/POSIX/POSIXPrivate.h	/^	U64 r13;$/;"	m	struct:ExecutionContext
r13	Lib/Platform/Windows/WindowsPrivate.h	/^	U64 r13;$/;"	m	struct:ExecutionContext
r14	Lib/Platform/POSIX/POSIXPrivate.h	/^	U64 r14;$/;"	m	struct:ExecutionContext
r14	Lib/Platform/Windows/WindowsPrivate.h	/^	U64 r14;$/;"	m	struct:ExecutionContext
r15	Lib/Platform/POSIX/POSIXPrivate.h	/^	U64 r15;$/;"	m	struct:ExecutionContext
r15	Lib/Platform/Windows/WindowsPrivate.h	/^	U64 r15;$/;"	m	struct:ExecutionContext
rbp	Lib/Platform/POSIX/POSIXPrivate.h	/^	U64 rbp;$/;"	m	struct:ExecutionContext
rbp	Lib/Platform/Windows/WindowsPrivate.h	/^	U64 rbp;$/;"	m	struct:ExecutionContext
rbx	Lib/Platform/POSIX/POSIXPrivate.h	/^	U64 rbx;$/;"	m	struct:ExecutionContext
rbx	Lib/Platform/Windows/WindowsPrivate.h	/^	U64 rbx;$/;"	m	struct:ExecutionContext
rdi	Lib/Platform/Windows/WindowsPrivate.h	/^	U64 rdi;$/;"	m	struct:ExecutionContext
reachedUnreachable	Include/WAVM/WASTParse/TestScript.h	/^		reachedUnreachable,$/;"	m	class:WAVM::WAST::ExpectedTrapType
readFile	Lib/Platform/POSIX/File.cpp	/^bool Platform::readFile(File* file, void* outData, Uptr numBytes, Uptr* outNumBytesRead)$/;"	f	class:Platform
readFile	Lib/Platform/Windows/File.cpp	/^bool Platform::readFile(File* file, void* outData, Uptr numBytes, Uptr* outNumBytesRead)$/;"	f	class:Platform
readOnly	Include/WAVM/Platform/File.h	/^		readOnly = 0x1,$/;"	m	class:WAVM::Platform::FileAccessMode
readOnly	Include/WAVM/Platform/Memory.h	/^		readOnly,$/;"	m	class:WAVM::Platform::MemoryAccess
readOnlySection	Lib/LLVMJIT/LLVMModule.cpp	/^	Section readOnlySection;$/;"	m	struct:LLVMJIT::ModuleMemoryManager	file:
readPrel31	ThirdParty/libunwind/src/Unwind-EHABI.h	/^static inline uint32_t readPrel31(const uint32_t *data) {$/;"	f
readWrite	Include/WAVM/Platform/File.h	/^		readWrite = 0x1 | 0x2,$/;"	m	class:WAVM::Platform::FileAccessMode
readWrite	Include/WAVM/Platform/Memory.h	/^		readWrite,$/;"	m	class:WAVM::Platform::MemoryAccess
readWriteSection	Lib/LLVMJIT/LLVMModule.cpp	/^	Section readWriteSection;$/;"	m	struct:LLVMJIT::ModuleMemoryManager	file:
read_memory_ref	Lib/Emscripten/Emscripten.cpp	/^void read_memory_ref(Emscripten::Instance* instance,$/;"	f	class:ioStreamVMHandle	file:
reallyFinalizeMemory	Lib/LLVMJIT/LLVMModule.cpp	/^	void reallyFinalizeMemory()$/;"	f	struct:LLVMJIT::ModuleMemoryManager
ref	Include/WAVM/IR/Module.h	/^			Ref ref;$/;"	m	union:WAVM::IR::Opcode::Type::__anon10
ref_func	Include/WAVM/Emscripten/insert-imported-context.h	/^    Result ref_func(FunctionImm imm)$/;"	f	struct:ImportFunctionInsertVisitor
ref_func	Include/WAVM/IR/Module.h	/^			ref_func = 0x00d2,$/;"	m	class:WAVM::IR::Opcode::Type
ref_func	Include/WAVM/IR/Module.h	/^			ref_func = 0xd2$/;"	m	class:WAVM::IR::Opcode::Elem::Type
ref_func	Lib/LLVMJIT/EmitTable.cpp	/^void EmitFunctionContext::ref_func(FunctionImm imm)$/;"	f	class:EmitFunctionContext
ref_is_null	Lib/LLVMJIT/EmitTable.cpp	/^void EmitFunctionContext::ref_is_null(NoImm)$/;"	f	class:EmitFunctionContext
ref_null	Include/WAVM/IR/Module.h	/^			ref_null = 0x00d0,$/;"	m	class:WAVM::IR::Opcode::Type
ref_null	Include/WAVM/IR/Module.h	/^			ref_null = 0xd0,$/;"	m	class:WAVM::IR::Opcode::Elem::Type
ref_null	Lib/LLVMJIT/EmitTable.cpp	/^void EmitFunctionContext::ref_null(NoImm)$/;"	f	class:EmitFunctionContext
reference	Lib/WASTParse/Parse.h	/^		Reference reference;$/;"	m	struct:WAVM::WAST::UnresolvedFunctionType
reference	ThirdParty/libunwind/src/UnwindCursor.hpp	/^  typedef typename A::pint_t& reference;$/;"	t	struct:libunwind::EHABISectionIterator
referenceTypes	Include/WAVM/IR/IR.h	/^		bool referenceTypes = true;$/;"	m	struct:WAVM::IR::FeatureSpec
refill	Test/fuzz/fuzz-compile-model.cpp	/^	void refill()$/;"	f	struct:RandomStream	file:
registerEHFrames	Lib/Platform/POSIX/Signal.cpp	/^void Platform::registerEHFrames(const U8* imageBase, const U8* ehFrames, Uptr numBytes)$/;"	f	class:Platform
registerEHFrames	Lib/Platform/Windows/Signal.cpp	/^void Platform::registerEHFrames(const U8* imageBase, const U8* ehFrames, Uptr numBytes)$/;"	f	class:Platform
registerFixedSEHFrames	Lib/LLVMJIT/LLVMModule.cpp	/^	void registerFixedSEHFrames(U8* addr, Uptr numBytes)$/;"	f	struct:LLVMJIT::ModuleMemoryManager
registersInOtherRegisters	ThirdParty/libunwind/src/DwarfParser.hpp	/^    bool              registersInOtherRegisters;$/;"	m	struct:libunwind::CFI_Parser::PrologInfo
release	Lib/Emscripten/Interface.cpp	/^void release(ModulePtr ptr)$/;"	f
release	ThirdParty/libunwind/docs/conf.py	/^release = '7.0'$/;"	v
releaseRef	Lib/Platform/Windows/Thread.cpp	/^	void releaseRef()$/;"	f	struct:Platform::Thread
reloadMemoryBase	Lib/LLVMJIT/EmitContext.h	/^		void reloadMemoryBase()$/;"	f	struct:WAVM::LLVMJIT::EmitContext
remapToClonedCompartment	Lib/Runtime/Compartment.cpp	/^ExceptionType* Runtime::remapToClonedCompartment(ExceptionType* exceptionType,$/;"	f	class:Runtime
remapToClonedCompartment	Lib/Runtime/Compartment.cpp	/^Function* Runtime::remapToClonedCompartment(Function* function, const Compartment* newCompartment)$/;"	f	class:Runtime
remapToClonedCompartment	Lib/Runtime/Compartment.cpp	/^Global* Runtime::remapToClonedCompartment(Global* global, const Compartment* newCompartment)$/;"	f	class:Runtime
remapToClonedCompartment	Lib/Runtime/Compartment.cpp	/^Memory* Runtime::remapToClonedCompartment(Memory* memory, const Compartment* newCompartment)$/;"	f	class:Runtime
remapToClonedCompartment	Lib/Runtime/Compartment.cpp	/^ModuleInstance* Runtime::remapToClonedCompartment(ModuleInstance* moduleInstance,$/;"	f	class:Runtime
remapToClonedCompartment	Lib/Runtime/Compartment.cpp	/^Object* Runtime::remapToClonedCompartment(Object* object, const Compartment* newCompartment)$/;"	f	class:Runtime
remapToClonedCompartment	Lib/Runtime/Compartment.cpp	/^Table* Runtime::remapToClonedCompartment(Table* table, const Compartment* newCompartment)$/;"	f	class:Runtime
remove	Include/WAVM/Inline/ConcurrentHashMap.h	/^		bool remove(const Key& key)$/;"	f	struct:WAVM::ConcurrentHashMap
remove	Include/WAVM/Inline/DenseStaticIntSet.h	/^		inline bool remove(Index index)$/;"	f	struct:WAVM::DenseStaticIntSet
remove	Include/WAVM/Inline/HashMapImpl.h	/^template<HASHMAP_PARAMETERS> bool HashMap<HASHMAP_ARGUMENTS>::remove(const Key& key)$/;"	f	class:HashMap
remove	Include/WAVM/Inline/HashSetImpl.h	/^bool HashSet<Element, ElementHashPolicy>::remove(const Element& element)$/;"	f	class:HashSet
remove	Include/WAVM/Inline/HashTableImpl.h	/^bool HashTable<HASHTABLE_ARGUMENTS>::remove(Uptr hash, const Key& key)$/;"	f	class:HashTable
removeAllIn	ThirdParty/libunwind/src/UnwindCursor.hpp	/^void DwarfFDECache<A>::removeAllIn(pint_t mh) {$/;"	f	class:libunwind::DwarfFDECache
removeGCRoot	Lib/Runtime/ObjectGC.cpp	/^void Runtime::removeGCRoot(Object* object)$/;"	f	class:Runtime
removeOrFail	Include/WAVM/Inline/HashMapImpl.h	/^template<HASHMAP_PARAMETERS> void HashMap<HASHMAP_ARGUMENTS>::removeOrFail(const Key& key)$/;"	f	class:HashMap
removeOrFail	Include/WAVM/Inline/HashSetImpl.h	/^void HashSet<Element, ElementHashPolicy>::removeOrFail(const Element& element)$/;"	f	class:HashSet
removeOrFail	Include/WAVM/Inline/IndexMap.h	/^		void removeOrFail(Index index)$/;"	f	struct:WAVM::IndexMap
removeRef	Lib/ThreadTest/ThreadTest.cpp	/^	void removeRef()$/;"	f	struct:Thread
removeThreadById	Lib/ThreadTest/ThreadTest.cpp	/^static IntrusiveSharedPtr<Thread> removeThreadById(Uptr threadId)$/;"	f	file:
reportParseErrors	Lib/WASTParse/Parse.cpp	/^void WAST::reportParseErrors(const char* filename, const std::vector<WAST::Error>& parseErrors)$/;"	f	class:WAST
require	Lib/WASTParse/Parse.cpp	/^void WAST::require(CursorState* cursor, TokenType type)$/;"	f	class:WAST
requireSharedFlagForAtomicOperators	Include/WAVM/IR/IR.h	/^		bool requireSharedFlagForAtomicOperators = false; \/\/ (true is standard)$/;"	m	struct:WAVM::IR::FeatureSpec
reserved	Include/WAVM/Inline/xxhash/xxhash.h	/^   uint32_t reserved;   \/* never read nor write, might be removed in a future version *\/$/;"	m	struct:XXH32_state_s
reserved	Include/WAVM/Inline/xxhash/xxhash.h	/^   uint32_t reserved[2];          \/* never read nor write, might be removed in a future version *\/$/;"	m	struct:XXH64_state_s
reserved	Include/WAVM/Inline/xxhash/xxhash.h	/^   unsigned reserved;   \/* never read nor write, might be removed in a future version *\/$/;"	m	struct:XXH32_state_s
reserved	Include/WAVM/Inline/xxhash/xxhash.h	/^   unsigned reserved[2];     \/* never read nor write, might be removed in a future version *\/$/;"	m	struct:XXH64_state_s
reserved	ThirdParty/libunwind/include/unwind.h	/^  uint32_t reserved[3];$/;"	m	struct:_Unwind_Exception
reserved1	ThirdParty/libunwind/include/unwind.h	/^    uint32_t reserved1; \/* init reserved1 to 0, then don't touch *\/$/;"	m	struct:_Unwind_Control_Block::__anon56
reserved1	ThirdParty/libunwind/include/unwind.h	/^    uint32_t reserved1;$/;"	m	struct:_Unwind_Control_Block::__anon59
reserved2	ThirdParty/libunwind/include/unwind.h	/^    uint32_t reserved2;$/;"	m	struct:_Unwind_Control_Block::__anon56
reserved3	ThirdParty/libunwind/include/unwind.h	/^    uint32_t reserved3;$/;"	m	struct:_Unwind_Control_Block::__anon56
reserved4	ThirdParty/libunwind/include/unwind.h	/^    uint32_t reserved4;$/;"	m	struct:_Unwind_Control_Block::__anon56
reserved5	ThirdParty/libunwind/include/unwind.h	/^    uint32_t reserved5;$/;"	m	struct:_Unwind_Control_Block::__anon56
reset	Lib/WASTParse/Parse.h	/^		void reset()$/;"	f	struct:WAVM::WAST::Name
resetMemories	Lib/Emscripten/Emscripten.cpp	/^void Emscripten::resetMemories(Emscripten::Instance* instance, const IR::Module& module, const std::vector<U8>& memImage) {$/;"	f	class:ioStreamVMHandle::Emscripten	file:
resetMemory	Lib/Runtime/Memory.cpp	/^void Runtime::resetMemory(Memory* memory, IR::MemoryType& newType, const std::vector<U8>& memImage) {$/;"	f	class:Runtime
resize	Include/WAVM/Inline/HashTableImpl.h	/^template<HASHTABLE_PARAMETERS> void HashTable<HASHTABLE_ARGUMENTS>::resize(Uptr newNumBuckets)$/;"	f	class:HashTable
resizeHeap	Lib/Emscripten/Emscripten.cpp	/^static bool resizeHeap(Emscripten::Instance* instance, U32 desiredNumBytes)$/;"	f	file:
resizingMutex	Lib/Runtime/RuntimePrivate.h	/^		mutable Platform::Mutex resizingMutex;$/;"	m	struct:WAVM::Runtime::Memory
resizingMutex	Lib/Runtime/RuntimePrivate.h	/^		mutable Platform::Mutex resizingMutex;$/;"	m	struct:WAVM::Runtime::Table
resolveBlockType	Include/WAVM/IR/Module.h	/^	inline FunctionType resolveBlockType(const Module& module, const IndexedBlockType& indexedType)$/;"	f	struct:WAVM::IR::Opcode::Elem
resolveFunctionType	Lib/WASTParse/Parse.cpp	/^IndexedFunctionType WAST::resolveFunctionType(ModuleState* moduleState,$/;"	f	class:WAST
resolveImportType	Lib/Runtime/Linker.cpp	/^static IR::ExceptionType resolveImportType(const IR::Module& module, IR::ExceptionType type)$/;"	f	file:
resolveImportType	Lib/Runtime/Linker.cpp	/^static IR::FunctionType resolveImportType(const IR::Module& module, IR::IndexedFunctionType type)$/;"	f	file:
resolveImportType	Lib/Runtime/Linker.cpp	/^static IR::GlobalType resolveImportType(const IR::Module& module, IR::GlobalType type)$/;"	f	file:
resolveImportType	Lib/Runtime/Linker.cpp	/^static IR::MemoryType resolveImportType(const IR::Module& module, IR::MemoryType type)$/;"	f	file:
resolveImportType	Lib/Runtime/Linker.cpp	/^static IR::TableType resolveImportType(const IR::Module& module, IR::TableType type)$/;"	f	file:
resolveInitializerExpression	Lib/WASTParse/ParseModule.cpp	/^static InitializerExpression resolveInitializerExpression($/;"	f	file:
resolveJITImport	Lib/LLVMJIT/LLVMJIT.cpp	/^llvm::JITEvaluatedSymbol LLVMJIT::resolveJITImport(llvm::StringRef name)$/;"	f	class:LLVMJIT
resolveRef	Lib/WASTParse/Parse.cpp	/^Uptr WAST::resolveRef(ParseState* parseState,$/;"	f	class:WAST
resolvedImports	Include/WAVM/Runtime/Linker.h	/^		ImportBindings resolvedImports;$/;"	m	struct:WAVM::Runtime::LinkResult
resolver	Lib/WASI/WASI.cpp	/^		ProcessResolver resolver;$/;"	m	struct:WAVM::WASI::Process	file:
restoreSavedFloatRegisters	ThirdParty/libunwind/src/Registers.hpp	/^  void restoreSavedFloatRegisters() {$/;"	f	class:libunwind::Registers_arm
result	Lib/Platform/Windows/Thread.cpp	/^	I64 result = -1;$/;"	m	struct:Platform::Thread	file:
result	Lib/ThreadTest/ThreadTest.cpp	/^	I64 result = -1;$/;"	m	struct:Thread	file:
result	Test/Benchmarks/invoke-bench.cpp	/^	Result result;$/;"	m	struct:ContextAndResult	file:
resultInContextRuntimeData	Include/WAVM/Runtime/Intrinsics.h	/^	ResultInContextRuntimeData<Result>* resultInContextRuntimeData($/;"	f	namespace:WAVM::Intrinsics
resultMutex	Lib/ThreadTest/ThreadTest.cpp	/^	Platform::Mutex resultMutex;$/;"	m	struct:Thread	file:
resultType	Include/WAVM/IR/Types.h	/^			ValueType resultType;$/;"	m	union:WAVM::IR::ValueType::IndexedBlockType::__anon6
resultTypes	Lib/LLVMJIT/EmitFunctionContext.h	/^			IR::TypeTuple resultTypes;$/;"	m	struct:WAVM::LLVMJIT::EmitFunctionContext::ControlContext
results	Include/WAVM/IR/Types.h	/^			TypeTuple results;$/;"	m	struct:WAVM::IR::ValueType::FunctionType::Impl
results	Include/WAVM/IR/Types.h	/^		TypeTuple results() const { return impl->results; }$/;"	f	struct:WAVM::IR::ValueType::FunctionType
results	Lib/IR/Validate.cpp	/^		TypeTuple results;$/;"	m	struct:FunctionValidationContext::ControlContext	file:
resumeLocation	ThirdParty/libunwind/src/Unwind-sjlj.c	/^  uint32_t                        resumeLocation;$/;"	m	struct:_Unwind_FunctionContext	file:
resumeParameters	ThirdParty/libunwind/src/Unwind-sjlj.c	/^  uint32_t                        resumeParameters[4];$/;"	m	struct:_Unwind_FunctionContext	file:
rethrow	Include/WAVM/Emscripten/gas-visit-context.h	/^    Result rethrow(RethrowImm imm)$/;"	f	struct:GasVisitor
rethrow	Lib/IR/Validate.cpp	/^	void rethrow(RethrowImm imm)$/;"	f	struct:FunctionValidationContext
rethrow	Lib/LLVMJIT/EmitExceptions.cpp	/^void EmitFunctionContext::rethrow(RethrowImm imm)$/;"	f	class:EmitFunctionContext
rethrow	Lib/WASTPrint/Print.cpp	/^	void rethrow(RethrowImm imm)$/;"	f	struct:FunctionPrintContext
return	Lib/Platform/Windows/Win64.asm	/^return:$/;"	l
returnAddressRegister	ThirdParty/libunwind/src/DwarfParser.hpp	/^    uint8_t   returnAddressRegister;$/;"	m	struct:libunwind::CFI_Parser::CIE_Info
return_	Include/WAVM/Emscripten/gas-visit-context.h	/^    Result return_(NoImm imm)$/;"	f	struct:GasVisitor
return_	Lib/IR/Validate.cpp	/^	void return_(NoImm)$/;"	f	struct:FunctionValidationContext
return_	Lib/LLVMJIT/EmitCore.cpp	/^void EmitFunctionContext::return_(NoImm)$/;"	f	class:EmitFunctionContext
return_	Lib/WASTPrint/Print.cpp	/^	void return_(NoImm)$/;"	f	struct:FunctionPrintContext
rflags	Lib/Platform/Windows/WindowsPrivate.h	/^	U64 rflags;$/;"	m	struct:ExecutionContext
rip	Lib/Platform/POSIX/POSIXPrivate.h	/^	U64 rip;$/;"	m	struct:ExecutionContext
rip	Lib/Platform/Windows/WindowsPrivate.h	/^	U64 rip;$/;"	m	struct:ExecutionContext
rounded_product	ThirdParty/dtoa/dtoa.c	/^#define rounded_product(/;"	d	file:
rounded_quotient	ThirdParty/dtoa/dtoa.c	/^#define rounded_quotient(/;"	d	file:
rounding	ThirdParty/dtoa/dtoa.c	/^BCinfo { int dp0, dp1, dplen, dsign, e0, inexact, nd, nd0, rounding, scale, uflchk; };$/;"	m	struct:BCinfo	file:
rsi	Lib/Platform/Windows/WindowsPrivate.h	/^	U64 rsi;$/;"	m	struct:ExecutionContext
rsp	Lib/Platform/POSIX/POSIXPrivate.h	/^	U64 rsp;$/;"	m	struct:ExecutionContext
rsp	Lib/Platform/Windows/WindowsPrivate.h	/^	U64 rsp;$/;"	m	struct:ExecutionContext
run	Lib/WASI/WASI.cpp	/^WASI::RunResult WASI::run(Runtime::ModuleConstRefParam module,$/;"	f	class:WASI
run	Programs/wavm-run-wasi/wavm-run-wasi.cpp	/^static int run(const CommandLineOptions& options)$/;"	f	file:
run	Programs/wavm-run/wavm-run.cpp	/^static int run(const CommandLineOptions& options)$/;"	f	file:
runBenchmark	Test/Benchmarks/invoke-bench.cpp	/^void runBenchmark(Compartment* compartment,$/;"	f
runBenchmarkSingleAndMultiThreaded	Test/Benchmarks/invoke-bench.cpp	/^void runBenchmarkSingleAndMultiThreaded(Compartment* compartment,$/;"	f
runtimeData	Lib/Runtime/RuntimePrivate.h	/^		struct CompartmentRuntimeData* runtimeData;$/;"	m	struct:WAVM::Runtime::Compartment	typeref:struct:WAVM::Runtime::Compartment::CompartmentRuntimeData
runtimeData	Lib/Runtime/RuntimePrivate.h	/^		struct ContextRuntimeData* runtimeData = nullptr;$/;"	m	struct:WAVM::Runtime::Context	typeref:struct:WAVM::Runtime::Context::ContextRuntimeData
runtimeExceptionTypeInfo	Lib/LLVMJIT/EmitModuleContext.h	/^		llvm::Constant* runtimeExceptionTypeInfo = nullptr;$/;"	m	struct:WAVM::LLVMJIT::EmitModuleContext
runtimeSymbolMap	Lib/LLVMJIT/LLVMJIT.cpp	/^static HashMap<std::string, const char*> runtimeSymbolMap = {$/;"	v	file:
s2b	ThirdParty/dtoa/dtoa.c	/^s2b$/;"	f	file:
sThisAddressSpace	ThirdParty/libunwind/src/AddressSpace.hpp	/^  static LocalAddressSpace sThisAddressSpace;$/;"	m	class:libunwind::LocalAddressSpace
sameValueUsed	ThirdParty/libunwind/src/DwarfParser.hpp	/^    bool              sameValueUsed;$/;"	m	struct:libunwind::CFI_Parser::PrologInfo
saturateToBounds	Include/WAVM/Platform/Intrinsic.h	/^	inline U32 saturateToBounds(U32 value, U32 maxValue)$/;"	f	namespace:WAVM::Platform
saturateToBounds	Include/WAVM/Platform/Intrinsic.h	/^	inline U64 saturateToBounds(U64 value, U64 maxValue)$/;"	f	namespace:WAVM::Platform
saveExecutionState	Lib/Platform/Windows/Win64.asm	/^saveExecutionState PROC$/;"	l
saveExecutionStateImpl	Lib/Platform/Windows/Win64.asm	/^saveExecutionStateImpl PROC$/;"	l
saveFile	Include/WAVM/Inline/CLI.h	/^	inline bool saveFile(const char* filename, const void* fileBytes, Uptr numFileBytes)$/;"	f	namespace:WAVM
saveVFPAsX	ThirdParty/libunwind/src/Registers.hpp	/^  void saveVFPAsX() {$/;"	f	class:libunwind::Registers_arm
saveVFPAsX	ThirdParty/libunwind/src/UnwindCursor.hpp	/^  virtual void saveVFPAsX() { _LIBUNWIND_ABORT("saveVFPAsX not implemented"); }$/;"	f	class:libunwind::AbstractUnwindCursor
saveVFPAsX	ThirdParty/libunwind/src/UnwindCursor.hpp	/^template <typename A, typename R> void UnwindCursor<A, R>::saveVFPAsX() {$/;"	f	class:libunwind::UnwindCursor
savedRegisters	ThirdParty/libunwind/src/DwarfParser.hpp	/^    RegisterLocation  savedRegisters[kMaxRegisterNumber + 1];$/;"	m	struct:libunwind::CFI_Parser::PrologInfo
scale	ThirdParty/dtoa/dtoa.c	/^BCinfo { int dp0, dp1, dplen, dsign, e0, inexact, nd, nd0, rounding, scale, uflchk; };$/;"	m	struct:BCinfo	file:
scanObject	Lib/Runtime/ObjectGC.cpp	/^	void scanObject(GCObject* object)$/;"	f	struct:GCState
secondChild	Lib/RegExp/RegExp.cpp	/^	Node* secondChild;$/;"	m	struct:Binary	file:
secondLevelPagesSectionOffset	ThirdParty/libunwind/include/mach-o/compact_unwind_encoding.h	/^    uint32_t        secondLevelPagesSectionOffset;  \/\/ section offset to start of regular or compress page$/;"	m	struct:unwind_info_section_header_index_entry
secondLevelPagesSectionOffset	ThirdParty/libunwind/src/UnwindCursor.hpp	/^  uint32_t secondLevelPagesSectionOffset(uint32_t index) const {$/;"	f	class:libunwind::UnwindSectionIndexArray
seed	Test/fuzz/fuzz-compile-model.cpp	/^	U64 seed;$/;"	m	struct:RandomStream	file:
seekFile	Lib/Platform/POSIX/File.cpp	/^bool Platform::seekFile(File* file, I64 offset, FileSeekOrigin origin, U64* outAbsoluteOffset)$/;"	f	class:Platform
seekFile	Lib/Platform/Windows/File.cpp	/^bool Platform::seekFile(File* file, I64 offset, FileSeekOrigin origin, U64* outAbsoluteOffset)$/;"	f	class:Platform
seen_objects	ThirdParty/libunwind/src/Unwind_AppleExtras.cpp	/^  libgcc_object   *seen_objects;$/;"	m	struct:libgcc_object_info	file:
sehSignalFilterFunction	Lib/Platform/Windows/Signal.cpp	/^static LONG CALLBACK sehSignalFilterFunction(EXCEPTION_POINTERS* exceptionPointers,$/;"	f	file:
sehSignalFilterFunctionNonReentrant	Lib/Platform/Windows/Signal.cpp	/^static LONG CALLBACK sehSignalFilterFunctionNonReentrant(EXCEPTION_POINTERS* exceptionPointers,$/;"	f	file:
select	Include/WAVM/Emscripten/gas-visit-context.h	/^    Result select(NoImm imm)$/;"	f	struct:GasVisitor
select	Lib/IR/Validate.cpp	/^	void select(NoImm)$/;"	f	struct:FunctionValidationContext
select	Lib/LLVMJIT/EmitCore.cpp	/^void EmitFunctionContext::select(IR::NoImm)$/;"	f	class:EmitFunctionContext
select	Lib/WASTPrint/Print.cpp	/^	void select(NoImm) { string += "\\nselect"; }$/;"	f	struct:FunctionPrintContext
seq	Lib/RegExp/RegExp.cpp	/^	seq,$/;"	m	class:NodeType	file:
serialize	Include/WAVM/Inline/Serialization.h	/^	template<typename Stream> void serialize(Stream& stream, F32& f)$/;"	f	namespace:WAVM::Serialization
serialize	Include/WAVM/Inline/Serialization.h	/^	template<typename Stream> void serialize(Stream& stream, F64& f)$/;"	f	namespace:WAVM::Serialization
serialize	Include/WAVM/Inline/Serialization.h	/^	template<typename Stream> void serialize(Stream& stream, I32& i)$/;"	f	namespace:WAVM::Serialization
serialize	Include/WAVM/Inline/Serialization.h	/^	template<typename Stream> void serialize(Stream& stream, I64& i)$/;"	f	namespace:WAVM::Serialization
serialize	Include/WAVM/Inline/Serialization.h	/^	template<typename Stream> void serialize(Stream& stream, I8& i)$/;"	f	namespace:WAVM::Serialization
serialize	Include/WAVM/Inline/Serialization.h	/^	template<typename Stream> void serialize(Stream& stream, U32& i)$/;"	f	namespace:WAVM::Serialization
serialize	Include/WAVM/Inline/Serialization.h	/^	template<typename Stream> void serialize(Stream& stream, U64& i)$/;"	f	namespace:WAVM::Serialization
serialize	Include/WAVM/Inline/Serialization.h	/^	template<typename Stream> void serialize(Stream& stream, U8& i)$/;"	f	namespace:WAVM::Serialization
serialize	Include/WAVM/Inline/Serialization.h	/^	template<typename Stream> void serialize(Stream& stream, std::string& string)$/;"	f	namespace:WAVM::Serialization
serialize	Include/WAVM/Inline/Serialization.h	/^	void serialize(Stream& stream, std::vector<Element, Allocator>& vector)$/;"	f	namespace:WAVM::Serialization
serialize	Lib/WASM/WASMSerialization.cpp	/^	FORCEINLINE static void serialize(InputStream& stream, TypeTuple& typeTuple)$/;"	f	namespace:WAVM::IR
serialize	Lib/WASM/WASMSerialization.cpp	/^	static void serialize(InputStream& stream, ValueType& type)$/;"	f	namespace:WAVM::IR
serialize	Lib/WASM/WASMSerialization.cpp	/^	static void serialize(OutputStream& stream, TypeTuple& typeTuple)$/;"	f	namespace:WAVM::IR
serialize	Lib/WASM/WASMSerialization.cpp	/^	static void serialize(OutputStream& stream, ValueType type)$/;"	f	namespace:WAVM::IR
serialize	Lib/WASM/WASMSerialization.cpp	/^	template<typename Stream> void serialize(Stream& stream, DataSegment& dataSegment)$/;"	f	namespace:WAVM::IR
serialize	Lib/WASM/WASMSerialization.cpp	/^	template<typename Stream> void serialize(Stream& stream, ElemSegment& elemSegment)$/;"	f	namespace:WAVM::IR
serialize	Lib/WASM/WASMSerialization.cpp	/^	template<typename Stream> void serialize(Stream& stream, ExceptionType& exceptionType)$/;"	f	namespace:WAVM::IR
serialize	Lib/WASM/WASMSerialization.cpp	/^	template<typename Stream> void serialize(Stream& stream, ExceptionTypeDef& exceptionTypeDef)$/;"	f	namespace:WAVM::IR
serialize	Lib/WASM/WASMSerialization.cpp	/^	template<typename Stream> void serialize(Stream& stream, Export& e)$/;"	f	namespace:WAVM::IR
serialize	Lib/WASM/WASMSerialization.cpp	/^	template<typename Stream> void serialize(Stream& stream, ExternKind& kind)$/;"	f	namespace:WAVM::IR
serialize	Lib/WASM/WASMSerialization.cpp	/^	template<typename Stream> void serialize(Stream& stream, GlobalDef& globalDef)$/;"	f	namespace:WAVM::IR
serialize	Lib/WASM/WASMSerialization.cpp	/^	template<typename Stream> void serialize(Stream& stream, GlobalType& globalType)$/;"	f	namespace:WAVM::IR
serialize	Lib/WASM/WASMSerialization.cpp	/^	template<typename Stream> void serialize(Stream& stream, InitializerExpression& initializer)$/;"	f	namespace:WAVM::IR
serialize	Lib/WASM/WASMSerialization.cpp	/^	template<typename Stream> void serialize(Stream& stream, MemoryDef& memoryDef)$/;"	f	namespace:WAVM::IR
serialize	Lib/WASM/WASMSerialization.cpp	/^	template<typename Stream> void serialize(Stream& stream, MemoryType& memoryType)$/;"	f	namespace:WAVM::IR
serialize	Lib/WASM/WASMSerialization.cpp	/^	template<typename Stream> void serialize(Stream& stream, ReferenceType& referenceType)$/;"	f	namespace:WAVM::IR
serialize	Lib/WASM/WASMSerialization.cpp	/^	template<typename Stream> void serialize(Stream& stream, TableDef& tableDef)$/;"	f	namespace:WAVM::IR
serialize	Lib/WASM/WASMSerialization.cpp	/^	template<typename Stream> void serialize(Stream& stream, TableType& tableType)$/;"	f	namespace:WAVM::IR
serialize	Lib/WASM/WASMSerialization.cpp	/^	void serialize(Stream& stream, SizeConstraints& sizeConstraints, bool hasMax)$/;"	f	namespace:WAVM::IR
serialize	Lib/WASM/WASMSerialization.cpp	/^static void serialize(InputStream& stream, BranchTableImm& imm, FunctionDef& functionDef)$/;"	f	file:
serialize	Lib/WASM/WASMSerialization.cpp	/^static void serialize(InputStream& stream, ControlStructureImm& imm, const FunctionDef&)$/;"	f	file:
serialize	Lib/WASM/WASMSerialization.cpp	/^static void serialize(InputStream& stream, SectionType& sectionType)$/;"	f	file:
serialize	Lib/WASM/WASMSerialization.cpp	/^static void serialize(InputStream& stream, UserSection& userSection)$/;"	f	file:
serialize	Lib/WASM/WASMSerialization.cpp	/^static void serialize(OutputStream& stream, BranchTableImm& imm, FunctionDef& functionDef)$/;"	f	file:
serialize	Lib/WASM/WASMSerialization.cpp	/^static void serialize(OutputStream& stream, SectionType sectionType)$/;"	f	file:
serialize	Lib/WASM/WASMSerialization.cpp	/^static void serialize(OutputStream& stream, UserSection& userSection)$/;"	f	file:
serialize	Lib/WASM/WASMSerialization.cpp	/^static void serialize(OutputStream& stream, const ControlStructureImm& imm, const FunctionDef&)$/;"	f	file:
serialize	Lib/WASM/WASMSerialization.cpp	/^template<typename Stream> void serialize(Stream& stream, BranchImm& imm, const FunctionDef&)$/;"	f
serialize	Lib/WASM/WASMSerialization.cpp	/^template<typename Stream> void serialize(Stream& stream, CallIndirectImm& imm, const FunctionDef&)$/;"	f
serialize	Lib/WASM/WASMSerialization.cpp	/^template<typename Stream> void serialize(Stream& stream, DataSegmentImm& imm, const FunctionDef&)$/;"	f
serialize	Lib/WASM/WASMSerialization.cpp	/^template<typename Stream> void serialize(Stream& stream, ElemSegmentImm& imm, const FunctionDef&)$/;"	f
serialize	Lib/WASM/WASMSerialization.cpp	/^template<typename Stream> void serialize(Stream& stream, ExceptionTypeImm& imm, const FunctionDef&)$/;"	f
serialize	Lib/WASM/WASMSerialization.cpp	/^template<typename Stream> void serialize(Stream& stream, FunctionImm& imm, const FunctionDef&)$/;"	f
serialize	Lib/WASM/WASMSerialization.cpp	/^template<typename Stream> void serialize(Stream& stream, LiteralImm<I32>& imm, const FunctionDef&)$/;"	f
serialize	Lib/WASM/WASMSerialization.cpp	/^template<typename Stream> void serialize(Stream& stream, LiteralImm<I64>& imm, const FunctionDef&)$/;"	f
serialize	Lib/WASM/WASMSerialization.cpp	/^template<typename Stream> void serialize(Stream& stream, LocalSet& localSet)$/;"	f
serialize	Lib/WASM/WASMSerialization.cpp	/^template<typename Stream> void serialize(Stream& stream, MemoryCopyImm& imm, const FunctionDef&)$/;"	f
serialize	Lib/WASM/WASMSerialization.cpp	/^template<typename Stream> void serialize(Stream& stream, MemoryImm& imm, const FunctionDef&)$/;"	f
serialize	Lib/WASM/WASMSerialization.cpp	/^template<typename Stream> void serialize(Stream& stream, NoImm&, const FunctionDef&) {}$/;"	f
serialize	Lib/WASM/WASMSerialization.cpp	/^template<typename Stream> void serialize(Stream& stream, RethrowImm& imm, const FunctionDef&)$/;"	f
serialize	Lib/WASM/WASMSerialization.cpp	/^template<typename Stream> void serialize(Stream& stream, TableCopyImm& imm, const FunctionDef&)$/;"	f
serialize	Lib/WASM/WASMSerialization.cpp	/^template<typename Stream> void serialize(Stream& stream, TableImm& imm, const FunctionDef&)$/;"	f
serialize	Lib/WASM/WASMSerialization.cpp	/^template<typename Stream> void serialize(Stream& stream, V128& v128)$/;"	f
serialize	Lib/WASM/WASMSerialization.cpp	/^void WASM::serialize(Serialization::InputStream& stream, Module& module)$/;"	f	class:WASM
serialize	Lib/WASM/WASMSerialization.cpp	/^void WASM::serialize(Serialization::OutputStream& stream, const Module& module)$/;"	f	class:WASM
serialize	Lib/WASM/WASMSerialization.cpp	/^void serialize(Stream& stream, AtomicLoadOrStoreImm<naturalAlignmentLog2>& imm, const FunctionDef&)$/;"	f
serialize	Lib/WASM/WASMSerialization.cpp	/^void serialize(Stream& stream, DataSegmentAndMemImm& imm, const FunctionDef&)$/;"	f
serialize	Lib/WASM/WASMSerialization.cpp	/^void serialize(Stream& stream, ElemSegmentAndTableImm& imm, const FunctionDef&)$/;"	f
serialize	Lib/WASM/WASMSerialization.cpp	/^void serialize(Stream& stream, GetOrSetVariableImm<isGlobal>& imm, const FunctionDef&)$/;"	f
serialize	Lib/WASM/WASMSerialization.cpp	/^void serialize(Stream& stream, LaneIndexImm<numLanes>& imm, const FunctionDef&)$/;"	f
serialize	Lib/WASM/WASMSerialization.cpp	/^void serialize(Stream& stream, LiteralImm<Value>& imm, const FunctionDef&)$/;"	f
serialize	Lib/WASM/WASMSerialization.cpp	/^void serialize(Stream& stream, LoadOrStoreImm<naturalAlignmentLog2>& imm, const FunctionDef&)$/;"	f
serialize	Lib/WASM/WASMSerialization.cpp	/^void serialize(Stream& stream, ShuffleImm<numLanes>& imm, const FunctionDef&)$/;"	f
serializeArray	Include/WAVM/Inline/Serialization.h	/^	void serializeArray(Stream& stream,$/;"	f	namespace:WAVM::Serialization
serializeBytes	Include/WAVM/Inline/Serialization.h	/^	FORCEINLINE void serializeBytes(InputStream& stream, U8* bytes, Uptr numBytes)$/;"	f	namespace:WAVM::Serialization
serializeBytes	Include/WAVM/Inline/Serialization.h	/^	FORCEINLINE void serializeBytes(OutputStream& stream, const U8* bytes, Uptr numBytes)$/;"	f	namespace:WAVM::Serialization
serializeCodeSection	Lib/WASM/WASMSerialization.cpp	/^static void serializeCodeSection(InputStream& moduleStream, Module& module)$/;"	f	file:
serializeCodeSection	Lib/WASM/WASMSerialization.cpp	/^void serializeCodeSection(OutputStream& moduleStream, Module& module)$/;"	f
serializeConstant	Include/WAVM/Inline/Serialization.h	/^	void serializeConstant(InputStream& stream,$/;"	f	namespace:WAVM::Serialization
serializeConstant	Include/WAVM/Inline/Serialization.h	/^	void serializeConstant(OutputStream& stream,$/;"	f	namespace:WAVM::Serialization
serializeDataCountSection	Lib/WASM/WASMSerialization.cpp	/^template<typename Stream> void serializeDataCountSection(Stream& moduleStream, Module& module)$/;"	f
serializeDataSection	Lib/WASM/WASMSerialization.cpp	/^void serializeDataSection(InputStream& moduleStream, Module& module, bool hadDataCountSection)$/;"	f
serializeDataSection	Lib/WASM/WASMSerialization.cpp	/^void serializeDataSection(OutputStream& moduleStream, Module& module)$/;"	f
serializeElementSection	Lib/WASM/WASMSerialization.cpp	/^template<typename Stream> void serializeElementSection(Stream& moduleStream, Module& module)$/;"	f
serializeExceptionTypeSection	Lib/WASM/WASMSerialization.cpp	/^template<typename Stream> void serializeExceptionTypeSection(Stream& moduleStream, Module& module)$/;"	f
serializeExportSection	Lib/WASM/WASMSerialization.cpp	/^template<typename Stream> void serializeExportSection(Stream& moduleStream, Module& module)$/;"	f
serializeFunctionBody	Lib/WASM/WASMSerialization.cpp	/^static void serializeFunctionBody(InputStream& sectionStream,$/;"	f	file:
serializeFunctionBody	Lib/WASM/WASMSerialization.cpp	/^static void serializeFunctionBody(OutputStream& sectionStream,$/;"	f	file:
serializeFunctionSection	Lib/WASM/WASMSerialization.cpp	/^template<typename Stream> void serializeFunctionSection(Stream& moduleStream, Module& module)$/;"	f
serializeGlobalSection	Lib/WASM/WASMSerialization.cpp	/^template<typename Stream> void serializeGlobalSection(Stream& moduleStream, Module& module)$/;"	f
serializeImportSection	Lib/WASM/WASMSerialization.cpp	/^template<typename Stream> void serializeImportSection(Stream& moduleStream, Module& module)$/;"	f
serializeMemorySection	Lib/WASM/WASMSerialization.cpp	/^template<typename Stream> void serializeMemorySection(Stream& moduleStream, Module& module)$/;"	f
serializeModule	Lib/WASM/WASMSerialization.cpp	/^static void serializeModule(InputStream& moduleStream, Module& module)$/;"	f	file:
serializeModule	Lib/WASM/WASMSerialization.cpp	/^static void serializeModule(OutputStream& moduleStream, Module& module)$/;"	f	file:
serializeNameMap	Lib/IR/DisassemblyNames.cpp	/^static void serializeNameMap(OutputStream& stream, const std::vector<std::string>& outNames)$/;"	f	class:NameSubsectionType	file:
serializeNameSubsection	Lib/IR/DisassemblyNames.cpp	/^void serializeNameSubsection(OutputStream& stream,$/;"	f	class:NameSubsectionType	file:
serializeNativeValue	Include/WAVM/Inline/Serialization.h	/^	FORCEINLINE void serializeNativeValue(Stream& stream, Value& value)$/;"	f	namespace:WAVM::Serialization
serializeOpcode	Lib/WASM/WASMSerialization.cpp	/^FORCEINLINE void serializeOpcode(InputStream& stream, Opcode& opcode)$/;"	f
serializeOpcode	Lib/WASM/WASMSerialization.cpp	/^FORCEINLINE void serializeOpcode(OutputStream& stream, Opcode opcode)$/;"	f
serializeSection	Lib/WASM/WASMSerialization.cpp	/^void serializeSection(InputStream& stream, SectionType type, SerializeSection serializeSectionBody)$/;"	f
serializeSection	Lib/WASM/WASMSerialization.cpp	/^void serializeSection(OutputStream& stream, SectionType type, SerializeSection serializeSectionBody)$/;"	f
serializeStartSection	Lib/WASM/WASMSerialization.cpp	/^template<typename Stream> void serializeStartSection(Stream& moduleStream, Module& module)$/;"	f
serializeTableSection	Lib/WASM/WASMSerialization.cpp	/^template<typename Stream> void serializeTableSection(Stream& moduleStream, Module& module)$/;"	f
serializeTypeSection	Lib/WASM/WASMSerialization.cpp	/^template<typename Stream> void serializeTypeSection(Stream& moduleStream, Module& module)$/;"	f
serializeVarInt	Include/WAVM/Inline/Serialization.h	/^	FORCEINLINE void serializeVarInt(InputStream& stream,$/;"	f	namespace:WAVM::Serialization
serializeVarInt	Include/WAVM/Inline/Serialization.h	/^	FORCEINLINE void serializeVarInt(OutputStream& stream,$/;"	f	namespace:WAVM::Serialization
serializeVarInt32	Include/WAVM/Inline/Serialization.h	/^	template<typename Stream, typename Value> void serializeVarInt32(Stream& stream, Value& value)$/;"	f	namespace:WAVM::Serialization
serializeVarInt64	Include/WAVM/Inline/Serialization.h	/^	template<typename Stream, typename Value> void serializeVarInt64(Stream& stream, Value& value)$/;"	f	namespace:WAVM::Serialization
serializeVarInt7	Include/WAVM/Inline/Serialization.h	/^	template<typename Stream, typename Value> void serializeVarInt7(Stream& stream, Value& value)$/;"	f	namespace:WAVM::Serialization
serializeVarUInt1	Include/WAVM/Inline/Serialization.h	/^	template<typename Stream, typename Value> void serializeVarUInt1(Stream& stream, Value& value)$/;"	f	namespace:WAVM::Serialization
serializeVarUInt32	Include/WAVM/Inline/Serialization.h	/^	template<typename Stream, typename Value> void serializeVarUInt32(Stream& stream, Value& value)$/;"	f	namespace:WAVM::Serialization
serializeVarUInt64	Include/WAVM/Inline/Serialization.h	/^	template<typename Stream, typename Value> void serializeVarUInt64(Stream& stream, Value& value)$/;"	f	namespace:WAVM::Serialization
serializeVarUInt7	Include/WAVM/Inline/Serialization.h	/^	template<typename Stream, typename Value> void serializeVarUInt7(Stream& stream, Value& value)$/;"	f	namespace:WAVM::Serialization
serializeVarUInt8	Include/WAVM/Inline/Serialization.h	/^	template<typename Stream, typename Value> void serializeVarUInt8(Stream& stream, Value& value)$/;"	f	namespace:WAVM::Serialization
set	Include/WAVM/Inline/ConcurrentHashMap.h	/^		template<typename... ValueArgs> void set(const Key& key, ValueArgs&&... valueArgs)$/;"	f	struct:WAVM::ConcurrentHashMap
set	Include/WAVM/Inline/HashMapImpl.h	/^Value& HashMap<HASHMAP_ARGUMENTS>::set(const Key& key, ValueArgs&&... valueArgs)$/;"	f	class:HashMap
setCategoryEnabled	Lib/Logging/Logging.cpp	/^void Log::setCategoryEnabled(Category category, bool enable)$/;"	f	class:Log
setCurrentThread	Lib/ThreadTest/ThreadTest.cpp	/^FORCENOINLINE static void setCurrentThread(Thread* thread) { currentThread = thread; }$/;"	f	file:
setDisassemblyNames	Lib/IR/DisassemblyNames.cpp	/^void IR::setDisassemblyNames(Module& module, const DisassemblyNames& names)$/;"	f	class:NameSubsectionType::IR	file:
setEBP	ThirdParty/libunwind/src/Registers.hpp	/^  void      setEBP(uint32_t value) { _registers.__ebp = value; }$/;"	f	class:libunwind::Registers_x86
setEBX	ThirdParty/libunwind/src/Registers.hpp	/^  void      setEBX(uint32_t value) { _registers.__ebx = value; }$/;"	f	class:libunwind::Registers_x86
setECX	ThirdParty/libunwind/src/Registers.hpp	/^  void      setECX(uint32_t value) { _registers.__ecx = value; }$/;"	f	class:libunwind::Registers_x86
setEDI	ThirdParty/libunwind/src/Registers.hpp	/^  void      setEDI(uint32_t value) { _registers.__edi = value; }$/;"	f	class:libunwind::Registers_x86
setEDX	ThirdParty/libunwind/src/Registers.hpp	/^  void      setEDX(uint32_t value) { _registers.__edx = value; }$/;"	f	class:libunwind::Registers_x86
setESI	ThirdParty/libunwind/src/Registers.hpp	/^  void      setESI(uint32_t value) { _registers.__esi = value; }$/;"	f	class:libunwind::Registers_x86
setFP	ThirdParty/libunwind/src/Registers.hpp	/^  void      setFP(uint64_t value) { _registers.__fp = value; }$/;"	f	class:libunwind::Registers_arm64
setFloatReg	ThirdParty/libunwind/src/UnwindCursor.hpp	/^  virtual void setFloatReg(int, unw_fpreg_t) {$/;"	f	class:libunwind::AbstractUnwindCursor
setFloatReg	ThirdParty/libunwind/src/UnwindCursor.hpp	/^void UnwindCursor<A, R>::setFloatReg(int regNum, unw_fpreg_t value) {$/;"	f	class:libunwind::UnwindCursor
setFloatRegister	ThirdParty/libunwind/src/Registers.hpp	/^inline void Registers_arm64::setFloatRegister(int regNum, double value) {$/;"	f	class:libunwind::Registers_arm64
setFloatRegister	ThirdParty/libunwind/src/Registers.hpp	/^inline void Registers_arm::setFloatRegister(int regNum, unw_fpreg_t value) {$/;"	f	class:libunwind::Registers_arm
setFloatRegister	ThirdParty/libunwind/src/Registers.hpp	/^inline void Registers_mips_newabi::setFloatRegister(int \/* regNum *\/,$/;"	f	class:libunwind::Registers_mips_newabi
setFloatRegister	ThirdParty/libunwind/src/Registers.hpp	/^inline void Registers_mips_o32::setFloatRegister(int \/* regNum *\/,$/;"	f	class:libunwind::Registers_mips_o32
setFloatRegister	ThirdParty/libunwind/src/Registers.hpp	/^inline void Registers_or1k::setFloatRegister(int \/* regNum *\/,$/;"	f	class:libunwind::Registers_or1k
setFloatRegister	ThirdParty/libunwind/src/Registers.hpp	/^inline void Registers_ppc64::setFloatRegister(int regNum, double value) {$/;"	f	class:libunwind::Registers_ppc64
setFloatRegister	ThirdParty/libunwind/src/Registers.hpp	/^inline void Registers_ppc::setFloatRegister(int regNum, double value) {$/;"	f	class:libunwind::Registers_ppc
setFloatRegister	ThirdParty/libunwind/src/Registers.hpp	/^inline void Registers_x86::setFloatRegister(int, double) {$/;"	f	class:libunwind::Registers_x86
setFloatRegister	ThirdParty/libunwind/src/Registers.hpp	/^inline void Registers_x86_64::setFloatRegister(int, double) {$/;"	f	class:libunwind::Registers_x86_64
setFramePointerAttribute	Lib/LLVMJIT/LLVMJITPrivate.h	/^	inline void setFramePointerAttribute(llvm::Function* function)$/;"	f	namespace:WAVM::LLVMJIT
setGasLimit	Lib/Emscripten/Emscripten.cpp	/^void Emscripten::setGasLimit(Emscripten::Instance* instance, U64 _gaslimit) {$/;"	f	class:ioStreamVMHandle::Emscripten	file:
setGlobalValue	Lib/Runtime/Global.cpp	/^Value Runtime::setGlobalValue(Context* context, Global* global, Value newValue)$/;"	f	class:Runtime
setIP	ThirdParty/libunwind/src/Registers.hpp	/^  void      setIP(uint32_t value)  { _registers.__eip = value; }$/;"	f	class:libunwind::Registers_x86
setIP	ThirdParty/libunwind/src/Registers.hpp	/^  void      setIP(uint32_t value) { _registers.__pc = value; }$/;"	f	class:libunwind::Registers_arm
setIP	ThirdParty/libunwind/src/Registers.hpp	/^  void      setIP(uint32_t value) { _registers.__pc = value; }$/;"	f	class:libunwind::Registers_mips_o32
setIP	ThirdParty/libunwind/src/Registers.hpp	/^  void      setIP(uint32_t value) { _registers.__r[9] = value; }$/;"	f	class:libunwind::Registers_or1k
setIP	ThirdParty/libunwind/src/Registers.hpp	/^  void      setIP(uint32_t value) { _registers.__srr0 = value; }$/;"	f	class:libunwind::Registers_ppc
setIP	ThirdParty/libunwind/src/Registers.hpp	/^  void      setIP(uint64_t value)  { _registers.__rip = value; }$/;"	f	class:libunwind::Registers_x86_64
setIP	ThirdParty/libunwind/src/Registers.hpp	/^  void      setIP(uint64_t value) { _registers.__pc = value; }$/;"	f	class:libunwind::Registers_arm64
setIP	ThirdParty/libunwind/src/Registers.hpp	/^  void      setIP(uint64_t value) { _registers.__pc = value; }$/;"	f	class:libunwind::Registers_mips_newabi
setIP	ThirdParty/libunwind/src/Registers.hpp	/^  void      setIP(uint64_t value) { _registers.__srr0 = value; }$/;"	f	class:libunwind::Registers_ppc64
setInfoBasedOnIPRegister	ThirdParty/libunwind/src/UnwindCursor.hpp	/^  virtual void setInfoBasedOnIPRegister(bool = false) {$/;"	f	class:libunwind::AbstractUnwindCursor
setInfoBasedOnIPRegister	ThirdParty/libunwind/src/UnwindCursor.hpp	/^void UnwindCursor<A, R>::setInfoBasedOnIPRegister(bool isReturnAddress) {$/;"	f	class:libunwind::UnwindCursor
setR12	ThirdParty/libunwind/src/Registers.hpp	/^  void      setR12(uint64_t value) { _registers.__r12 = value; }$/;"	f	class:libunwind::Registers_x86_64
setR13	ThirdParty/libunwind/src/Registers.hpp	/^  void      setR13(uint64_t value) { _registers.__r13 = value; }$/;"	f	class:libunwind::Registers_x86_64
setR14	ThirdParty/libunwind/src/Registers.hpp	/^  void      setR14(uint64_t value) { _registers.__r14 = value; }$/;"	f	class:libunwind::Registers_x86_64
setR15	ThirdParty/libunwind/src/Registers.hpp	/^  void      setR15(uint64_t value) { _registers.__r15 = value; }$/;"	f	class:libunwind::Registers_x86_64
setRBP	ThirdParty/libunwind/src/Registers.hpp	/^  void      setRBP(uint64_t value) { _registers.__rbp = value; }$/;"	f	class:libunwind::Registers_x86_64
setRBX	ThirdParty/libunwind/src/Registers.hpp	/^  void      setRBX(uint64_t value) { _registers.__rbx = value; }$/;"	f	class:libunwind::Registers_x86_64
setReg	ThirdParty/libunwind/src/UnwindCursor.hpp	/^  virtual void setReg(int, unw_word_t) {$/;"	f	class:libunwind::AbstractUnwindCursor
setReg	ThirdParty/libunwind/src/UnwindCursor.hpp	/^void UnwindCursor<A, R>::setReg(int regNum, unw_word_t value) {$/;"	f	class:libunwind::UnwindCursor
setRegister	ThirdParty/libunwind/src/Registers.hpp	/^inline void Registers_arm64::setRegister(int regNum, uint64_t value) {$/;"	f	class:libunwind::Registers_arm64
setRegister	ThirdParty/libunwind/src/Registers.hpp	/^inline void Registers_arm::setRegister(int regNum, uint32_t value) {$/;"	f	class:libunwind::Registers_arm
setRegister	ThirdParty/libunwind/src/Registers.hpp	/^inline void Registers_mips_newabi::setRegister(int regNum, uint64_t value) {$/;"	f	class:libunwind::Registers_mips_newabi
setRegister	ThirdParty/libunwind/src/Registers.hpp	/^inline void Registers_mips_o32::setRegister(int regNum, uint32_t value) {$/;"	f	class:libunwind::Registers_mips_o32
setRegister	ThirdParty/libunwind/src/Registers.hpp	/^inline void Registers_or1k::setRegister(int regNum, uint32_t value) {$/;"	f	class:libunwind::Registers_or1k
setRegister	ThirdParty/libunwind/src/Registers.hpp	/^inline void Registers_ppc64::setRegister(int regNum, uint64_t value) {$/;"	f	class:libunwind::Registers_ppc64
setRegister	ThirdParty/libunwind/src/Registers.hpp	/^inline void Registers_ppc::setRegister(int regNum, uint32_t value) {$/;"	f	class:libunwind::Registers_ppc
setRegister	ThirdParty/libunwind/src/Registers.hpp	/^inline void Registers_x86::setRegister(int regNum, uint32_t value) {$/;"	f	class:libunwind::Registers_x86
setRegister	ThirdParty/libunwind/src/Registers.hpp	/^inline void Registers_x86_64::setRegister(int regNum, uint64_t value) {$/;"	f	class:libunwind::Registers_x86_64
setRuntimeFunctionPrefix	Lib/LLVMJIT/LLVMJITPrivate.h	/^	inline void setRuntimeFunctionPrefix(LLVMContext& llvmContext,$/;"	f	namespace:WAVM::LLVMJIT
setSP	ThirdParty/libunwind/src/Registers.hpp	/^  void      setSP(uint32_t value)  { _registers.__esp = value; }$/;"	f	class:libunwind::Registers_x86
setSP	ThirdParty/libunwind/src/Registers.hpp	/^  void      setSP(uint32_t value) { _registers.__r1 = value; }$/;"	f	class:libunwind::Registers_ppc
setSP	ThirdParty/libunwind/src/Registers.hpp	/^  void      setSP(uint32_t value) { _registers.__r[1] = value; }$/;"	f	class:libunwind::Registers_or1k
setSP	ThirdParty/libunwind/src/Registers.hpp	/^  void      setSP(uint32_t value) { _registers.__r[29] = value; }$/;"	f	class:libunwind::Registers_mips_o32
setSP	ThirdParty/libunwind/src/Registers.hpp	/^  void      setSP(uint32_t value) { _registers.__sp = value; }$/;"	f	class:libunwind::Registers_arm
setSP	ThirdParty/libunwind/src/Registers.hpp	/^  void      setSP(uint64_t value)  { _registers.__rsp = value; }$/;"	f	class:libunwind::Registers_x86_64
setSP	ThirdParty/libunwind/src/Registers.hpp	/^  void      setSP(uint64_t value) { _registers.__r1 = value; }$/;"	f	class:libunwind::Registers_ppc64
setSP	ThirdParty/libunwind/src/Registers.hpp	/^  void      setSP(uint64_t value) { _registers.__r[29] = value; }$/;"	f	class:libunwind::Registers_mips_newabi
setSP	ThirdParty/libunwind/src/Registers.hpp	/^  void      setSP(uint64_t value) { _registers.__sp = value; }$/;"	f	class:libunwind::Registers_arm64
setTableElement	Lib/Runtime/Table.cpp	/^Object* Runtime::setTableElement(Table* table, Uptr index, Object* newValue)$/;"	f	class:Runtime
setTableElementNonNull	Lib/Runtime/Table.cpp	/^static Object* setTableElementNonNull(Table* table, Uptr index, Object* object)$/;"	f	file:
setTraceSyscalls	Lib/WASI/WASI.cpp	/^void WASI::setTraceSyscalls(bool newTraceSyscalls)$/;"	f	class:WASI
setUserData	Lib/Runtime/Runtime.cpp	/^void Runtime::setUserData(Runtime::Function* function, void* userData)$/;"	f	class:Runtime
setVectorRegister	ThirdParty/libunwind/src/Registers.hpp	/^inline void Registers_arm64::setVectorRegister(int, v128) {$/;"	f	class:libunwind::Registers_arm64
setVectorRegister	ThirdParty/libunwind/src/Registers.hpp	/^inline void Registers_arm::setVectorRegister(int, v128) {$/;"	f	class:libunwind::Registers_arm
setVectorRegister	ThirdParty/libunwind/src/Registers.hpp	/^inline void Registers_mips_newabi::setVectorRegister(int \/* regNum *\/, v128 \/* value *\/) {$/;"	f	class:libunwind::Registers_mips_newabi
setVectorRegister	ThirdParty/libunwind/src/Registers.hpp	/^inline void Registers_mips_o32::setVectorRegister(int \/* regNum *\/, v128 \/* value *\/) {$/;"	f	class:libunwind::Registers_mips_o32
setVectorRegister	ThirdParty/libunwind/src/Registers.hpp	/^inline void Registers_or1k::setVectorRegister(int \/* regNum *\/, v128 \/* value *\/) {$/;"	f	class:libunwind::Registers_or1k
setVectorRegister	ThirdParty/libunwind/src/Registers.hpp	/^inline void Registers_ppc64::setVectorRegister(int regNum, v128 value) {$/;"	f	class:libunwind::Registers_ppc64
setVectorRegister	ThirdParty/libunwind/src/Registers.hpp	/^inline void Registers_ppc::setVectorRegister(int regNum, v128 value) {$/;"	f	class:libunwind::Registers_ppc
setVectorRegister	ThirdParty/libunwind/src/Registers.hpp	/^inline void Registers_x86::setVectorRegister(int, v128) {$/;"	f	class:libunwind::Registers_x86
setVectorRegister	ThirdParty/libunwind/src/Registers.hpp	/^inline void Registers_x86_64::setVectorRegister(int regNum, v128 value) {$/;"	f	class:libunwind::Registers_x86_64
setVirtualPageAccess	Lib/Platform/POSIX/Memory.cpp	/^bool Platform::setVirtualPageAccess(U8* baseVirtualAddress, Uptr numPages, MemoryAccess access)$/;"	f	class:Platform
setVirtualPageAccess	Lib/Platform/Windows/Memory.cpp	/^bool Platform::setVirtualPageAccess(U8* baseVirtualAddress, Uptr numPages, MemoryAccess access)$/;"	f	class:Platform
set_ctxid	ThirdParty/bridge/rpc_inproc.cpp	/^void XChainServiceClient::set_ctxid(int64_t ctxid) {$/;"	f	class:xchain::XChainServiceClient
sext	Lib/LLVMJIT/EmitFunctionContext.h	/^		llvm::Value* sext(llvm::Value* value, llvm::Type* type)$/;"	f	struct:WAVM::LLVMJIT::EmitFunctionContext
sharedTables	Include/WAVM/IR/IR.h	/^		bool sharedTables = true;$/;"	m	struct:WAVM::IR::FeatureSpec
showHelp	Programs/wavm-run-wasi/wavm-run-wasi.cpp	/^static void showHelp()$/;"	f	file:
showHelp	Programs/wavm-run/wavm-run.cpp	/^static void showHelp()$/;"	f	file:
showHelp	Test/RunTestScript/RunTestScript.cpp	/^static void showHelp()$/;"	f	file:
show_authors	ThirdParty/libunwind/docs/conf.py	/^show_authors = True$/;"	v
shrAndRoundUp	Lib/LLVMJIT/LLVMModule.cpp	/^	static Uptr shrAndRoundUp(Uptr value, Uptr shift)$/;"	f	struct:LLVMJIT::ModuleMemoryManager	file:
shrinkMemory	Lib/Runtime/Memory.cpp	/^Iptr Runtime::shrinkMemory(Memory* memory, Uptr numPagesToShrink)$/;"	f	class:Runtime
shrinkTable	Lib/Runtime/Table.cpp	/^Iptr Runtime::shrinkTable(Table* table, Uptr numElementsToShrink)$/;"	f	class:Runtime
sig	Lib/Runtime/RuntimePrivate.h	/^		IR::ExceptionType sig;$/;"	m	struct:WAVM::Runtime::ExceptionType
sig	Test/fuzz/fuzz-compile-model.cpp	/^	FunctionType (*sig)();$/;"	m	struct:OperatorInfo	file:
sigAltStack	Lib/Platform/POSIX/Thread.cpp	/^thread_local SigAltStack Platform::sigAltStack;$/;"	m	class:Platform	file:
sigAltStackNumBytes	Lib/Platform/POSIX/Thread.cpp	/^	sigAltStackNumBytes = 65536$/;"	e	enum:__anon40	file:
sigil	Lib/WASTPrint/Print.cpp	/^	char sigil;$/;"	m	struct:NameScope	file:
sign	Include/WAVM/Inline/FloatComponents.h	/^				U32 sign : 1;$/;"	m	struct:__anon27::__anon28
sign	Include/WAVM/Inline/FloatComponents.h	/^				U64 sign : 1;$/;"	m	struct:WAVM::__anon25::__anon26
sign	ThirdParty/dtoa/dtoa.c	/^	int k, maxwds, sign, wds;$/;"	m	struct:Bigint	file:
signExtendPrel31	ThirdParty/libunwind/src/Unwind-EHABI.h	/^static inline uint32_t signExtendPrel31(uint32_t data) {$/;"	f
signal	Lib/Platform/POSIX/Event.cpp	/^void Platform::Event::signal() { errorUnless(!pthread_cond_signal((pthread_cond_t*)&pthreadCond)); }$/;"	f	class:Platform::Event
signal	Lib/Platform/Windows/Event.cpp	/^void Platform::Event::signal() { errorUnless(SetEvent(handle)); }$/;"	f	class:Platform::Event
signalHandler	Lib/Platform/POSIX/Signal.cpp	/^[[noreturn]] static void signalHandler(int signalNumber, siginfo_t* signalInfo, void*)$/;"	f	file:
significand	Include/WAVM/Inline/FloatComponents.h	/^				U32 significand : 23;$/;"	m	struct:__anon27::__anon28
significand	Include/WAVM/Inline/FloatComponents.h	/^				U64 significand : 52;$/;"	m	struct:WAVM::__anon25::__anon26
simd	Include/WAVM/IR/IR.h	/^		bool simd = true;$/;"	m	struct:WAVM::IR::FeatureSpec
sint_t	ThirdParty/libunwind/src/AddressSpace.hpp	/^  typedef intptr_t  sint_t;$/;"	t	class:libunwind::LocalAddressSpace
sint_t	ThirdParty/libunwind/src/DwarfInstructions.hpp	/^  typedef typename A::sint_t sint_t;$/;"	t	class:libunwind::DwarfInstructions
size	Include/WAVM/IR/Module.h	/^		Uptr size() const { return imports.size() + defs.size(); }$/;"	f	struct:WAVM::IR::Opcode::Elem::IndexSpace
size	Include/WAVM/IR/Types.h	/^		SizeConstraints size;$/;"	m	struct:WAVM::IR::ValueType::MemoryType
size	Include/WAVM/IR/Types.h	/^		SizeConstraints size;$/;"	m	struct:WAVM::IR::ValueType::TableType
size	Include/WAVM/IR/Types.h	/^		Uptr size() const { return impl->numElems; }$/;"	f	struct:WAVM::IR::ValueType::TypeTuple
size	Include/WAVM/IR/Value.h	/^		Uptr size() const { return values.size(); }$/;"	f	struct:WAVM::IR::ValueTuple
size	Include/WAVM/Inline/HashMapImpl.h	/^template<HASHMAP_PARAMETERS> Uptr HashMap<HASHMAP_ARGUMENTS>::size() const { return table.size(); }$/;"	f	class:HashMap
size	Include/WAVM/Inline/HashSetImpl.h	/^Uptr HashSet<Element, ElementHashPolicy>::size() const$/;"	f	class:HashSet
size	Include/WAVM/Inline/HashTable.h	/^		Uptr size() const { return numElements; }$/;"	f	struct:WAVM::HashTable
size	Include/WAVM/Inline/IndexMap.h	/^		Uptr size() const { return map.size(); }$/;"	f	struct:WAVM::IndexMap
size_type	ThirdParty/libunwind/src/UnwindCursor.hpp	/^  typedef size_t size_type;$/;"	t	struct:libunwind::EHABISectionIterator
sourceLine	Include/WAVM/WASTParse/WASTParse.h	/^		std::string sourceLine;$/;"	m	struct:WAVM::WAST::TextFileLocus
sourceMemoryIndex	Include/WAVM/IR/Operators.h	/^		Uptr sourceMemoryIndex;$/;"	m	struct:WAVM::IR::MemoryCopyImm
sourceOffset	Lib/WASTParse/Parse.h	/^		U32 sourceOffset;$/;"	m	struct:WAVM::WAST::Name
sourceTableIndex	Include/WAVM/IR/Operators.h	/^		Uptr sourceTableIndex;$/;"	m	struct:WAVM::IR::TableCopyImm
source_suffix	ThirdParty/libunwind/docs/conf.py	/^source_suffix = '.rst'$/;"	v
sp	ThirdParty/libunwind/include/unwind.h	/^    uint32_t sp;$/;"	m	struct:_Unwind_Control_Block::__anon57
spExtraArgSize	ThirdParty/libunwind/src/DwarfParser.hpp	/^    uint32_t          spExtraArgSize;$/;"	m	struct:libunwind::CFI_Parser::PrologInfo
spare	ThirdParty/libunwind/src/Unwind_AppleExtras.cpp	/^  unsigned         spare[2];$/;"	m	struct:libgcc_object_info	file:
ss	Lib/Platform/Windows/WindowsPrivate.h	/^	U16 ss;$/;"	m	struct:ExecutionContext
st_atim	Lib/WASI/WASIDefinitions.h	/^	__wasi_timestamp_t st_atim;$/;"	m	struct:__wasi_filestat_t
st_ctim	Lib/WASI/WASIDefinitions.h	/^	__wasi_timestamp_t st_ctim;$/;"	m	struct:__wasi_filestat_t
st_dev	Lib/WASI/WASIDefinitions.h	/^	__wasi_device_t st_dev;$/;"	m	struct:__wasi_filestat_t
st_filetype	Lib/WASI/WASIDefinitions.h	/^	__wasi_filetype_t st_filetype;$/;"	m	struct:__wasi_filestat_t
st_ino	Lib/WASI/WASIDefinitions.h	/^	__wasi_inode_t st_ino;$/;"	m	struct:__wasi_filestat_t
st_mtim	Lib/WASI/WASIDefinitions.h	/^	__wasi_timestamp_t st_mtim;$/;"	m	struct:__wasi_filestat_t
st_nlink	Lib/WASI/WASIDefinitions.h	/^	__wasi_linkcount_t st_nlink;$/;"	m	struct:__wasi_filestat_t
st_size	Lib/WASI/WASIDefinitions.h	/^	__wasi_filesize_t st_size;$/;"	m	struct:__wasi_filestat_t
stack	Lib/IR/Validate.cpp	/^	std::vector<ValueType> stack;$/;"	m	struct:FunctionValidationContext	file:
stack	Lib/LLVMJIT/EmitFunctionContext.h	/^		std::vector<llvm::Value*> stack;$/;"	m	struct:WAVM::LLVMJIT::EmitFunctionContext
stack	ThirdParty/libunwind/src/Unwind-sjlj.c	/^static _LIBUNWIND_THREAD_LOCAL struct _Unwind_FunctionContext *stack = NULL;$/;"	v	typeref:struct:_Unwind_FunctionContext	file:
stackFrames	Include/WAVM/Platform/Diagnostics.h	/^		std::vector<Frame> stackFrames;$/;"	m	struct:WAVM::Platform::CallStack
stackMaxAddr	Lib/Platform/POSIX/POSIXPrivate.h	/^		U8* stackMaxAddr;$/;"	m	struct:WAVM::Platform::SigAltStack
stackMinAddr	Lib/Platform/POSIX/POSIXPrivate.h	/^		U8* stackMinAddr;$/;"	m	struct:WAVM::Platform::SigAltStack
stackMinGuardAddr	Lib/Platform/POSIX/POSIXPrivate.h	/^		U8* stackMinGuardAddr;$/;"	m	struct:WAVM::Platform::SigAltStack
stackOverflow	Include/WAVM/Platform/Signal.h	/^			stackOverflow,$/;"	m	class:WAVM::Platform::Signal::Type
stackOverflow	Include/WAVM/WASTParse/TestScript.h	/^		stackOverflow,$/;"	m	class:WAVM::WAST::ExpectedTrapType
start	Lib/WASM/WASMSerialization.cpp	/^	start,$/;"	m	class:SectionType	file:
start	ThirdParty/libunwind/src/Unwind_AppleExtras.cpp	/^  void          *start;$/;"	m	struct:libgcc_object	file:
startFunction	Lib/Runtime/RuntimePrivate.h	/^		Function* const startFunction;$/;"	m	struct:WAVM::Runtime::ModuleInstance
startFunctionIndex	Include/WAVM/IR/Module.h	/^		Uptr startFunctionIndex;$/;"	m	struct:WAVM::IR::Opcode::Elem::Module
startTime	Include/WAVM/Inline/Timing.h	/^		std::chrono::high_resolution_clock::time_point startTime;$/;"	m	struct:WAVM::Timing::Timer
start_ip	ThirdParty/libunwind/include/libunwind.h	/^  unw_word_t  start_ip;         \/* start address of function *\/$/;"	m	struct:unw_proc_info_t
state	Test/RunTestScript/RunTestScript.cpp	/^	const TestScriptState& state;$/;"	m	struct:TestScriptResolver	file:
stateAndOffsetToNextStateMap	Include/WAVM/NFA/NFA.h	/^		InternalStateIndex* stateAndOffsetToNextStateMap;$/;"	m	struct:WAVM::NFA::Machine
static_assert	ThirdParty/libunwind/src/config.h	/^  #define static_assert(/;"	d
step	ThirdParty/libunwind/src/UnwindCursor.hpp	/^  virtual int step() { _LIBUNWIND_ABORT("step not implemented"); }$/;"	f	class:libunwind::AbstractUnwindCursor
step	ThirdParty/libunwind/src/UnwindCursor.hpp	/^int UnwindCursor<A, R>::step() {$/;"	f	class:libunwind::UnwindCursor
stepWithCompactEncoding	ThirdParty/libunwind/src/CompactUnwinder.hpp	/^int CompactUnwinder_arm64<A>::stepWithCompactEncoding($/;"	f	class:libunwind::CompactUnwinder_arm64
stepWithCompactEncoding	ThirdParty/libunwind/src/CompactUnwinder.hpp	/^int CompactUnwinder_x86<A>::stepWithCompactEncoding($/;"	f	class:libunwind::CompactUnwinder_x86
stepWithCompactEncoding	ThirdParty/libunwind/src/CompactUnwinder.hpp	/^int CompactUnwinder_x86_64<A>::stepWithCompactEncoding($/;"	f	class:libunwind::CompactUnwinder_x86_64
stepWithCompactEncoding	ThirdParty/libunwind/src/UnwindCursor.hpp	/^  int stepWithCompactEncoding() {$/;"	f	class:libunwind::UnwindCursor
stepWithCompactEncoding	ThirdParty/libunwind/src/UnwindCursor.hpp	/^  int stepWithCompactEncoding(Registers_arm64 &) {$/;"	f	class:libunwind::UnwindCursor
stepWithCompactEncoding	ThirdParty/libunwind/src/UnwindCursor.hpp	/^  int stepWithCompactEncoding(Registers_mips_newabi &) {$/;"	f	class:libunwind::UnwindCursor
stepWithCompactEncoding	ThirdParty/libunwind/src/UnwindCursor.hpp	/^  int stepWithCompactEncoding(Registers_mips_o32 &) {$/;"	f	class:libunwind::UnwindCursor
stepWithCompactEncoding	ThirdParty/libunwind/src/UnwindCursor.hpp	/^  int stepWithCompactEncoding(Registers_ppc &) {$/;"	f	class:libunwind::UnwindCursor
stepWithCompactEncoding	ThirdParty/libunwind/src/UnwindCursor.hpp	/^  int stepWithCompactEncoding(Registers_ppc64 &) {$/;"	f	class:libunwind::UnwindCursor
stepWithCompactEncoding	ThirdParty/libunwind/src/UnwindCursor.hpp	/^  int stepWithCompactEncoding(Registers_x86 &) {$/;"	f	class:libunwind::UnwindCursor
stepWithCompactEncoding	ThirdParty/libunwind/src/UnwindCursor.hpp	/^  int stepWithCompactEncoding(Registers_x86_64 &) {$/;"	f	class:libunwind::UnwindCursor
stepWithCompactEncodingEBPFrame	ThirdParty/libunwind/src/CompactUnwinder.hpp	/^int CompactUnwinder_x86<A>::stepWithCompactEncodingEBPFrame($/;"	f	class:libunwind::CompactUnwinder_x86
stepWithCompactEncodingFrame	ThirdParty/libunwind/src/CompactUnwinder.hpp	/^int CompactUnwinder_arm64<A>::stepWithCompactEncodingFrame($/;"	f	class:libunwind::CompactUnwinder_arm64
stepWithCompactEncodingFrameless	ThirdParty/libunwind/src/CompactUnwinder.hpp	/^int CompactUnwinder_arm64<A>::stepWithCompactEncodingFrameless($/;"	f	class:libunwind::CompactUnwinder_arm64
stepWithCompactEncodingFrameless	ThirdParty/libunwind/src/CompactUnwinder.hpp	/^int CompactUnwinder_x86<A>::stepWithCompactEncodingFrameless($/;"	f	class:libunwind::CompactUnwinder_x86
stepWithCompactEncodingFrameless	ThirdParty/libunwind/src/CompactUnwinder.hpp	/^int CompactUnwinder_x86_64<A>::stepWithCompactEncodingFrameless($/;"	f	class:libunwind::CompactUnwinder_x86_64
stepWithCompactEncodingRBPFrame	ThirdParty/libunwind/src/CompactUnwinder.hpp	/^int CompactUnwinder_x86_64<A>::stepWithCompactEncodingRBPFrame($/;"	f	class:libunwind::CompactUnwinder_x86_64
stepWithDwarf	ThirdParty/libunwind/src/DwarfInstructions.hpp	/^int DwarfInstructions<A, R>::stepWithDwarf(A &addressSpace, pint_t pc,$/;"	f	class:libunwind::DwarfInstructions
stepWithDwarfFDE	ThirdParty/libunwind/src/UnwindCursor.hpp	/^  int stepWithDwarfFDE() {$/;"	f	class:libunwind::UnwindCursor
stepWithEHABI	ThirdParty/libunwind/src/UnwindCursor.hpp	/^  int stepWithEHABI() {$/;"	f	class:libunwind::UnwindCursor
stop	Include/WAVM/Inline/Timing.h	/^		void stop() { endTime = std::chrono::high_resolution_clock::now(); }$/;"	f	struct:WAVM::Timing::Timer
storage	Include/WAVM/Inline/HashTable.h	/^		OptionalStorage<Element> storage;$/;"	m	struct:WAVM::HashTableBucket
storeToUntypedPointer	Lib/LLVMJIT/EmitContext.h	/^		void storeToUntypedPointer(llvm::Value* value, llvm::Value* pointer, U32 alignment = 1)$/;"	f	struct:WAVM::LLVMJIT::EmitContext
string	Lib/WASTParse/Parse.h	/^		const char* string;$/;"	m	struct:WAVM::WAST::ParseState
string	Lib/WASTPrint/Print.cpp	/^	std::string& string;$/;"	m	struct:FunctionPrintContext	file:
string	Lib/WASTPrint/Print.cpp	/^	std::string& string;$/;"	m	struct:ModulePrintContext	file:
string	Lib/WASTPrint/Print.cpp	/^	std::string& string;$/;"	m	struct:ScopedTagPrinter	file:
stringStartsWith	Lib/WASTParse/ParseTests.cpp	/^static bool stringStartsWith(const char* string, const char (&prefix)[numPrefixChars])$/;"	f	file:
stripes	Include/WAVM/Inline/ConcurrentHashMap.h	/^		Stripe stripes[numStripes];$/;"	m	struct:WAVM::ConcurrentHashMap
strtod	Lib/WASTParse/ParseNumbers.cpp	/^#define strtod /;"	d	file:
strtod	Lib/WASTParse/ParseNumbers.cpp	/^#undef strtod$/;"	d	file:
strtod_diglim	ThirdParty/dtoa/dtoa.c	/^#define strtod_diglim /;"	d	file:
sub	Examples/gas.cpp	/^uint64_t sub(uint64_t b) {$/;"	f
success	Include/WAVM/Runtime/Linker.h	/^		bool success;$/;"	m	struct:WAVM::Runtime::LinkResult
success	Include/WAVM/WASI/WASI.h	/^		success = 0,$/;"	m	class:WAVM::WASI::RunResult
switchToForkedStackContext	Lib/Platform/Windows/Win64.asm	/^switchToForkedStackContext PROC FRAME$/;"	l
symFromAddr	Lib/Platform/Windows/Diagnostics.cpp	/^	SymFromAddr symFromAddr;$/;"	m	struct:DbgHelp	file:
sys	ThirdParty/libunwind/docs/conf.py	/^import sys, os$/;"	i
sys	ThirdParty/libunwind/test/libunwind/test/config.py	/^import sys$/;"	i
table	Include/WAVM/IR/Types.h	/^			TableType table;$/;"	m	union:WAVM::IR::ValueType::ExternType::__anon7
table	Include/WAVM/IR/Types.h	/^		table = 1,$/;"	m	class:WAVM::IR::ValueType::ExternKind
table	Include/WAVM/Inline/HashMap.h	/^		HashTable<Key, Pair, HashTablePolicy> table;$/;"	m	struct:WAVM::HashMap
table	Include/WAVM/Inline/HashSet.h	/^		HashTable<Element, Element, HashTablePolicy> table;$/;"	m	struct:WAVM::HashSet
table	Include/WAVM/Runtime/RuntimeData.h	/^		table = 1,$/;"	m	class:WAVM::Runtime::ObjectKind
table	Lib/IR/DisassemblyNames.cpp	/^	table = 5,$/;"	m	class:NameSubsectionType	file:
table	Lib/WASM/WASMSerialization.cpp	/^	table,$/;"	m	class:SectionType	file:
table	ThirdParty/libunwind/src/EHHeaderParser.hpp	/^    pint_t table;$/;"	m	struct:libunwind::EHHeaderParser::EHHeaderInfo
tableBases	Include/WAVM/Runtime/RuntimeData.h	/^		void* tableBases[maxTables];$/;"	m	struct:WAVM::Runtime::CompartmentRuntimeData
tableIndex	Include/WAVM/IR/Module.h	/^		Uptr tableIndex;$/;"	m	struct:WAVM::IR::Opcode::Elem::ElemSegment
tableIndex	Include/WAVM/IR/Operators.h	/^		Uptr tableIndex;$/;"	m	struct:WAVM::IR::CallIndirectImm
tableIndex	Include/WAVM/IR/Operators.h	/^		Uptr tableIndex;$/;"	m	struct:WAVM::IR::ElemSegmentAndTableImm
tableIndex	Include/WAVM/IR/Operators.h	/^		Uptr tableIndex;$/;"	m	struct:WAVM::IR::TableImm
tableMap	Lib/Runtime/Intrinsics.cpp	/^		HashMap<std::string, Intrinsics::Table*> tableMap;$/;"	m	struct:WAVM::Intrinsics::ModuleImpl	file:
tableNameToIndexMap	Lib/WASTParse/Parse.h	/^		NameToIndexMap tableNameToIndexMap;$/;"	m	struct:WAVM::WAST::ModuleState
tableOffsets	Lib/LLVMJIT/EmitModuleContext.h	/^		std::vector<llvm::Constant*> tableOffsets;$/;"	m	struct:WAVM::LLVMJIT::EmitModuleContext
tableReferenceBias	Lib/LLVMJIT/EmitModuleContext.h	/^		llvm::Constant* tableReferenceBias;$/;"	m	struct:WAVM::LLVMJIT::EmitModuleContext
table_copy	Lib/LLVMJIT/EmitTable.cpp	/^void EmitFunctionContext::table_copy(TableCopyImm imm)$/;"	f	class:EmitFunctionContext
table_enc	ThirdParty/libunwind/src/EHHeaderParser.hpp	/^    uint8_t table_enc;$/;"	m	struct:libunwind::EHHeaderParser::EHHeaderInfo
table_fill	Include/WAVM/Emscripten/gas-visit-context.h	/^    Result table_fill(TableImm imm)$/;"	f	struct:GasVisitor
table_fill	Lib/IR/Validate.cpp	/^	void table_fill(TableImm imm)$/;"	f	struct:FunctionValidationContext
table_fill	Lib/LLVMJIT/EmitTable.cpp	/^void EmitFunctionContext::table_fill(TableImm imm)$/;"	f	class:EmitFunctionContext
table_fill	Lib/WASTPrint/Print.cpp	/^	void table_fill(TableImm imm)$/;"	f	struct:FunctionPrintContext
table_get	Include/WAVM/Emscripten/gas-visit-context.h	/^    Result table_get(TableImm imm)$/;"	f	struct:GasVisitor
table_get	Lib/IR/Validate.cpp	/^	void table_get(TableImm imm)$/;"	f	struct:FunctionValidationContext
table_get	Lib/LLVMJIT/EmitTable.cpp	/^void EmitFunctionContext::table_get(TableImm imm)$/;"	f	class:EmitFunctionContext
table_get	Lib/WASTPrint/Print.cpp	/^	void table_get(TableImm imm)$/;"	f	struct:FunctionPrintContext
table_grow	Include/WAVM/Emscripten/gas-visit-context.h	/^    Result table_grow(TableImm imm)$/;"	f	struct:GasVisitor
table_grow	Lib/IR/Validate.cpp	/^	void table_grow(TableImm imm)$/;"	f	struct:FunctionValidationContext
table_grow	Lib/LLVMJIT/EmitTable.cpp	/^void EmitFunctionContext::table_grow(TableImm imm)$/;"	f	class:EmitFunctionContext
table_grow	Lib/WASTPrint/Print.cpp	/^	void table_grow(TableImm imm)$/;"	f	struct:FunctionPrintContext
table_init	Lib/LLVMJIT/EmitTable.cpp	/^void EmitFunctionContext::table_init(ElemSegmentAndTableImm imm)$/;"	f	class:EmitFunctionContext
table_set	Include/WAVM/Emscripten/gas-visit-context.h	/^    Result table_set(TableImm imm)$/;"	f	struct:GasVisitor
table_set	Lib/IR/Validate.cpp	/^	void table_set(TableImm imm)$/;"	f	struct:FunctionValidationContext
table_set	Lib/LLVMJIT/EmitTable.cpp	/^void EmitFunctionContext::table_set(TableImm imm)$/;"	f	class:EmitFunctionContext
table_set	Lib/WASTPrint/Print.cpp	/^	void table_set(TableImm imm)$/;"	f	struct:FunctionPrintContext
table_size	Lib/LLVMJIT/EmitTable.cpp	/^void EmitFunctionContext::table_size(TableImm imm)$/;"	f	class:EmitFunctionContext
tables	Include/WAVM/IR/Module.h	/^		IndexSpace<TableDef, TableType> tables;$/;"	m	struct:WAVM::IR::Opcode::Elem::Module
tables	Include/WAVM/IR/Module.h	/^		std::vector<std::string> tables;$/;"	m	struct:WAVM::IR::Opcode::Elem::DisassemblyNames
tables	Include/WAVM/Runtime/Runtime.h	/^		std::vector<Table*> tables;$/;"	m	struct:WAVM::Runtime::ImportBindings
tables	Lib/Runtime/RuntimePrivate.h	/^		IndexMap<Uptr, Table*> tables;$/;"	m	struct:WAVM::Runtime::Compartment
tables	Lib/Runtime/RuntimePrivate.h	/^		const std::vector<Table*> tables;$/;"	m	struct:WAVM::Runtime::ModuleInstance
tables	Lib/Runtime/Table.cpp	/^static std::vector<Table*> tables;$/;"	v	file:
tablesMutex	Lib/Runtime/Table.cpp	/^static Platform::Mutex tablesMutex;$/;"	v	file:
tabs	Include/WAVM/WASTParse/WASTParse.h	/^		U32 tabs;$/;"	m	struct:WAVM::WAST::TextFileLocus
targetDepth	Include/WAVM/IR/Operators.h	/^		Uptr targetDepth;$/;"	m	struct:WAVM::IR::BranchImm
taskPort	ThirdParty/libunwind/src/AddressSpace.hpp	/^  task_t taskPort;$/;"	m	struct:libunwind::unw_addr_space
tbase	ThirdParty/libunwind/include/unwind.h	/^  uintptr_t tbase;$/;"	m	struct:dwarf_eh_bases
tempDoublePtr	Lib/Emscripten/Emscripten.cpp	/^	F64 tempDoublePtr;$/;"	m	struct:MutableGlobals	file:
templates_path	ThirdParty/libunwind/docs/conf.py	/^templates_path = ['_templates']$/;"	v
test	ThirdParty/libunwind/test/libunwind_02.pass.cpp	/^int test(int i) {$/;"	f
test1	ThirdParty/libunwind/test/libunwind_01.pass.cpp	/^void test1(int i) {$/;"	f
test2	ThirdParty/libunwind/test/libunwind_01.pass.cpp	/^void test2(int i, int j) {$/;"	f
test3	ThirdParty/libunwind/test/libunwind_01.pass.cpp	/^void test3(int i, int j, int k) {$/;"	f
testErrorf	Test/RunTestScript/RunTestScript.cpp	/^static void testErrorf(TestScriptState& state,$/;"	f	file:
testMapBracketOperator	Test/Containers/HashMapTest.cpp	/^static void testMapBracketOperator()$/;"	f	file:
testMapCopy	Test/Containers/HashMapTest.cpp	/^static void testMapCopy()$/;"	f	file:
testMapEmplace	Test/Containers/HashMapTest.cpp	/^static void testMapEmplace()$/;"	f	file:
testMapGetOrAdd	Test/Containers/HashMapTest.cpp	/^static void testMapGetOrAdd()$/;"	f	file:
testMapInitializerList	Test/Containers/HashMapTest.cpp	/^static void testMapInitializerList()$/;"	f	file:
testMapIterator	Test/Containers/HashMapTest.cpp	/^static void testMapIterator()$/;"	f	file:
testMapMove	Test/Containers/HashMapTest.cpp	/^static void testMapMove()$/;"	f	file:
testMapSet	Test/Containers/HashMapTest.cpp	/^static void testMapSet()$/;"	f	file:
testSetBracketOperator	Test/Containers/HashSetTest.cpp	/^static void testSetBracketOperator()$/;"	f	file:
testSetCopy	Test/Containers/HashSetTest.cpp	/^static void testSetCopy()$/;"	f	file:
testSetInitializerList	Test/Containers/HashSetTest.cpp	/^static void testSetInitializerList()$/;"	f	file:
testSetIterator	Test/Containers/HashSetTest.cpp	/^static void testSetIterator()$/;"	f	file:
testSetMove	Test/Containers/HashSetTest.cpp	/^static void testSetMove()$/;"	f	file:
testStringMap	Test/Containers/HashMapTest.cpp	/^static void testStringMap()$/;"	f	file:
testStringSet	Test/Containers/HashSetTest.cpp	/^static void testStringSet()$/;"	f	file:
testU32Map	Test/Containers/HashMapTest.cpp	/^static void testU32Map()$/;"	f	file:
testU32Set	Test/Containers/HashSetTest.cpp	/^static void testU32Set()$/;"	f	file:
test_backtrace	ThirdParty/libunwind/test/libunwind_02.pass.cpp	/^void test_backtrace() {$/;"	f
texinfo_documents	ThirdParty/libunwind/docs/conf.py	/^texinfo_documents = [$/;"	v
text	Include/WAVM/WASTParse/TestScript.h	/^		text,$/;"	m	class:WAVM::WAST::QuotedModuleType
thread	Lib/Platform/Windows/Thread.cpp	/^	Thread* thread;$/;"	m	struct:ThreadArgs	file:
thread	Test/Benchmarks/invoke-bench.cpp	/^	Platform::Thread* thread = nullptr;$/;"	m	struct:ThreadArgs	file:
threadEntry	Lib/ThreadTest/ThreadTest.cpp	/^static I64 threadEntry(void* threadVoid)$/;"	f	file:
threadEntryContext	Lib/Platform/POSIX/Thread.cpp	/^static thread_local ThreadEntryContext* threadEntryContext = nullptr;$/;"	v	file:
threadEntryFramePointer	Lib/Platform/POSIX/Thread.cpp	/^	U8* threadEntryFramePointer;$/;"	m	struct:ForkThreadArgs	file:
threadEntryFramePointer	Lib/Platform/Windows/Thread.cpp	/^	U8* threadEntryFramePointer;$/;"	m	struct:ForkThreadArgs	file:
threadEntryFramePointer	Lib/Platform/Windows/Thread.cpp	/^static thread_local U8* threadEntryFramePointer = nullptr;$/;"	v	file:
threadMain	Test/RunTestScript/RunTestScript.cpp	/^static I64 threadMain(void* sharedStateVoid)$/;"	f	file:
threadTest	Lib/ThreadTest/ThreadTest.cpp	/^DEFINE_INTRINSIC_MODULE(threadTest);$/;"	v
threadWakeEvent	Lib/Runtime/Atomics.cpp	/^thread_local std::unique_ptr<Platform::Event> threadWakeEvent = nullptr;$/;"	v
threadsMutex	Lib/ThreadTest/ThreadTest.cpp	/^static Platform::Mutex threadsMutex;$/;"	v	file:
threwException	Lib/ThreadTest/ThreadTest.cpp	/^	bool threwException = false;$/;"	m	struct:Thread	file:
throwException	Lib/Runtime/Exception.cpp	/^[[noreturn]] void Runtime::throwException(Exception* exception) { throw exception; }$/;"	f	class:Runtime
throwException	Lib/Runtime/Exception.cpp	/^[[noreturn]] void Runtime::throwException(ExceptionType* type,$/;"	f	class:Runtime
throwIfNotValidUTF8	Lib/WASM/WASMSerialization.cpp	/^static void throwIfNotValidUTF8(const std::string& string)$/;"	f	file:
throw_	Include/WAVM/Emscripten/gas-visit-context.h	/^    Result throw_(ExceptionTypeImm imm)$/;"	f	struct:GasVisitor
throw_	Lib/IR/Validate.cpp	/^	void throw_(ExceptionTypeImm imm)$/;"	f	struct:FunctionValidationContext
throw_	Lib/LLVMJIT/EmitExceptions.cpp	/^void EmitFunctionContext::throw_(ExceptionTypeImm imm)$/;"	f	class:EmitFunctionContext
throw_	Lib/WASTPrint/Print.cpp	/^	void throw_(ExceptionTypeImm imm)$/;"	f	struct:FunctionPrintContext
thunkArgAndReturnData	Include/WAVM/Runtime/RuntimeData.h	/^		U8 thunkArgAndReturnData[maxThunkArgAndReturnBytes];$/;"	m	struct:WAVM::Runtime::ContextRuntimeData
timeout	Lib/WASI/WASIDefinitions.h	/^			__wasi_timestamp_t timeout;$/;"	m	struct:__wasi_subscription_t::__wasi_subscription_u::__wasi_subscription_u_clock_t
today_fmt	ThirdParty/libunwind/docs/conf.py	/^today_fmt = '%Y-%m-%d'$/;"	v
todo_include_todos	ThirdParty/libunwind/docs/conf.py	/^todo_include_todos = True$/;"	v
token	Lib/WASTParse/Parse.h	/^		const Token* token;$/;"	m	struct:WAVM::WAST::Reference
total_len	Include/WAVM/Inline/xxhash/xxhash.h	/^   uint64_t total_len;$/;"	m	struct:XXH64_state_s
total_len	Include/WAVM/Inline/xxhash/xxhash.h	/^   unsigned long long total_len;$/;"	m	struct:XXH64_state_s
total_len_32	Include/WAVM/Inline/xxhash/xxhash.h	/^   uint32_t total_len_32;$/;"	m	struct:XXH32_state_s
total_len_32	Include/WAVM/Inline/xxhash/xxhash.h	/^   unsigned total_len_32;$/;"	m	struct:XXH32_state_s
touchStackPages	Lib/Platform/POSIX/Thread.cpp	/^NO_ASAN static void touchStackPages(U8* minAddr, Uptr numBytesPerPage)$/;"	f	file:
traceSyscallReturnf	Lib/WASI/WASI.cpp	/^static void traceSyscallReturnf(const char* syscallName, const char* returnFormat, ...)$/;"	f	file:
traceSyscallf	Lib/WASI/WASI.cpp	/^static void traceSyscallf(const char* syscallName, const char* argFormat, ...)$/;"	f	file:
traceSyscallv	Lib/WASI/WASI.cpp	/^static void traceSyscallv(const char* syscallName, const char* argFormat, va_list argList)$/;"	f	file:
traceUnimplementedSyscall	Lib/WASI/WASI.cpp	/^static void traceUnimplementedSyscall(const char* syscallName, const char* argFormat, ...)$/;"	f	file:
transcodeUTF16ToUTF8	Include/WAVM/Inline/Unicode.h	/^	const U16* transcodeUTF16ToUTF8(const U16* nextChar, const U16* endChar, String& outString)$/;"	f	namespace:WAVM::Unicode
transcodeUTF8ToUTF16	Include/WAVM/Inline/Unicode.h	/^	const U8* transcodeUTF8ToUTF16(const U8* nextChar, const U8* endChar, String& outString)$/;"	f	namespace:WAVM::Unicode
translateSEHToSignal	Lib/Platform/Windows/Signal.cpp	/^static bool translateSEHToSignal(EXCEPTION_POINTERS* exceptionPointers, Signal& outSignal)$/;"	f	file:
translateSignalToRuntimeException	Lib/Runtime/Exception.cpp	/^static bool translateSignalToRuntimeException(const Platform::Signal& signal,$/;"	f	file:
trapDivideByZero	Lib/LLVMJIT/EmitFunction.cpp	/^void EmitFunctionContext::trapDivideByZero(llvm::Value* divisor)$/;"	f	class:EmitFunctionContext
trapDivideByZeroOrIntegerOverflow	Lib/LLVMJIT/EmitFunction.cpp	/^void EmitFunctionContext::trapDivideByZeroOrIntegerOverflow(ValueType type,$/;"	f	class:EmitFunctionContext
trapIfMisalignedAtomic	Lib/LLVMJIT/EmitMem.cpp	/^void EmitFunctionContext::trapIfMisalignedAtomic(llvm::Value* address, U32 alignmentLog2)$/;"	f	class:EmitFunctionContext
trimModuleName	Lib/Platform/Windows/Diagnostics.cpp	/^static std::string trimModuleName(std::string moduleName)$/;"	f	file:
trunc	Lib/LLVMJIT/EmitFunctionContext.h	/^		llvm::Value* trunc(llvm::Value* value, llvm::Type* type)$/;"	f	struct:WAVM::LLVMJIT::EmitFunctionContext
truncateExisting	Include/WAVM/Platform/File.h	/^		truncateExisting,$/;"	m	class:WAVM::Platform::FileCreateMode
tryCollectCompartment	Lib/Runtime/ObjectGC.cpp	/^bool Runtime::tryCollectCompartment(GCPointer<Compartment>&& compartmentRootRef)$/;"	f	class:Runtime
tryEmitElse	Lib/WASTParse/ParseFunction.cpp	/^static void tryEmitElse(const Token* errorToken, CursorState* cursor)$/;"	f	file:
tryParseAndResolveBranchTargetRef	Lib/WASTParse/ParseFunction.cpp	/^static bool tryParseAndResolveBranchTargetRef(CursorState* cursor, Uptr& outTargetDepth)$/;"	f	file:
tryParseAndResolveNameOrIndexRef	Lib/WASTParse/Parse.cpp	/^bool WAST::tryParseAndResolveNameOrIndexRef(CursorState* cursor,$/;"	f	class:WAST
tryParseFloat	Lib/WASTParse/ParseNumbers.cpp	/^template<typename Float> bool tryParseFloat(CursorState* cursor, Float& outFloat)$/;"	f
tryParseHexit	Lib/WASTParse/Parse.cpp	/^bool WAST::tryParseHexit(const char*& nextChar, U8& outValue)$/;"	f	class:WAST
tryParseI32	Lib/WASTParse/ParseNumbers.cpp	/^bool WAST::tryParseI32(CursorState* cursor, U32& outI32)$/;"	f	class:WAST
tryParseI64	Lib/WASTParse/ParseNumbers.cpp	/^bool WAST::tryParseI64(CursorState* cursor, U64& outI64)$/;"	f	class:WAST
tryParseInt	Lib/WASTParse/ParseNumbers.cpp	/^bool tryParseInt(CursorState* cursor,$/;"	f
tryParseIptr	Lib/WASTParse/ParseNumbers.cpp	/^bool WAST::tryParseIptr(CursorState* cursor, Uptr& outIptr)$/;"	f	class:WAST
tryParseName	Lib/WASTParse/Parse.cpp	/^bool WAST::tryParseName(CursorState* cursor, Name& outName)$/;"	f	class:WAST
tryParseNameOrIndexRef	Lib/WASTParse/Parse.cpp	/^bool WAST::tryParseNameOrIndexRef(CursorState* cursor, Reference& outRef)$/;"	f	class:WAST
tryParseParenthesizedTagged	Lib/WASTParse/Parse.h	/^	static bool tryParseParenthesizedTagged(CursorState* cursor,$/;"	f	namespace:WAVM::WAST
tryParseSizeConstraints	Lib/WASTParse/ParseModule.cpp	/^static bool tryParseSizeConstraints(CursorState* cursor,$/;"	f	file:
tryParseString	Lib/WASTParse/Parse.cpp	/^bool WAST::tryParseString(CursorState* cursor, std::string& outString)$/;"	f	class:WAST
tryParseValueType	Lib/WASTParse/Parse.cpp	/^bool WAST::tryParseValueType(CursorState* cursor, ValueType& outValueType)$/;"	f	class:WAST
tryStack	Lib/LLVMJIT/EmitFunctionContext.h	/^		std::vector<TryContext> tryStack;$/;"	m	struct:WAVM::LLVMJIT::EmitFunctionContext
try_	Include/WAVM/Emscripten/gas-visit-context.h	/^	Result try_(ControlStructureImm imm)$/;"	f	struct:GasVisitor
try_	Include/WAVM/Emscripten/gas-visit-context.h	/^            try_,$/;"	m	class:GasVisitor::ControlContext::Type
try_	Include/WAVM/Emscripten/insert-imported-context.h	/^            try_,$/;"	m	class:ImportFunctionInsertVisitor::ControlContext::Type
try_	Include/WAVM/Emscripten/insert-imported-context.h	/^    Result try_(ControlStructureImm imm)$/;"	f	struct:ImportFunctionInsertVisitor
try_	Lib/IR/Validate.cpp	/^			try_,$/;"	m	class:FunctionValidationContext::ControlContext::Type	file:
try_	Lib/IR/Validate.cpp	/^	void try_(ControlStructureImm imm)$/;"	f	struct:FunctionValidationContext
try_	Lib/LLVMJIT/EmitExceptions.cpp	/^void EmitFunctionContext::try_(ControlStructureImm imm)$/;"	f	class:EmitFunctionContext
try_	Lib/LLVMJIT/EmitFunction.cpp	/^	void try_(ControlStructureImm imm) { ++unreachableControlDepth; }$/;"	f	struct:UnreachableOpVisitor
try_	Lib/LLVMJIT/EmitFunctionContext.h	/^				try_,$/;"	m	class:WAVM::LLVMJIT::EmitFunctionContext::ControlContext::Type
try_	Lib/WASTPrint/Print.cpp	/^			try_,$/;"	m	class:FunctionPrintContext::ControlContext::Type	file:
try_	Lib/WASTPrint/Print.cpp	/^	void try_(ControlStructureImm imm)$/;"	f	struct:FunctionPrintContext
type	Include/WAVM/Emscripten/gas-visit-context.h	/^        Type type;$/;"	m	struct:GasVisitor::ControlContext
type	Include/WAVM/Emscripten/insert-imported-context.h	/^        Type type;$/;"	m	struct:ImportFunctionInsertVisitor::ControlContext
type	Include/WAVM/IR/Module.h	/^			Type type;$/;"	m	union:WAVM::IR::Opcode::Elem::Type::__anon11
type	Include/WAVM/IR/Module.h	/^			Type type;$/;"	m	union:WAVM::IR::Opcode::Type::__anon9
type	Include/WAVM/IR/Module.h	/^		ExceptionType type;$/;"	m	struct:WAVM::IR::Opcode::ExceptionTypeDef
type	Include/WAVM/IR/Module.h	/^		GlobalType type;$/;"	m	struct:WAVM::IR::Opcode::GlobalDef
type	Include/WAVM/IR/Module.h	/^		IndexedFunctionType type;$/;"	m	struct:WAVM::IR::Opcode::FunctionDef
type	Include/WAVM/IR/Module.h	/^		MemoryType type;$/;"	m	struct:WAVM::IR::Opcode::MemoryDef
type	Include/WAVM/IR/Module.h	/^		TableType type;$/;"	m	struct:WAVM::IR::Opcode::TableDef
type	Include/WAVM/IR/Module.h	/^		Type type;$/;"	m	struct:WAVM::IR::Opcode::Import
type	Include/WAVM/IR/Operators.h	/^		IndexedBlockType type;$/;"	m	struct:WAVM::IR::ControlStructureImm
type	Include/WAVM/IR/Operators.h	/^		IndexedFunctionType type;$/;"	m	struct:WAVM::IR::CallIndirectImm
type	Include/WAVM/IR/Value.h	/^		ValueType type;$/;"	m	struct:WAVM::IR::Value
type	Include/WAVM/LLVMJIT/LLVMJIT.h	/^		IR::GlobalType type;$/;"	m	struct:WAVM::LLVMJIT::GlobalBinding
type	Include/WAVM/Platform/Signal.h	/^		Type type = Type::invalid;$/;"	m	struct:WAVM::Platform::Signal
type	Include/WAVM/Runtime/Intrinsics.h	/^		IR::FunctionType type;$/;"	m	struct:WAVM::Intrinsics::Function
type	Include/WAVM/Runtime/Intrinsics.h	/^		IR::ValueType type;$/;"	m	struct:WAVM::Intrinsics::Global
type	Include/WAVM/Runtime/Intrinsics.h	/^		const IR::MemoryType type;$/;"	m	struct:WAVM::Intrinsics::Memory
type	Include/WAVM/Runtime/Intrinsics.h	/^		const IR::TableType type;$/;"	m	struct:WAVM::Intrinsics::Table
type	Include/WAVM/Runtime/Linker.h	/^			IR::ExternType type;$/;"	m	struct:WAVM::Runtime::LinkResult::MissingImport
type	Include/WAVM/Runtime/RuntimeData.h	/^		ExceptionType* type;$/;"	m	struct:WAVM::Runtime::Exception
type	Include/WAVM/WASTParse/TestScript.h	/^		const ActionType type;$/;"	m	struct:WAVM::WAST::Action
type	Include/WAVM/WASTParse/TestScript.h	/^		const Type type;$/;"	m	struct:WAVM::WAST::Command
type	Lib/IR/DisassemblyNames.cpp	/^	type = 4,$/;"	m	class:NameSubsectionType	file:
type	Lib/IR/Validate.cpp	/^		Type type;$/;"	m	struct:FunctionValidationContext::ControlContext	file:
type	Lib/LLVMJIT/EmitFunctionContext.h	/^			Type type;$/;"	m	struct:WAVM::LLVMJIT::EmitFunctionContext::ControlContext
type	Lib/RegExp/RegExp.cpp	/^	const NodeType type;$/;"	m	struct:Node	file:
type	Lib/Runtime/RuntimePrivate.h	/^		IR::MemoryType type;$/;"	m	struct:WAVM::Runtime::Memory
type	Lib/Runtime/RuntimePrivate.h	/^		const IR::GlobalType type;$/;"	m	struct:WAVM::Runtime::Global
type	Lib/Runtime/RuntimePrivate.h	/^		const IR::TableType type;$/;"	m	struct:WAVM::Runtime::Table
type	Lib/WASI/WASIDefinitions.h	/^	__wasi_eventtype_t type;$/;"	m	struct:__wasi_event_t
type	Lib/WASI/WASIDefinitions.h	/^	__wasi_eventtype_t type;$/;"	m	struct:__wasi_subscription_t
type	Lib/WASM/WASMSerialization.cpp	/^	ValueType type;$/;"	m	struct:LocalSet	file:
type	Lib/WASM/WASMSerialization.cpp	/^	type,$/;"	m	class:SectionType	file:
type	Lib/WASTParse/Parse.h	/^		Type type;$/;"	m	struct:WAVM::WAST::Reference
type	Lib/WASTPrint/Print.cpp	/^		Type type;$/;"	m	struct:FunctionPrintContext::ControlContext	file:
typeId	Include/WAVM/Runtime/RuntimeData.h	/^		Uptr typeId;$/;"	m	struct:WAVM::Runtime::Exception
typeIds	Lib/LLVMJIT/EmitModuleContext.h	/^		std::vector<llvm::Constant*> typeIds;$/;"	m	struct:WAVM::LLVMJIT::EmitModuleContext
typeNameToIndexMap	Lib/WASTParse/Parse.h	/^		NameToIndexMap typeNameToIndexMap;$/;"	m	struct:WAVM::WAST::ModuleState
typeOpcode	Include/WAVM/IR/Module.h	/^			Opcode typeOpcode;$/;"	m	union:WAVM::IR::Opcode::Elem::Type::__anon11
typeOpcode	Include/WAVM/IR/Module.h	/^			Opcode typeOpcode;$/;"	m	union:WAVM::IR::Opcode::Type::__anon9
typedZeroConstants	Lib/LLVMJIT/LLVMJITPrivate.h	/^		llvm::Constant* typedZeroConstants[(Uptr)IR::ValueType::num];$/;"	m	struct:WAVM::LLVMJIT::LLVMContext
types	Include/WAVM/IR/Module.h	/^		std::vector<FunctionType> types;$/;"	m	struct:WAVM::IR::Opcode::Elem::Module
types	Include/WAVM/IR/Module.h	/^		std::vector<std::string> types;$/;"	m	struct:WAVM::IR::Opcode::Elem::DisassemblyNames
u	Lib/WASI/WASIDefinitions.h	/^	} u;$/;"	m	struct:__wasi_event_t	typeref:union:__wasi_event_t::__wasi_event_u
u	Lib/WASI/WASIDefinitions.h	/^	} u;$/;"	m	struct:__wasi_prestat_t	typeref:union:__wasi_prestat_t::__wasi_prestat_u
u	Lib/WASI/WASIDefinitions.h	/^	} u;$/;"	m	struct:__wasi_subscription_t	typeref:union:__wasi_subscription_t::__wasi_subscription_u
u32	Include/WAVM/IR/Value.h	/^			U32 u32;$/;"	m	union:WAVM::IR::UntaggedValue::__anon8
u32	Include/WAVM/Inline/xxhash/xxhash.c	/^typedef union { U32 u32; U64 u64; } __attribute__((packed)) unalign64;$/;"	m	union:__anon39	file:
u32	Include/WAVM/Inline/xxhash/xxhash.c	/^typedef union { U32 u32; } __attribute__((packed)) unalign;$/;"	m	union:__anon36	file:
u64	Include/WAVM/IR/Value.h	/^			U64 u64;$/;"	m	union:WAVM::IR::UntaggedValue::__anon8
u64	Include/WAVM/Inline/xxhash/xxhash.c	/^typedef union { U32 u32; U64 u64; } __attribute__((packed)) unalign64;$/;"	m	union:__anon39	file:
uflchk	ThirdParty/dtoa/dtoa.c	/^BCinfo { int dp0, dp1, dplen, dsign, e0, inexact, nd, nd0, rounding, scale, uflchk; };$/;"	m	struct:BCinfo	file:
unalign	Include/WAVM/Inline/xxhash/xxhash.c	/^typedef union { U32 u32; } __attribute__((packed)) unalign;$/;"	t	typeref:union:__anon36	file:
unalign64	Include/WAVM/Inline/xxhash/xxhash.c	/^typedef union { U32 u32; U64 u64; } __attribute__((packed)) unalign64;$/;"	t	typeref:union:__anon39	file:
unalignedRuntimeData	Lib/Runtime/RuntimePrivate.h	/^		U8* unalignedRuntimeData;$/;"	m	struct:WAVM::Runtime::Compartment
uncheckedCast	Lib/WASTParse/ParseNumbers.cpp	/^template<typename Float> static NO_UBSAN Float uncheckedCast(F64 f64) { return Float(f64); }$/;"	f	file:
unimplemented	Include/WAVM/Inline/Errors.h	/^	[[noreturn]] inline void unimplemented(const char* context)$/;"	f	namespace:WAVM::Errors
uninitializedTableElement	Include/WAVM/WASTParse/TestScript.h	/^		uninitializedTableElement,$/;"	m	class:WAVM::WAST::ExpectedTrapType
unknown	Include/WAVM/Emscripten/gas-visit-context.h	/^    Result unknown(Opcode) {}$/;"	f	struct:GasVisitor
unknown	Include/WAVM/Emscripten/insert-imported-context.h	/^    Result unknown(Opcode) {}$/;"	f	struct:ImportFunctionInsertVisitor
unknown	Include/WAVM/IR/OperatorPrinter.h	/^		std::string unknown(Opcode opcode)$/;"	f	struct:WAVM::IR::OperatorPrinter
unknown	Lib/IR/Validate.cpp	/^	void unknown(Opcode opcode)$/;"	f	struct:FunctionValidationContext
unknown	Lib/LLVMJIT/EmitFunctionContext.h	/^		void unknown(IR::Opcode opcode) { Errors::unreachable(); }$/;"	f	struct:WAVM::LLVMJIT::EmitFunctionContext
unknown	Lib/WASM/WASMSerialization.cpp	/^	unknown,$/;"	m	class:SectionType	file:
unknown	Lib/WASM/WASMSerialization.cpp	/^	void unknown(Opcode opcode) { throw FatalSerializationException("unknown opcode"); }$/;"	f	struct:OperatorSerializerStream
unknown	Lib/WASTPrint/Print.cpp	/^	void unknown(Opcode) { Errors::unreachable(); }$/;"	f	struct:FunctionPrintContext
unlock	Include/WAVM/Inline/Lock.h	/^		void unlock()$/;"	f	struct:WAVM::Lock
unlock	Lib/Platform/POSIX/Mutex.cpp	/^void Platform::Mutex::unlock()$/;"	f	class:Platform::Mutex
unlock	Lib/Platform/Windows/Mutex.cpp	/^void Platform::Mutex::unlock()$/;"	f	class:Platform::Mutex
unlock	ThirdParty/libunwind/src/RWMutex.hpp	/^  bool unlock() { return true; }$/;"	f	class:libunwind::RWMutex
unlock_shared	ThirdParty/libunwind/src/RWMutex.hpp	/^  bool unlock_shared() { return true; }$/;"	f	class:libunwind::RWMutex
unmapMemoryPages	Lib/Runtime/Memory.cpp	/^void Runtime::unmapMemoryPages(Memory* memory, Uptr pageIndex, Uptr numPages)$/;"	f	class:Runtime
unmatchedCharacterTerminal	Include/WAVM/NFA/NFA.h	/^		unmatchedCharacterTerminal = (StateIndex)0x8000,$/;"	e	enum:WAVM::NFA::__anon3
unreachable	Include/WAVM/Emscripten/gas-visit-context.h	/^    Result unreachable(NoImm imm)$/;"	f	struct:GasVisitor
unreachable	Include/WAVM/Inline/Errors.h	/^	[[noreturn]] inline void unreachable()$/;"	f	namespace:WAVM::Errors
unreachable	Lib/IR/Validate.cpp	/^	void unreachable(NoImm) { enterUnreachable(); }$/;"	f	struct:FunctionValidationContext
unreachable	Lib/LLVMJIT/EmitCore.cpp	/^void EmitFunctionContext::unreachable(NoImm)$/;"	f	class:EmitFunctionContext
unreachable	Lib/WASTPrint/Print.cpp	/^	void unreachable(NoImm)$/;"	f	struct:FunctionPrintContext
unreachableControlDepth	Lib/LLVMJIT/EmitFunction.cpp	/^	Uptr unreachableControlDepth;$/;"	m	struct:UnreachableOpVisitor	file:
unreferencedObjects	Lib/Runtime/ObjectGC.cpp	/^	HashSet<GCObject*> unreferencedObjects;$/;"	m	struct:GCState	file:
unresolvedErrors	Lib/WASTParse/Parse.h	/^		std::vector<UnresolvedError> unresolvedErrors;$/;"	m	struct:WAVM::WAST::ParseState
unseen_objects	ThirdParty/libunwind/src/Unwind_AppleExtras.cpp	/^  libgcc_object   *unseen_objects;$/;"	m	struct:libgcc_object_info	file:
unused1	ThirdParty/libunwind/src/Unwind_AppleExtras.cpp	/^  void          *unused1;$/;"	m	struct:libgcc_object	file:
unused2	ThirdParty/libunwind/src/Unwind_AppleExtras.cpp	/^  void          *unused2;$/;"	m	struct:libgcc_object	file:
unw_addr_space	ThirdParty/libunwind/src/AddressSpace.hpp	/^struct unw_addr_space {$/;"	s	namespace:libunwind
unw_addr_space_i386	ThirdParty/libunwind/src/AddressSpace.hpp	/^  unw_addr_space_i386(task_t task) : oas(task) {}$/;"	f	struct:libunwind::unw_addr_space_i386
unw_addr_space_i386	ThirdParty/libunwind/src/AddressSpace.hpp	/^struct unw_addr_space_i386 : public unw_addr_space {$/;"	s	namespace:libunwind
unw_addr_space_ppc	ThirdParty/libunwind/src/AddressSpace.hpp	/^  unw_addr_space_ppc(task_t task) : oas(task) {}$/;"	f	struct:libunwind::unw_addr_space_ppc
unw_addr_space_ppc	ThirdParty/libunwind/src/AddressSpace.hpp	/^struct unw_addr_space_ppc : public unw_addr_space {$/;"	s	namespace:libunwind
unw_addr_space_ppc64	ThirdParty/libunwind/src/AddressSpace.hpp	/^  unw_addr_space_ppc64(task_t task) : oas(task) {}$/;"	f	struct:libunwind::unw_addr_space_ppc64
unw_addr_space_ppc64	ThirdParty/libunwind/src/AddressSpace.hpp	/^struct unw_addr_space_ppc64 : public unw_addr_space {$/;"	s	namespace:libunwind
unw_addr_space_t	ThirdParty/libunwind/include/libunwind.h	/^typedef struct unw_addr_space *unw_addr_space_t;$/;"	t	typeref:struct:unw_addr_space
unw_addr_space_x86_64	ThirdParty/libunwind/src/AddressSpace.hpp	/^  unw_addr_space_x86_64(task_t task) : oas(task) {}$/;"	f	struct:libunwind::unw_addr_space_x86_64
unw_addr_space_x86_64	ThirdParty/libunwind/src/AddressSpace.hpp	/^struct unw_addr_space_x86_64 : public unw_addr_space {$/;"	s	namespace:libunwind
unw_context_t	ThirdParty/libunwind/include/libunwind.h	/^struct unw_context_t {$/;"	s
unw_context_t	ThirdParty/libunwind/include/libunwind.h	/^typedef struct unw_context_t unw_context_t;$/;"	t	typeref:struct:unw_context_t
unw_create_addr_space_for_task	ThirdParty/libunwind/src/libunwind.cpp	/^_LIBUNWIND_EXPORT unw_addr_space_t unw_create_addr_space_for_task(task_t task) {$/;"	f
unw_cursor_t	ThirdParty/libunwind/include/libunwind.h	/^struct unw_cursor_t {$/;"	s
unw_cursor_t	ThirdParty/libunwind/include/libunwind.h	/^typedef struct unw_cursor_t unw_cursor_t;$/;"	t	typeref:struct:unw_cursor_t
unw_destroy_addr_space	ThirdParty/libunwind/src/libunwind.cpp	/^_LIBUNWIND_EXPORT void unw_destroy_addr_space(unw_addr_space_t asp) {$/;"	f
unw_fpreg_t	ThirdParty/libunwind/include/libunwind.h	/^typedef double unw_fpreg_t;$/;"	t
unw_fpreg_t	ThirdParty/libunwind/include/libunwind.h	/^typedef uint64_t unw_fpreg_t;$/;"	t
unw_get_fpreg	ThirdParty/libunwind/src/libunwind.cpp	/^_LIBUNWIND_EXPORT int unw_get_fpreg(unw_cursor_t *cursor, unw_regnum_t regNum,$/;"	f
unw_get_proc_info	ThirdParty/libunwind/src/libunwind.cpp	/^_LIBUNWIND_EXPORT int unw_get_proc_info(unw_cursor_t *cursor,$/;"	f
unw_get_proc_name	ThirdParty/libunwind/src/libunwind.cpp	/^_LIBUNWIND_EXPORT int unw_get_proc_name(unw_cursor_t *cursor, char *buf,$/;"	f
unw_get_reg	ThirdParty/libunwind/src/libunwind.cpp	/^_LIBUNWIND_EXPORT int unw_get_reg(unw_cursor_t *cursor, unw_regnum_t regNum,$/;"	f
unw_init_local	ThirdParty/libunwind/src/libunwind.cpp	/^_LIBUNWIND_EXPORT int unw_init_local(unw_cursor_t *cursor,$/;"	f
unw_init_remote_thread	ThirdParty/libunwind/src/libunwind.cpp	/^_LIBUNWIND_EXPORT int unw_init_remote_thread(unw_cursor_t *cursor,$/;"	f
unw_is_fpreg	ThirdParty/libunwind/src/libunwind.cpp	/^_LIBUNWIND_EXPORT int unw_is_fpreg(unw_cursor_t *cursor, unw_regnum_t regNum) {$/;"	f
unw_is_signal_frame	ThirdParty/libunwind/src/libunwind.cpp	/^_LIBUNWIND_EXPORT int unw_is_signal_frame(unw_cursor_t *cursor) {$/;"	f
unw_iterate_dwarf_unwind_cache	ThirdParty/libunwind/src/libunwind.cpp	/^_LIBUNWIND_EXPORT void unw_iterate_dwarf_unwind_cache(void (*func)($/;"	f
unw_local_addr_space	ThirdParty/libunwind/src/libunwind.cpp	/^_LIBUNWIND_EXPORT unw_addr_space_t unw_local_addr_space =$/;"	v
unw_proc_info_t	ThirdParty/libunwind/include/libunwind.h	/^struct unw_proc_info_t {$/;"	s
unw_proc_info_t	ThirdParty/libunwind/include/libunwind.h	/^typedef struct unw_proc_info_t unw_proc_info_t;$/;"	t	typeref:struct:unw_proc_info_t
unw_regname	ThirdParty/libunwind/src/libunwind.cpp	/^_LIBUNWIND_EXPORT const char *unw_regname(unw_cursor_t *cursor,$/;"	f
unw_regnum_t	ThirdParty/libunwind/include/libunwind.h	/^typedef int unw_regnum_t;$/;"	t
unw_resume	ThirdParty/libunwind/src/libunwind.cpp	/^_LIBUNWIND_EXPORT int unw_resume(unw_cursor_t *cursor) {$/;"	f
unw_save_vfp_as_X	ThirdParty/libunwind/src/libunwind.cpp	/^_LIBUNWIND_EXPORT void unw_save_vfp_as_X(unw_cursor_t *cursor) {$/;"	f
unw_set_fpreg	ThirdParty/libunwind/src/libunwind.cpp	/^_LIBUNWIND_EXPORT int unw_set_fpreg(unw_cursor_t *cursor, unw_regnum_t regNum,$/;"	f
unw_set_reg	ThirdParty/libunwind/src/libunwind.cpp	/^_LIBUNWIND_EXPORT int unw_set_reg(unw_cursor_t *cursor, unw_regnum_t regNum,$/;"	f
unw_step	ThirdParty/libunwind/src/libunwind.cpp	/^_LIBUNWIND_EXPORT int unw_step(unw_cursor_t *cursor) {$/;"	f
unw_word_t	ThirdParty/libunwind/include/libunwind.h	/^typedef uintptr_t unw_word_t;$/;"	t
unwindOneFrame	ThirdParty/libunwind/src/Unwind-EHABI.cpp	/^static _Unwind_Reason_Code unwindOneFrame(_Unwind_State state,$/;"	f	namespace:__anon79
unwindSignalsAsExceptions	Lib/Runtime/Exception.cpp	/^void Runtime::unwindSignalsAsExceptions(const std::function<void()>& thunk)$/;"	f	class:Runtime
unwindStack	Lib/Platform/Windows/Diagnostics.cpp	/^CallStack Platform::unwindStack(const CONTEXT& immutableContext, Uptr numOmittedFramesFromTop)$/;"	f	class:Platform
unwindToBlock	Lib/LLVMJIT/EmitFunctionContext.h	/^			llvm::BasicBlock* unwindToBlock;$/;"	m	struct:WAVM::LLVMJIT::EmitFunctionContext::TryContext
unwind_info	ThirdParty/libunwind/include/libunwind.h	/^  unw_word_t  unwind_info;      \/* address of DWARF unwind info, or zero *\/$/;"	m	struct:unw_proc_info_t
unwind_info_compressed_second_level_page_header	ThirdParty/libunwind/include/mach-o/compact_unwind_encoding.h	/^struct unwind_info_compressed_second_level_page_header$/;"	s
unwind_info_regular_second_level_entry	ThirdParty/libunwind/include/mach-o/compact_unwind_encoding.h	/^struct unwind_info_regular_second_level_entry$/;"	s
unwind_info_regular_second_level_page_header	ThirdParty/libunwind/include/mach-o/compact_unwind_encoding.h	/^struct unwind_info_regular_second_level_page_header$/;"	s
unwind_info_section_header	ThirdParty/libunwind/include/mach-o/compact_unwind_encoding.h	/^struct unwind_info_section_header$/;"	s
unwind_info_section_header_index_entry	ThirdParty/libunwind/include/mach-o/compact_unwind_encoding.h	/^struct unwind_info_section_header_index_entry$/;"	s
unwind_info_section_header_lsda_index_entry	ThirdParty/libunwind/include/mach-o/compact_unwind_encoding.h	/^struct unwind_info_section_header_lsda_index_entry$/;"	s
unwind_info_size	ThirdParty/libunwind/include/libunwind.h	/^  uint32_t    unwind_info_size; \/* size of DWARF unwind info, or zero if none *\/$/;"	m	struct:unw_proc_info_t
unwind_phase1	ThirdParty/libunwind/src/Unwind-EHABI.cpp	/^unwind_phase1(unw_context_t *uc, unw_cursor_t *cursor, _Unwind_Exception *exception_object) {$/;"	f	file:
unwind_phase1	ThirdParty/libunwind/src/Unwind-sjlj.c	/^unwind_phase1(struct _Unwind_Exception *exception_object) {$/;"	f	file:
unwind_phase1	ThirdParty/libunwind/src/UnwindLevel1.c	/^unwind_phase1(unw_context_t *uc, unw_cursor_t *cursor, _Unwind_Exception *exception_object) {$/;"	f	file:
unwind_phase2	ThirdParty/libunwind/src/Unwind-EHABI.cpp	/^static _Unwind_Reason_Code unwind_phase2(unw_context_t *uc, unw_cursor_t *cursor,$/;"	f	file:
unwind_phase2	ThirdParty/libunwind/src/Unwind-sjlj.c	/^unwind_phase2(struct _Unwind_Exception *exception_object) {$/;"	f	file:
unwind_phase2	ThirdParty/libunwind/src/UnwindLevel1.c	/^unwind_phase2(unw_context_t *uc, unw_cursor_t *cursor, _Unwind_Exception *exception_object) {$/;"	f	file:
unwind_phase2_forced	ThirdParty/libunwind/src/Unwind-sjlj.c	/^unwind_phase2_forced(struct _Unwind_Exception *exception_object,$/;"	f	file:
unwind_phase2_forced	ThirdParty/libunwind/src/UnwindLevel1.c	/^unwind_phase2_forced(unw_context_t *uc, unw_cursor_t *cursor,$/;"	f	file:
unwinder_cache	ThirdParty/libunwind/include/unwind.h	/^  } unwinder_cache;$/;"	m	struct:_Unwind_Control_Block	typeref:struct:_Unwind_Control_Block::__anon56
userSections	Include/WAVM/IR/Module.h	/^		std::vector<UserSection> userSections;$/;"	m	struct:WAVM::IR::Opcode::Elem::Module
userdata	Lib/WASI/WASIDefinitions.h	/^	__wasi_userdata_t userdata;$/;"	m	struct:__wasi_event_t
userdata	Lib/WASI/WASIDefinitions.h	/^	__wasi_userdata_t userdata;$/;"	m	struct:__wasi_subscription_t
v	ThirdParty/libunwind/src/Registers.hpp	/^    v128 v;$/;"	m	union:libunwind::Registers_ppc64::ppc64_vsr_t
v1	Include/WAVM/Inline/xxhash/xxhash.h	/^   uint32_t v1;$/;"	m	struct:XXH32_state_s
v1	Include/WAVM/Inline/xxhash/xxhash.h	/^   uint64_t v1;$/;"	m	struct:XXH64_state_s
v1	Include/WAVM/Inline/xxhash/xxhash.h	/^   unsigned long long v1;$/;"	m	struct:XXH64_state_s
v1	Include/WAVM/Inline/xxhash/xxhash.h	/^   unsigned v1;$/;"	m	struct:XXH32_state_s
v128	Include/WAVM/IR/Module.h	/^			V128 v128;$/;"	m	union:WAVM::IR::Opcode::Type::__anon10
v128	Include/WAVM/IR/Types.h	/^		v128 = 6,$/;"	m	class:WAVM::IR::ValueType
v128	Include/WAVM/IR/Value.h	/^			V128 v128;$/;"	m	union:WAVM::IR::UntaggedValue::__anon8
v128	ThirdParty/libunwind/src/Registers.hpp	/^struct v128 { uint32_t vec[4]; };$/;"	s	namespace:libunwind
v128_and	Lib/LLVMJIT/EmitNumeric.cpp	/^void EmitFunctionContext::v128_and(IR::NoImm)$/;"	f	class:EmitFunctionContext
v128_bitselect	Lib/LLVMJIT/EmitNumeric.cpp	/^void EmitFunctionContext::v128_bitselect(IR::NoImm)$/;"	f	class:EmitFunctionContext
v128_const	Include/WAVM/IR/Module.h	/^			v128_const = 0xfd02,$/;"	m	class:WAVM::IR::Opcode::Type
v128_not	Lib/LLVMJIT/EmitNumeric.cpp	/^void EmitFunctionContext::v128_not(IR::NoImm)$/;"	f	class:EmitFunctionContext
v128_or	Lib/LLVMJIT/EmitNumeric.cpp	/^void EmitFunctionContext::v128_or(IR::NoImm)$/;"	f	class:EmitFunctionContext
v128_xor	Lib/LLVMJIT/EmitNumeric.cpp	/^void EmitFunctionContext::v128_xor(IR::NoImm)$/;"	f	class:EmitFunctionContext
v2	Include/WAVM/Inline/xxhash/xxhash.h	/^   uint32_t v2;$/;"	m	struct:XXH32_state_s
v2	Include/WAVM/Inline/xxhash/xxhash.h	/^   uint64_t v2;$/;"	m	struct:XXH64_state_s
v2	Include/WAVM/Inline/xxhash/xxhash.h	/^   unsigned long long v2;$/;"	m	struct:XXH64_state_s
v2	Include/WAVM/Inline/xxhash/xxhash.h	/^   unsigned v2;$/;"	m	struct:XXH32_state_s
v2	ThirdParty/libunwind/src/Registers.hpp	/^      uint64_t v2;$/;"	m	struct:libunwind::Registers_ppc64::ppc64_vsr_t::asfloat_s
v3	Include/WAVM/Inline/xxhash/xxhash.h	/^   uint32_t v3;$/;"	m	struct:XXH32_state_s
v3	Include/WAVM/Inline/xxhash/xxhash.h	/^   uint64_t v3;$/;"	m	struct:XXH64_state_s
v3	Include/WAVM/Inline/xxhash/xxhash.h	/^   unsigned long long v3;$/;"	m	struct:XXH64_state_s
v3	Include/WAVM/Inline/xxhash/xxhash.h	/^   unsigned v3;$/;"	m	struct:XXH32_state_s
v4	Include/WAVM/Inline/xxhash/xxhash.h	/^   uint32_t v4;$/;"	m	struct:XXH32_state_s
v4	Include/WAVM/Inline/xxhash/xxhash.h	/^   uint64_t v4;$/;"	m	struct:XXH64_state_s
v4	Include/WAVM/Inline/xxhash/xxhash.h	/^   unsigned long long v4;$/;"	m	struct:XXH64_state_s
v4	Include/WAVM/Inline/xxhash/xxhash.h	/^   unsigned v4;$/;"	m	struct:XXH32_state_s
v8x16_shuffle1	Lib/LLVMJIT/EmitNumeric.cpp	/^void EmitFunctionContext::v8x16_shuffle1(NoImm)$/;"	f	class:EmitFunctionContext
v8x16_shuffle2_imm	Lib/LLVMJIT/EmitNumeric.cpp	/^void EmitFunctionContext::v8x16_shuffle2_imm(IR::ShuffleImm<16> imm)$/;"	f	class:EmitFunctionContext
validFloatReg	ThirdParty/libunwind/src/UnwindCursor.hpp	/^  virtual bool validFloatReg(int) {$/;"	f	class:libunwind::AbstractUnwindCursor
validFloatReg	ThirdParty/libunwind/src/UnwindCursor.hpp	/^bool UnwindCursor<A, R>::validFloatReg(int regNum) {$/;"	f	class:libunwind::UnwindCursor
validFloatRegister	ThirdParty/libunwind/src/Registers.hpp	/^  bool        validFloatRegister(int) const { return false; }$/;"	f	class:libunwind::Registers_x86
validFloatRegister	ThirdParty/libunwind/src/Registers.hpp	/^  bool        validFloatRegister(int) const { return false; }$/;"	f	class:libunwind::Registers_x86_64
validFloatRegister	ThirdParty/libunwind/src/Registers.hpp	/^inline bool Registers_arm64::validFloatRegister(int regNum) const {$/;"	f	class:libunwind::Registers_arm64
validFloatRegister	ThirdParty/libunwind/src/Registers.hpp	/^inline bool Registers_arm::validFloatRegister(int regNum) const {$/;"	f	class:libunwind::Registers_arm
validFloatRegister	ThirdParty/libunwind/src/Registers.hpp	/^inline bool Registers_mips_newabi::validFloatRegister(int \/* regNum *\/) const {$/;"	f	class:libunwind::Registers_mips_newabi
validFloatRegister	ThirdParty/libunwind/src/Registers.hpp	/^inline bool Registers_mips_o32::validFloatRegister(int \/* regNum *\/) const {$/;"	f	class:libunwind::Registers_mips_o32
validFloatRegister	ThirdParty/libunwind/src/Registers.hpp	/^inline bool Registers_or1k::validFloatRegister(int \/* regNum *\/) const {$/;"	f	class:libunwind::Registers_or1k
validFloatRegister	ThirdParty/libunwind/src/Registers.hpp	/^inline bool Registers_ppc64::validFloatRegister(int regNum) const {$/;"	f	class:libunwind::Registers_ppc64
validFloatRegister	ThirdParty/libunwind/src/Registers.hpp	/^inline bool Registers_ppc::validFloatRegister(int regNum) const {$/;"	f	class:libunwind::Registers_ppc
validReg	ThirdParty/libunwind/src/UnwindCursor.hpp	/^  virtual bool validReg(int) { _LIBUNWIND_ABORT("validReg not implemented"); }$/;"	f	class:libunwind::AbstractUnwindCursor
validReg	ThirdParty/libunwind/src/UnwindCursor.hpp	/^bool UnwindCursor<A, R>::validReg(int regNum) {$/;"	f	class:libunwind::UnwindCursor
validRegister	ThirdParty/libunwind/src/Registers.hpp	/^inline bool Registers_arm64::validRegister(int regNum) const {$/;"	f	class:libunwind::Registers_arm64
validRegister	ThirdParty/libunwind/src/Registers.hpp	/^inline bool Registers_arm::validRegister(int regNum) const {$/;"	f	class:libunwind::Registers_arm
validRegister	ThirdParty/libunwind/src/Registers.hpp	/^inline bool Registers_mips_newabi::validRegister(int regNum) const {$/;"	f	class:libunwind::Registers_mips_newabi
validRegister	ThirdParty/libunwind/src/Registers.hpp	/^inline bool Registers_mips_o32::validRegister(int regNum) const {$/;"	f	class:libunwind::Registers_mips_o32
validRegister	ThirdParty/libunwind/src/Registers.hpp	/^inline bool Registers_or1k::validRegister(int regNum) const {$/;"	f	class:libunwind::Registers_or1k
validRegister	ThirdParty/libunwind/src/Registers.hpp	/^inline bool Registers_ppc64::validRegister(int regNum) const {$/;"	f	class:libunwind::Registers_ppc64
validRegister	ThirdParty/libunwind/src/Registers.hpp	/^inline bool Registers_ppc::validRegister(int regNum) const {$/;"	f	class:libunwind::Registers_ppc
validRegister	ThirdParty/libunwind/src/Registers.hpp	/^inline bool Registers_x86::validRegister(int regNum) const {$/;"	f	class:libunwind::Registers_x86
validRegister	ThirdParty/libunwind/src/Registers.hpp	/^inline bool Registers_x86_64::validRegister(int regNum) const {$/;"	f	class:libunwind::Registers_x86_64
validVectorRegister	ThirdParty/libunwind/src/Registers.hpp	/^  bool        validVectorRegister(int) const { return false; }$/;"	f	class:libunwind::Registers_x86
validVectorRegister	ThirdParty/libunwind/src/Registers.hpp	/^inline bool Registers_arm64::validVectorRegister(int) const {$/;"	f	class:libunwind::Registers_arm64
validVectorRegister	ThirdParty/libunwind/src/Registers.hpp	/^inline bool Registers_arm::validVectorRegister(int) const {$/;"	f	class:libunwind::Registers_arm
validVectorRegister	ThirdParty/libunwind/src/Registers.hpp	/^inline bool Registers_mips_newabi::validVectorRegister(int \/* regNum *\/) const {$/;"	f	class:libunwind::Registers_mips_newabi
validVectorRegister	ThirdParty/libunwind/src/Registers.hpp	/^inline bool Registers_mips_o32::validVectorRegister(int \/* regNum *\/) const {$/;"	f	class:libunwind::Registers_mips_o32
validVectorRegister	ThirdParty/libunwind/src/Registers.hpp	/^inline bool Registers_or1k::validVectorRegister(int \/* regNum *\/) const {$/;"	f	class:libunwind::Registers_or1k
validVectorRegister	ThirdParty/libunwind/src/Registers.hpp	/^inline bool Registers_ppc64::validVectorRegister(int regNum) const {$/;"	f	class:libunwind::Registers_ppc64
validVectorRegister	ThirdParty/libunwind/src/Registers.hpp	/^inline bool Registers_ppc::validVectorRegister(int regNum) const {$/;"	f	class:libunwind::Registers_ppc
validVectorRegister	ThirdParty/libunwind/src/Registers.hpp	/^inline bool Registers_x86_64::validVectorRegister(int regNum) const {$/;"	f	class:libunwind::Registers_x86_64
validate	Lib/IR/Validate.cpp	/^static void validate(SizeConstraints size, U64 maxMax)$/;"	f	file:
validate	Lib/IR/Validate.cpp	/^static void validate(const IR::FeatureSpec& featureSpec, GlobalType type)$/;"	f	file:
validate	Lib/IR/Validate.cpp	/^static void validate(const IR::FeatureSpec& featureSpec, IR::ValueType valueType)$/;"	f	file:
validate	Lib/IR/Validate.cpp	/^static void validate(const IR::FeatureSpec& featureSpec, ReferenceType type)$/;"	f	file:
validate	Lib/IR/Validate.cpp	/^static void validate(const IR::FeatureSpec& featureSpec, TypeTuple typeTuple)$/;"	f	file:
validate	Lib/IR/Validate.cpp	/^static void validate(const Module& module, MemoryType type)$/;"	f	file:
validate	Lib/IR/Validate.cpp	/^static void validate(const Module& module, TableType type)$/;"	f	file:
validateBlockType	Lib/IR/Validate.cpp	/^static FunctionType validateBlockType(const Module& module, const IndexedBlockType& type)$/;"	f	file:
validateBranchDepth	Lib/IR/Validate.cpp	/^	void validateBranchDepth(Uptr depth) const$/;"	f	struct:FunctionValidationContext	file:
validateCatch	Lib/IR/Validate.cpp	/^	void validateCatch()$/;"	f	struct:FunctionValidationContext
validateDataSegments	Lib/IR/Validate.cpp	/^void IR::validateDataSegments(const Module& module)$/;"	f	class:IR
validateElemSegments	Lib/IR/Validate.cpp	/^void IR::validateElemSegments(const Module& module)$/;"	f	class:IR
validateExceptionTypeDefs	Lib/IR/Validate.cpp	/^void IR::validateExceptionTypeDefs(const Module& module)$/;"	f	class:IR
validateExports	Lib/IR/Validate.cpp	/^void IR::validateExports(const Module& module)$/;"	f	class:IR
validateFunctionDeclarations	Lib/IR/Validate.cpp	/^void IR::validateFunctionDeclarations(const Module& module)$/;"	f	class:IR
validateFunctionIndex	Lib/IR/Validate.cpp	/^static FunctionType validateFunctionIndex(const Module& module, Uptr functionIndex)$/;"	f	file:
validateFunctionType	Lib/IR/Validate.cpp	/^static FunctionType validateFunctionType(const Module& module, const IndexedFunctionType& type)$/;"	f	file:
validateGlobalDefs	Lib/IR/Validate.cpp	/^void IR::validateGlobalDefs(const Module& module)$/;"	f	class:IR
validateGlobalIndex	Lib/IR/Validate.cpp	/^static ValueType validateGlobalIndex(const Module& module,$/;"	f	file:
validateImm	Lib/IR/Validate.cpp	/^	template<Uptr naturalAlignmentLog2> void validateImm(LoadOrStoreImm<naturalAlignmentLog2> imm)$/;"	f	struct:FunctionValidationContext
validateImm	Lib/IR/Validate.cpp	/^	template<Uptr numLanes> void validateImm(LaneIndexImm<numLanes> imm)$/;"	f	struct:FunctionValidationContext
validateImm	Lib/IR/Validate.cpp	/^	template<Uptr numLanes> void validateImm(ShuffleImm<numLanes> imm)$/;"	f	struct:FunctionValidationContext
validateImm	Lib/IR/Validate.cpp	/^	template<typename nativeType> void validateImm(LiteralImm<nativeType> imm) {}$/;"	f	struct:FunctionValidationContext
validateImm	Lib/IR/Validate.cpp	/^	void validateImm(AtomicLoadOrStoreImm<naturalAlignmentLog2> imm)$/;"	f	struct:FunctionValidationContext
validateImm	Lib/IR/Validate.cpp	/^	void validateImm(DataSegmentAndMemImm imm)$/;"	f	struct:FunctionValidationContext
validateImm	Lib/IR/Validate.cpp	/^	void validateImm(DataSegmentImm imm)$/;"	f	struct:FunctionValidationContext
validateImm	Lib/IR/Validate.cpp	/^	void validateImm(ElemSegmentAndTableImm imm)$/;"	f	struct:FunctionValidationContext
validateImm	Lib/IR/Validate.cpp	/^	void validateImm(ElemSegmentImm imm)$/;"	f	struct:FunctionValidationContext
validateImm	Lib/IR/Validate.cpp	/^	void validateImm(FunctionImm imm) { validateFunctionIndex(module, imm.functionIndex); }$/;"	f	struct:FunctionValidationContext
validateImm	Lib/IR/Validate.cpp	/^	void validateImm(MemoryCopyImm imm)$/;"	f	struct:FunctionValidationContext
validateImm	Lib/IR/Validate.cpp	/^	void validateImm(MemoryImm imm) { VALIDATE_INDEX(imm.memoryIndex, module.memories.size()); }$/;"	f	struct:FunctionValidationContext
validateImm	Lib/IR/Validate.cpp	/^	void validateImm(NoImm) {}$/;"	f	struct:FunctionValidationContext
validateImm	Lib/IR/Validate.cpp	/^	void validateImm(TableCopyImm imm)$/;"	f	struct:FunctionValidationContext
validateImm	Lib/IR/Validate.cpp	/^	void validateImm(TableImm imm) { VALIDATE_INDEX(imm.tableIndex, module.tables.size()); }$/;"	f	struct:FunctionValidationContext
validateImports	Lib/IR/Validate.cpp	/^void IR::validateImports(const Module& module)$/;"	f	class:IR
validateInitializer	Lib/IR/Validate.cpp	/^static void validateInitializer(const Module& module,$/;"	f	file:
validateLocalIndex	Lib/IR/Validate.cpp	/^	ValueType validateLocalIndex(Uptr localIndex)$/;"	f	struct:FunctionValidationContext	file:
validateMemoryDefs	Lib/IR/Validate.cpp	/^void IR::validateMemoryDefs(const Module& module)$/;"	f	class:IR
validateNonEmptyControlStack	Lib/IR/Validate.cpp	/^	void validateNonEmptyControlStack(const char* context)$/;"	f	struct:FunctionValidationContext
validatePostCodeSections	Include/WAVM/IR/Validate.h	/^	inline void validatePostCodeSections(const IR::Module& module) { validateDataSegments(module); }$/;"	f	namespace:WAVM::IR
validatePreCodeSections	Include/WAVM/IR/Validate.h	/^	inline void validatePreCodeSections(const IR::Module& module)$/;"	f	namespace:WAVM::IR
validateStackEmptyAtEndOfControlStructure	Lib/IR/Validate.cpp	/^	void validateStackEmptyAtEndOfControlStructure()$/;"	f	struct:FunctionValidationContext	file:
validateStartFunction	Lib/IR/Validate.cpp	/^void IR::validateStartFunction(const Module& module)$/;"	f	class:IR
validateTableDefs	Lib/IR/Validate.cpp	/^void IR::validateTableDefs(const Module& module)$/;"	f	class:IR
validateThreadId	Lib/ThreadTest/ThreadTest.cpp	/^static void validateThreadId(Uptr threadId)$/;"	f	file:
validateType	Lib/IR/Validate.cpp	/^template<typename Type> void validateType(Type expectedType, Type actualType, const char* context)$/;"	f
validateTypes	Lib/IR/Validate.cpp	/^void IR::validateTypes(const Module& module)$/;"	f	class:IR
validateUTF8String	Include/WAVM/Inline/Unicode.h	/^	inline const U8* validateUTF8String(const U8* nextChar, const U8* endChar)$/;"	f	namespace:WAVM::Unicode
validatingCodeStream	Lib/WASTParse/ParseFunction.cpp	/^		CodeValidationProxyStream<OperatorEncoderStream> validatingCodeStream;$/;"	m	struct:WAVM::WAST::FunctionState	file:
value	Include/WAVM/IR/Operators.h	/^		Value value;$/;"	m	struct:WAVM::IR::LiteralImm
value	Include/WAVM/Inline/FloatComponents.h	/^			Float value;$/;"	m	union:WAVM::__anon25
value	Include/WAVM/Inline/FloatComponents.h	/^			Float value;$/;"	m	union:__anon27
value	Include/WAVM/Inline/HashMap.h	/^		Value value;$/;"	m	struct:WAVM::HashMapPair
value	Include/WAVM/Inline/IntrusiveSharedPtr.h	/^		Pointee* value;$/;"	m	struct:WAVM::IntrusiveSharedPtr
value	Include/WAVM/Runtime/Intrinsics.h	/^		IR::Value value;$/;"	m	struct:WAVM::Intrinsics::Global
value	Include/WAVM/Runtime/Runtime.h	/^		ObjectType* value;$/;"	m	struct:WAVM::Runtime::GCPointer
value	ThirdParty/libunwind/src/DwarfParser.hpp	/^    int64_t value;$/;"	m	struct:libunwind::CFI_Parser::RegisterLocation
valueType	Include/WAVM/IR/Types.h	/^		ValueType valueType;$/;"	m	struct:WAVM::IR::ValueType::GlobalType
valueTypes	Lib/LLVMJIT/LLVMJITPrivate.h	/^		llvm::Type* valueTypes[Uptr(IR::ValueType::num)];$/;"	m	struct:WAVM::LLVMJIT::LLVMContext
value_type	ThirdParty/libunwind/src/UnwindCursor.hpp	/^  typedef typename A::pint_t value_type;$/;"	t	struct:libunwind::EHABISectionIterator
values	Include/WAVM/IR/Value.h	/^		std::vector<Value> values;$/;"	m	struct:WAVM::IR::ValueTuple
variableIndex	Include/WAVM/IR/Operators.h	/^		Uptr variableIndex;$/;"	m	struct:WAVM::IR::GetOrSetVariableImm
vec	ThirdParty/libunwind/src/Registers.hpp	/^struct v128 { uint32_t vec[4]; };$/;"	m	struct:libunwind::v128
verify	Test/fuzz/ModuleMatcher.h	/^		void verify()$/;"	f	struct:WAVM::ModuleMatcher
verifyMatches	Test/fuzz/ModuleMatcher.h	/^		template<Uptr numLanes> void verifyMatches(ShuffleImm<numLanes> a, ShuffleImm<numLanes> b)$/;"	f	struct:WAVM::ModuleMatcher
verifyMatches	Test/fuzz/ModuleMatcher.h	/^		template<typename Type> void verifyMatches(const Import<Type>& a, const Import<Type>& b)$/;"	f	struct:WAVM::ModuleMatcher
verifyMatches	Test/fuzz/ModuleMatcher.h	/^		template<typename Value> void verifyMatches(LiteralImm<Value> a, LiteralImm<Value> b)$/;"	f	struct:WAVM::ModuleMatcher
verifyMatches	Test/fuzz/ModuleMatcher.h	/^		void verifyMatches(AtomicLoadOrStoreImm<naturalAlignmentLog2> a,$/;"	f	struct:WAVM::ModuleMatcher
verifyMatches	Test/fuzz/ModuleMatcher.h	/^		void verifyMatches(BranchImm a, BranchImm b)$/;"	f	struct:WAVM::ModuleMatcher
verifyMatches	Test/fuzz/ModuleMatcher.h	/^		void verifyMatches(BranchTableImm a, BranchTableImm b)$/;"	f	struct:WAVM::ModuleMatcher
verifyMatches	Test/fuzz/ModuleMatcher.h	/^		void verifyMatches(CallIndirectImm a, CallIndirectImm b)$/;"	f	struct:WAVM::ModuleMatcher
verifyMatches	Test/fuzz/ModuleMatcher.h	/^		void verifyMatches(ControlStructureImm a, ControlStructureImm b)$/;"	f	struct:WAVM::ModuleMatcher
verifyMatches	Test/fuzz/ModuleMatcher.h	/^		void verifyMatches(DataSegmentAndMemImm a, DataSegmentAndMemImm b)$/;"	f	struct:WAVM::ModuleMatcher
verifyMatches	Test/fuzz/ModuleMatcher.h	/^		void verifyMatches(DataSegmentImm a, DataSegmentImm b)$/;"	f	struct:WAVM::ModuleMatcher
verifyMatches	Test/fuzz/ModuleMatcher.h	/^		void verifyMatches(ElemSegmentAndTableImm a, ElemSegmentAndTableImm b)$/;"	f	struct:WAVM::ModuleMatcher
verifyMatches	Test/fuzz/ModuleMatcher.h	/^		void verifyMatches(ElemSegmentImm a, ElemSegmentImm b)$/;"	f	struct:WAVM::ModuleMatcher
verifyMatches	Test/fuzz/ModuleMatcher.h	/^		void verifyMatches(ExceptionTypeImm a, ExceptionTypeImm b)$/;"	f	struct:WAVM::ModuleMatcher
verifyMatches	Test/fuzz/ModuleMatcher.h	/^		void verifyMatches(FunctionImm a, FunctionImm b)$/;"	f	struct:WAVM::ModuleMatcher
verifyMatches	Test/fuzz/ModuleMatcher.h	/^		void verifyMatches(GetOrSetVariableImm<isGlobal> a, GetOrSetVariableImm<isGlobal> b)$/;"	f	struct:WAVM::ModuleMatcher
verifyMatches	Test/fuzz/ModuleMatcher.h	/^		void verifyMatches(LaneIndexImm<numLanes> a, LaneIndexImm<numLanes> b)$/;"	f	struct:WAVM::ModuleMatcher
verifyMatches	Test/fuzz/ModuleMatcher.h	/^		void verifyMatches(LoadOrStoreImm<naturalAlignmentLog2> a,$/;"	f	struct:WAVM::ModuleMatcher
verifyMatches	Test/fuzz/ModuleMatcher.h	/^		void verifyMatches(MemoryCopyImm a, MemoryCopyImm b)$/;"	f	struct:WAVM::ModuleMatcher
verifyMatches	Test/fuzz/ModuleMatcher.h	/^		void verifyMatches(MemoryImm a, MemoryImm b)$/;"	f	struct:WAVM::ModuleMatcher
verifyMatches	Test/fuzz/ModuleMatcher.h	/^		void verifyMatches(NoImm, NoImm) {}$/;"	f	struct:WAVM::ModuleMatcher
verifyMatches	Test/fuzz/ModuleMatcher.h	/^		void verifyMatches(RethrowImm a, RethrowImm b)$/;"	f	struct:WAVM::ModuleMatcher
verifyMatches	Test/fuzz/ModuleMatcher.h	/^		void verifyMatches(TableCopyImm a, TableCopyImm b)$/;"	f	struct:WAVM::ModuleMatcher
verifyMatches	Test/fuzz/ModuleMatcher.h	/^		void verifyMatches(TableImm a, TableImm b)$/;"	f	struct:WAVM::ModuleMatcher
verifyMatches	Test/fuzz/ModuleMatcher.h	/^		void verifyMatches(const ExceptionType& a, const ExceptionType& b)$/;"	f	struct:WAVM::ModuleMatcher
verifyMatches	Test/fuzz/ModuleMatcher.h	/^		void verifyMatches(const ExceptionTypeDef& a, const ExceptionTypeDef& b)$/;"	f	struct:WAVM::ModuleMatcher
verifyMatches	Test/fuzz/ModuleMatcher.h	/^		void verifyMatches(const FunctionDef& a, const FunctionDef& b)$/;"	f	struct:WAVM::ModuleMatcher
verifyMatches	Test/fuzz/ModuleMatcher.h	/^		void verifyMatches(const GlobalDef& a, const GlobalDef& b)$/;"	f	struct:WAVM::ModuleMatcher
verifyMatches	Test/fuzz/ModuleMatcher.h	/^		void verifyMatches(const GlobalType& a, const GlobalType& b)$/;"	f	struct:WAVM::ModuleMatcher
verifyMatches	Test/fuzz/ModuleMatcher.h	/^		void verifyMatches(const IndexSpace<Definition, Type>& a,$/;"	f	struct:WAVM::ModuleMatcher
verifyMatches	Test/fuzz/ModuleMatcher.h	/^		void verifyMatches(const IndexedFunctionType& a, const IndexedFunctionType& b)$/;"	f	struct:WAVM::ModuleMatcher
verifyMatches	Test/fuzz/ModuleMatcher.h	/^		void verifyMatches(const MemoryDef& a, const MemoryDef& b)$/;"	f	struct:WAVM::ModuleMatcher
verifyMatches	Test/fuzz/ModuleMatcher.h	/^		void verifyMatches(const MemoryType& a, const MemoryType& b)$/;"	f	struct:WAVM::ModuleMatcher
verifyMatches	Test/fuzz/ModuleMatcher.h	/^		void verifyMatches(const TableDef& a, const TableDef& b) { verifyMatches(a.type, b.type); }$/;"	f	struct:WAVM::ModuleMatcher
verifyMatches	Test/fuzz/ModuleMatcher.h	/^		void verifyMatches(const TableType& a, const TableType& b)$/;"	f	struct:WAVM::ModuleMatcher
version	ThirdParty/libunwind/docs/conf.py	/^version = '7.0'$/;"	v
version	ThirdParty/libunwind/include/mach-o/compact_unwind_encoding.h	/^    uint32_t    version;            \/\/ UNWIND_SECTION_VERSION$/;"	m	struct:unwind_info_section_header
version	ThirdParty/libunwind/src/UnwindCursor.hpp	/^  uint32_t version() const {$/;"	f	class:libunwind::UnwindSectionHeader
visitFDEs	Lib/Platform/POSIX/Signal.cpp	/^static void visitFDEs(const U8* ehFrames, Uptr numBytes, void (*visitFDE)(const void*))$/;"	f	file:
visitReference	Lib/Runtime/ObjectGC.cpp	/^	void visitReference(Object* object)$/;"	f	struct:GCState
visitReferenceArray	Lib/Runtime/ObjectGC.cpp	/^	template<typename Array> void visitReferenceArray(const Array& array)$/;"	f	struct:GCState
vmFile	Lib/Emscripten/Emscripten.cpp	/^FILE* vmFile(U32 vmHandle)$/;"	f	class:ioStreamVMHandle	file:
volatile	output/CMakeFiles/3.13.2/CompilerIdC/CMakeCCompilerId.c	/^# define volatile$/;"	d	file:
vprintf	Lib/Logging/Logging.cpp	/^void Log::vprintf(Category category, const char* format, va_list argList)$/;"	f	class:Log
wait	Lib/Platform/POSIX/Event.cpp	/^bool Platform::Event::wait(U64 untilTime)$/;"	f	class:Platform::Event
wait	Lib/Platform/Windows/Event.cpp	/^bool Platform::Event::wait(U64 untilTime)$/;"	f	class:Platform::Event
waitOnAddress	Lib/Runtime/Atomics.cpp	/^static U32 waitOnAddress(Value* valuePointer, Value expectedValue, I64 timeout)$/;"	f	file:
wakeAddress	Lib/Runtime/Atomics.cpp	/^static U32 wakeAddress(void* pointer, U32 numToWake)$/;"	f	file:
wakeEvents	Lib/Runtime/Atomics.cpp	/^	std::vector<Platform::Event*> wakeEvents;$/;"	m	struct:WaitList	file:
was	Lib/Platform/POSIX/POSIX.S	/^	   was set up in switchToForkedStackContext to return to that function's$/;"	d
wasInvalidOrMalformed	Include/WAVM/WASTParse/TestScript.h	/^		bool wasInvalidOrMalformed;$/;"	m	struct:WAVM::WAST::AssertInvalidOrMalformedCommand
wasm	Include/WAVM/IR/Types.h	/^		wasm,$/;"	m	class:WAVM::IR::ValueType::CallingConvention
wasm	Test/DumpTestModules/DumpTestModules.cpp	/^	wasm,$/;"	m	class:DumpFormat	file:
wast	Test/DumpTestModules/DumpTestModules.cpp	/^	wast,$/;"	m	class:DumpFormat	file:
wavmAssert	Include/WAVM/Inline/Assert.h	/^#define wavmAssert(/;"	d
wavmAssertMutexIsLockedByCurrentThread	Include/WAVM/Platform/Mutex.h	/^#define wavmAssertMutexIsLockedByCurrentThread(/;"	d
wds	ThirdParty/dtoa/dtoa.c	/^	int k, maxwds, sign, wds;$/;"	m	struct:Bigint	file:
word0	ThirdParty/dtoa/dtoa.c	/^#define word0(/;"	d	file:
word1	ThirdParty/dtoa/dtoa.c	/^#define word1(/;"	d	file:
writeFile	Lib/Platform/POSIX/File.cpp	/^bool Platform::writeFile(File* file, const void* data, Uptr numBytes, Uptr* outNumBytesWritten)$/;"	f	class:Platform
writeFile	Lib/Platform/Windows/File.cpp	/^bool Platform::writeFile(File* file, const void* data, Uptr numBytes, Uptr* outNumBytesWritten)$/;"	f	class:Platform
writeOnly	Include/WAVM/Platform/File.h	/^		writeOnly = 0x2,$/;"	m	class:WAVM::Platform::FileAccessMode
x	Examples/Benchmark/Benchmark.cpp	/^	double x;$/;"	m	struct:point	file:
x	ThirdParty/dtoa/dtoa.c	/^	ULong x[1];$/;"	m	struct:Bigint	file:
xbridgeChainServiceMap	Include/WAVM/Emscripten/xchain-service.h	/^    static WAVM::HashMap<IR::Module*, XBridgeChainService*> xbridgeChainServiceMap;$/;"	m	namespace:xchain
xchain	Include/WAVM/Emscripten/xchain-service-client.h	/^namespace xchain {$/;"	n
xchain	Include/WAVM/Emscripten/xchain-service.h	/^namespace xchain {$/;"	n
xchain	ThirdParty/bridge/rpc_inproc.cpp	/^namespace xchain{$/;"	n	file:
xchain	ThirdParty/bridge/rpc_inproc.h	/^namespace xchain {$/;"	n
xmm10	Lib/Platform/Windows/WindowsPrivate.h	/^	__m128 xmm10;$/;"	m	struct:ExecutionContext
xmm11	Lib/Platform/Windows/WindowsPrivate.h	/^	__m128 xmm11;$/;"	m	struct:ExecutionContext
xmm12	Lib/Platform/Windows/WindowsPrivate.h	/^	__m128 xmm12;$/;"	m	struct:ExecutionContext
xmm13	Lib/Platform/Windows/WindowsPrivate.h	/^	__m128 xmm13;$/;"	m	struct:ExecutionContext
xmm14	Lib/Platform/Windows/WindowsPrivate.h	/^	__m128 xmm14;$/;"	m	struct:ExecutionContext
xmm15	Lib/Platform/Windows/WindowsPrivate.h	/^	__m128 xmm15;$/;"	m	struct:ExecutionContext
xmm6	Lib/Platform/Windows/WindowsPrivate.h	/^	__m128 xmm6;$/;"	m	struct:ExecutionContext
xmm7	Lib/Platform/Windows/WindowsPrivate.h	/^	__m128 xmm7;$/;"	m	struct:ExecutionContext
xmm8	Lib/Platform/Windows/WindowsPrivate.h	/^	__m128 xmm8;$/;"	m	struct:ExecutionContext
xmm9	Lib/Platform/Windows/WindowsPrivate.h	/^	__m128 xmm9;$/;"	m	struct:ExecutionContext
y	Examples/Benchmark/Benchmark.cpp	/^	double y;$/;"	m	struct:point	file:
zeroOrMore	Lib/RegExp/RegExp.cpp	/^	zeroOrMore,$/;"	m	class:NodeType	file:
zext	Lib/LLVMJIT/EmitFunctionContext.h	/^		llvm::Value* zext(llvm::Value* value, llvm::Type* type)$/;"	f	struct:WAVM::LLVMJIT::EmitFunctionContext
~AbstractUnwindCursor	ThirdParty/libunwind/src/UnwindCursor.hpp	/^  virtual ~AbstractUnwindCursor() {}$/;"	f	class:libunwind::AbstractUnwindCursor
~Action	Include/WAVM/WASTParse/TestScript.h	/^		virtual ~Action() {}$/;"	f	struct:WAVM::WAST::Action
~Binary	Lib/RegExp/RegExp.cpp	/^	~Binary()$/;"	f	struct:Binary
~CallStack	Include/WAVM/Platform/Diagnostics.h	/^		~CallStack() {}$/;"	f	struct:WAVM::Platform::CallStack
~CodeValidationStream	Lib/IR/Validate.cpp	/^IR::CodeValidationStream::~CodeValidationStream()$/;"	f	class:IR::CodeValidationStream
~Command	Include/WAVM/WASTParse/TestScript.h	/^		virtual ~Command() {}$/;"	f	struct:WAVM::WAST::Command
~Compartment	Lib/Runtime/Compartment.cpp	/^Runtime::Compartment::~Compartment()$/;"	f	class:Runtime::Compartment
~Context	Lib/Runtime/Context.cpp	/^Runtime::Context::~Context()$/;"	f	class:Runtime::Context
~Event	Lib/Platform/POSIX/Event.cpp	/^Platform::Event::~Event()$/;"	f	class:Platform::Event
~Event	Lib/Platform/Windows/Event.cpp	/^Platform::Event::~Event() { errorUnless(CloseHandle(handle)); }$/;"	f	class:Platform::Event
~ExceptionType	Lib/Runtime/Exception.cpp	/^Runtime::ExceptionType::~ExceptionType()$/;"	f	class:Runtime::ExceptionType
~GCObject	Lib/Runtime/RuntimePrivate.h	/^		virtual ~GCObject() { wavmAssert(numRootReferences.load(std::memory_order_acquire) == 0); }$/;"	f	struct:WAVM::Runtime::GCObject
~GCPointer	Include/WAVM/Runtime/Runtime.h	/^		~GCPointer()$/;"	f	struct:WAVM::Runtime::GCPointer
~GasVisitor	Include/WAVM/Emscripten/gas-visit-context.h	/^    ~GasVisitor() {$/;"	f	struct:GasVisitor
~Global	Lib/Runtime/Global.cpp	/^Runtime::Global::~Global()$/;"	f	class:Runtime::Global
~HashTable	Include/WAVM/Inline/HashTableImpl.h	/^template<HASHTABLE_PARAMETERS> HashTable<HASHTABLE_ARGUMENTS>::~HashTable() { destruct(); }$/;"	f	class:HashTable
~ImportFunctionInsertVisitor	Include/WAVM/Emscripten/insert-imported-context.h	/^    ~ImportFunctionInsertVisitor() {}$/;"	f	struct:ImportFunctionInsertVisitor
~IntrusiveSharedPtr	Include/WAVM/Inline/IntrusiveSharedPtr.h	/^		~IntrusiveSharedPtr()$/;"	f	struct:WAVM::IntrusiveSharedPtr
~Lock	Include/WAVM/Inline/Lock.h	/^		~Lock() { unlock(); }$/;"	f	struct:WAVM::Lock
~Machine	Lib/NFA/NFA.cpp	/^NFA::Machine::~Machine()$/;"	f	class:NFA::Machine
~Memory	Lib/Runtime/Memory.cpp	/^Runtime::Memory::~Memory()$/;"	f	class:Runtime::Memory
~Module	Lib/LLVMJIT/LLVMModule.cpp	/^Module::~Module()$/;"	f	class:Module
~Module	Lib/Runtime/Intrinsics.cpp	/^Intrinsics::Module::~Module()$/;"	f	class:Intrinsics::Module
~ModuleInstance	Lib/Runtime/Module.cpp	/^ModuleInstance::~ModuleInstance()$/;"	f	class:ModuleInstance
~Mutex	Lib/Platform/POSIX/Mutex.cpp	/^Platform::Mutex::~Mutex() { errorUnless(!pthread_mutex_destroy((pthread_mutex_t*)&pthreadMutex)); }$/;"	f	class:Platform::Mutex
~Mutex	Lib/Platform/Windows/Mutex.cpp	/^Platform::Mutex::~Mutex()$/;"	f	class:Platform::Mutex
~Node	Lib/RegExp/RegExp.cpp	/^	virtual ~Node() {}$/;"	f	struct:Node
~OptionalStorage	Include/WAVM/Inline/OptionalStorage.h	/^		~OptionalStorage() {}$/;"	f	struct:WAVM::OptionalStorage
~ScopedBranchTarget	Lib/WASTParse/ParseFunction.cpp	/^		~ScopedBranchTarget()$/;"	f	struct:__anon50::ScopedBranchTarget
~ScopedTagPrinter	Lib/WASTPrint/Print.cpp	/^	~ScopedTagPrinter() { string += DEDENT_STRING ")"; }$/;"	f	struct:ScopedTagPrinter
~SigAltStack	Lib/Platform/POSIX/POSIXPrivate.h	/^		~SigAltStack() { deinit(); }$/;"	f	struct:WAVM::Platform::SigAltStack
~StateTransitionsByChar	Lib/NFA/NFA.cpp	/^	~StateTransitionsByChar()$/;"	f	struct:StateTransitionsByChar
~Table	Lib/Runtime/Table.cpp	/^Table::~Table()$/;"	f	class:Table
~TestScriptState	Test/RunTestScript/RunTestScript.cpp	/^	~TestScriptState()$/;"	f	struct:TestScriptState
~Thread	Lib/Platform/Windows/Thread.cpp	/^	~Thread()$/;"	f	struct:Platform::Thread	file:
~ThreadArgs	Lib/Platform/Windows/Thread.cpp	/^	~ThreadArgs()$/;"	f	struct:ThreadArgs
~Unary	Lib/RegExp/RegExp.cpp	/^	~Unary() { delete child; }$/;"	f	struct:Unary
~UnwindCursor	ThirdParty/libunwind/src/UnwindCursor.hpp	/^  virtual             ~UnwindCursor() {}$/;"	f	class:libunwind::UnwindCursor
~XChainServiceClient	ThirdParty/bridge/rpc_inproc.cpp	/^XChainServiceClient::~XChainServiceClient(){$/;"	f	class:xchain::XChainServiceClient
